"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_sparql_sparql_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js":
/*!****************************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: \"'\", close: \"'\", notIn: ['string'] },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' }\r\n    ]\r\n};\r\nvar language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.rq',\r\n    brackets: [\r\n        { token: 'delimiter.curly', open: '{', close: '}' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n        { token: 'delimiter.square', open: '[', close: ']' },\r\n        { token: 'delimiter.angle', open: '<', close: '>' }\r\n    ],\r\n    keywords: [\r\n        'add',\r\n        'as',\r\n        'asc',\r\n        'ask',\r\n        'base',\r\n        'by',\r\n        'clear',\r\n        'construct',\r\n        'copy',\r\n        'create',\r\n        'data',\r\n        'delete',\r\n        'desc',\r\n        'describe',\r\n        'distinct',\r\n        'drop',\r\n        'false',\r\n        'filter',\r\n        'from',\r\n        'graph',\r\n        'group',\r\n        'having',\r\n        'in',\r\n        'insert',\r\n        'limit',\r\n        'load',\r\n        'minus',\r\n        'move',\r\n        'named',\r\n        'not',\r\n        'offset',\r\n        'optional',\r\n        'order',\r\n        'prefix',\r\n        'reduced',\r\n        'select',\r\n        'service',\r\n        'silent',\r\n        'to',\r\n        'true',\r\n        'undef',\r\n        'union',\r\n        'using',\r\n        'values',\r\n        'where',\r\n        'with'\r\n    ],\r\n    builtinFunctions: [\r\n        'a',\r\n        'abs',\r\n        'avg',\r\n        'bind',\r\n        'bnode',\r\n        'bound',\r\n        'ceil',\r\n        'coalesce',\r\n        'concat',\r\n        'contains',\r\n        'count',\r\n        'datatype',\r\n        'day',\r\n        'encode_for_uri',\r\n        'exists',\r\n        'floor',\r\n        'group_concat',\r\n        'hours',\r\n        'if',\r\n        'iri',\r\n        'isblank',\r\n        'isiri',\r\n        'isliteral',\r\n        'isnumeric',\r\n        'isuri',\r\n        'lang',\r\n        'langmatches',\r\n        'lcase',\r\n        'max',\r\n        'md5',\r\n        'min',\r\n        'minutes',\r\n        'month',\r\n        'now',\r\n        'rand',\r\n        'regex',\r\n        'replace',\r\n        'round',\r\n        'sameterm',\r\n        'sample',\r\n        'seconds',\r\n        'sha1',\r\n        'sha256',\r\n        'sha384',\r\n        'sha512',\r\n        'str',\r\n        'strafter',\r\n        'strbefore',\r\n        'strdt',\r\n        'strends',\r\n        'strlang',\r\n        'strlen',\r\n        'strstarts',\r\n        'struuid',\r\n        'substr',\r\n        'sum',\r\n        'timezone',\r\n        'tz',\r\n        'ucase',\r\n        'uri',\r\n        'uuid',\r\n        'year'\r\n    ],\r\n    // describe tokens\r\n    ignoreCase: true,\r\n    tokenizer: {\r\n        root: [\r\n            // resource indicators\r\n            [/<[^\\s\\u00a0>]*>?/, 'tag'],\r\n            // strings\r\n            { include: '@strings' },\r\n            // line comment\r\n            [/#.*/, 'comment'],\r\n            // special chars with special meaning\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[;,.]/, 'delimiter'],\r\n            // (prefixed) name\r\n            [\r\n                /[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/,\r\n                'tag'\r\n            ],\r\n            [/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, 'tag'],\r\n            // identifiers, builtinFunctions and keywords\r\n            [\r\n                /[$?]?[_\\w\\d]+/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@builtinFunctions': { token: 'predefined.sql' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // operators\r\n            [/\\^\\^/, 'operator.sql'],\r\n            [/\\^[*+\\-<>=&|^\\/!?]*/, 'operator.sql'],\r\n            [/[*+\\-<>=&|\\/!?]/, 'operator.sql'],\r\n            // symbol\r\n            [/@[a-z\\d\\-]*/, 'metatag.html'],\r\n            // whitespaces\r\n            [/\\s+/, 'white']\r\n        ],\r\n        strings: [\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'$/, 'string.sql', '@pop'],\r\n            [/'/, 'string.sql', '@stringBody'],\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"$/, 'string.sql', '@pop'],\r\n            [/\"/, 'string.sql', '@dblStringBody']\r\n        ],\r\n        // single-quoted strings\r\n        stringBody: [\r\n            [/[^\\\\']+/, 'string.sql'],\r\n            [/\\\\./, 'string.escape'],\r\n            [/'/, 'string.sql', '@pop']\r\n        ],\r\n        // double-quoted strings\r\n        dblStringBody: [\r\n            [/[^\\\\\"]+/, 'string.sql'],\r\n            [/\\\\./, 'string.escape'],\r\n            [/\"/, 'string.sql', '@pop']\r\n        ]\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js?");

/***/ })

}]);