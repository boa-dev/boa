//! List of commonly used strings in Javascript code.

use crate::{tagged::Tagged, JsStr};

use super::JsString;
use boa_macros::js_str;
use paste::paste;
use rustc_hash::{FxHashMap, FxHasher};
use std::hash::BuildHasherDefault;

macro_rules! well_known_statics {
    ( $( $(#[$attr:meta])* ($name:ident, $string:literal) ),+$(,)? ) => {
        $(
            paste!{
                #[doc = "Gets the static `JsString` for `\"" $string "\"`."]
                pub const $name: JsString = JsString {
                    ptr: Tagged::from_tag(
                        Self::find_index($string),
                    ),
                };
            }
        )+
    };
}

/// List of commonly used strings in Javascript code.
///
/// Any strings defined here are used as a static [`JsString`] instead of allocating on the heap.
#[derive(Debug, Clone, Copy)]
pub struct StaticJsStrings;

impl StaticJsStrings {
    // useful to search at compile time a certain string in the array
    const fn find_index(candidate: &str) -> usize {
        const fn const_eq(lhs: &[u8], rhs: &[u8]) -> bool {
            if lhs.len() != rhs.len() {
                return false;
            }

            let mut i = 0;
            while i < lhs.len() {
                if lhs[i] != rhs[i] {
                    return false;
                }
                i += 1;
            }
            true
        }

        let len = RAW_STATICS.len();
        let mut i = 0;
        while i < len {
            let Some(s) = RAW_STATICS[i].as_latin1() else {
                // All static strings are latin1 encoded
                unreachable!()
            };
            if const_eq(s, candidate.as_bytes()) {
                return i;
            }
            i += 1;
        }

        panic!("couldn't find the required string on the common string array");
    }

    /// Gets the `JsString` corresponding to `string`, or `None` if the string
    /// doesn't exist inside the static array.
    pub(crate) fn get_string(string: &JsStr<'_>) -> Option<JsString> {
        if string.len() > MAX_STATIC_LENGTH {
            return None;
        }

        let index = RAW_STATICS_CACHE.with(|map| map.get(string).copied())?;

        Some(JsString {
            ptr: Tagged::from_tag(index),
        })
    }

    /// Gets the `&[u16]` slice corresponding to the provided index, or `None` if the index
    /// provided exceeds the size of the static array.
    pub(crate) fn get(index: usize) -> Option<JsStr<'static>> {
        RAW_STATICS.get(index).copied()
    }

    // Some consts are only used on certain features, which triggers the unused lint.
    well_known_statics! {
        (EMPTY_STRING, ""),
        (LENGTH, "length"),
        // Symbols
        (SYMBOL_ASYNC_ITERATOR, "Symbol.asyncIterator"),
        (SYMBOL_HAS_INSTANCE, "Symbol.hasInstance"),
        (SYMBOL_IS_CONCAT_SPREADABLE, "Symbol.isConcatSpreadable"),
        (SYMBOL_ITERATOR, "Symbol.iterator"),
        (SYMBOL_MATCH, "Symbol.match"),
        (SYMBOL_MATCH_ALL, "Symbol.matchAll"),
        (SYMBOL_REPLACE, "Symbol.replace"),
        (SYMBOL_SEARCH, "Symbol.search"),
        (SYMBOL_SPECIES, "Symbol.species"),
        (SYMBOL_SPLIT, "Symbol.split"),
        (SYMBOL_TO_PRIMITIVE, "Symbol.toPrimitive"),
        (SYMBOL_TO_STRING_TAG, "Symbol.toStringTag"),
        (SYMBOL_UNSCOPABLES, "Symbol.unscopables"),
        (FN_SYMBOL_ASYNC_ITERATOR, "[Symbol.asyncIterator]"),
        (FN_SYMBOL_HAS_INSTANCE, "[Symbol.hasInstance]"),
        (FN_SYMBOL_IS_CONCAT_SPREADABLE, "[Symbol.isConcatSpreadable]"),
        (FN_SYMBOL_ITERATOR, "[Symbol.iterator]"),
        (FN_SYMBOL_MATCH, "[Symbol.match]"),
        (FN_SYMBOL_MATCH_ALL, "[Symbol.matchAll]"),
        (FN_SYMBOL_REPLACE, "[Symbol.replace]"),
        (FN_SYMBOL_SEARCH, "[Symbol.search]"),
        (FN_SYMBOL_SPECIES, "[Symbol.species]"),
        (FN_SYMBOL_SPLIT, "[Symbol.split]"),
        (FN_SYMBOL_TO_PRIMITIVE, "[Symbol.toPrimitive]"),
        (FN_SYMBOL_TO_STRING_TAG, "[Symbol.toStringTag]"),
        (FN_SYMBOL_UNSCOPABLES, "[Symbol.unscopables]"),
        // Builtins
        (ARRAY, "Array"),
        (ARRAY_BUFFER, "ArrayBuffer"),
        (SHARED_ARRAY_BUFFER, "SharedArrayBuffer"),
        (ASYNC_FUNCTION, "AsyncFunction"),
        (ASYNC_GENERATOR, "AsyncGenerator"),
        (ASYNC_GENERATOR_FUNCTION, "AsyncGeneratorFunction"),
        (ATOMICS, "Atomics"),
        (BIG_INT, "BigInt"),
        (BOOLEAN, "Boolean"),
        (DATA_VIEW, "DataView"),
        (DATE, "Date"),
        (ERROR, "Error"),
        (AGGREGATE_ERROR, "AggregateError"),
        (EVAL_ERROR, "EvalError"),
        (RANGE_ERROR, "RangeError"),
        (REFERENCE_ERROR, "ReferenceError"),
        (SYNTAX_ERROR, "SyntaxError"),
        (TYPE_ERROR, "TypeError"),
        (URI_ERROR, "URIError"),
        (ESCAPE, "escape"),
        (UNESCAPE, "unescape"),
        (EVAL, "eval"),
        (FUNCTION, "Function"),
        (GENERATOR, "Generator"),
        (GENERATOR_FUNCTION, "GeneratorFunction"),
        (INTL, "Intl"),
        (COLLATOR, "Collator"),
        (LIST_FORMAT, "ListFormat"),
        (LOCALE, "Locale"),
        (PLURAL_RULES, "PluralRules"),
        (SEGMENTER, "Segmenter"),
        (DATE_TIME_FORMAT, "DateTimeFormat"),
        (JSON, "JSON"),
        (MAP, "Map"),
        (MATH, "Math"),
        (NUMBER, "Number"),
        (NUMBER_FORMAT, "NumberFormat"),
        (IS_FINITE, "isFinite"),
        (IS_NAN, "isNaN"),
        (PARSE_INT, "parseInt"),
        (PARSE_FLOAT, "parseFloat"),
        (OBJECT, "Object"),
        (PROMISE, "Promise"),
        (PROXY, "Proxy"),
        (REFLECT, "Reflect"),
        (REG_EXP, "RegExp"),
        (SET, "Set"),
        (STRING, "String"),
        (SYMBOL, "Symbol"),
        (TYPED_ARRAY, "TypedArray"),
        (INT8_ARRAY, "Int8Array"),
        (UINT8_ARRAY, "Uint8Array"),
        (UINT8_CLAMPED_ARRAY, "Uint8ClampedArray"),
        (INT16_ARRAY, "Int16Array"),
        (UINT16_ARRAY, "Uint16Array"),
        (INT32_ARRAY, "Int32Array"),
        (UINT32_ARRAY, "Uint32Array"),
        (BIG_INT64_ARRAY, "BigInt64Array"),
        (BIG_UINT64_ARRAY, "BigUint64Array"),
        (FLOAT32_ARRAY, "Float32Array"),
        (FLOAT64_ARRAY, "Float64Array"),
        (ENCODE_URI, "encodeURI"),
        (ENCODE_URI_COMPONENT, "encodeURIComponent"),
        (DECODE_URI, "decodeURI"),
        (DECODE_URI_COMPONENT, "decodeURIComponent"),
        (WEAK_REF, "WeakRef"),
        (WEAK_MAP, "WeakMap"),
        (WEAK_SET, "WeakSet"),
        (TEMPORAL, "Temporal"),
        (NOW, "Temporal.Now"),
        (INSTANT, "Temporal.Instant"),
        (DURATION, "Temporal.Duration"),
        (PLAIN_DATE, "Temporal.PlainDate"),
        (PLAIN_DATETIME, "Temporal.PlainDateTime"),
        (PLAIN_TIME, "Temporal.PlainTime"),
        (PLAIN_YM, "Temporal.PlainYearMonth"),
        (PLAIN_MD, "Temporal.PlainMonthDay"),
        (CALENDAR, "Temporal.Calendar"),
        (TIMEZONE, "Temporal.TimeZone"),
        (ZONED_DT, "Temporal.ZonedDateTime"),
    }
}

const MAX_STATIC_LENGTH: usize = {
    let mut max = 0;
    let mut i = 0;
    while i < RAW_STATICS.len() {
        // TOOD: Because `get_index` is not const, we are accessing doc hidden stuff, that may change.
        let len = RAW_STATICS[i].len();
        if len > max {
            max = len;
        }
        i += 1;
    }
    max
};

thread_local! {
    /// Map from a string inside [`RAW_STATICS`] to its corresponding static index on `RAW_STATICS`.
    static RAW_STATICS_CACHE: FxHashMap<JsStr<'static>, usize> = {
        let mut constants = FxHashMap::with_capacity_and_hasher(
            RAW_STATICS.len(),
            BuildHasherDefault::<FxHasher>::default(),
        );

        for (idx, &s) in RAW_STATICS.iter().enumerate() {
            constants.insert(s, idx);
        }

        constants
    };
}

/// Array of raw static strings that aren't reference counted.
const RAW_STATICS: &[JsStr<'_>] = &[
    js_str!(""),
    // Well known symbols
    js_str!("Symbol.asyncIterator"),
    js_str!("[Symbol.asyncIterator]"),
    js_str!("Symbol.hasInstance"),
    js_str!("[Symbol.hasInstance]"),
    js_str!("Symbol.isConcatSpreadable"),
    js_str!("[Symbol.isConcatSpreadable]"),
    js_str!("Symbol.iterator"),
    js_str!("[Symbol.iterator]"),
    js_str!("Symbol.match"),
    js_str!("[Symbol.match]"),
    js_str!("Symbol.matchAll"),
    js_str!("[Symbol.matchAll]"),
    js_str!("Symbol.replace"),
    js_str!("[Symbol.replace]"),
    js_str!("Symbol.search"),
    js_str!("[Symbol.search]"),
    js_str!("Symbol.species"),
    js_str!("[Symbol.species]"),
    js_str!("Symbol.split"),
    js_str!("[Symbol.split]"),
    js_str!("Symbol.toPrimitive"),
    js_str!("[Symbol.toPrimitive]"),
    js_str!("Symbol.toStringTag"),
    js_str!("[Symbol.toStringTag]"),
    js_str!("Symbol.unscopables"),
    js_str!("[Symbol.unscopables]"),
    js_str!("get [Symbol.species]"),
    js_str!("get [Symbol.toStringTag]"),
    // Well known builtins
    js_str!("Array"),
    js_str!("ArrayBuffer"),
    js_str!("SharedArrayBuffer"),
    js_str!("AsyncFunction"),
    js_str!("AsyncGenerator"),
    js_str!("AsyncGeneratorFunction"),
    js_str!("Atomics"),
    js_str!("BigInt"),
    js_str!("Boolean"),
    js_str!("DataView"),
    js_str!("Date"),
    js_str!("Error"),
    js_str!("AggregateError"),
    js_str!("EvalError"),
    js_str!("RangeError"),
    js_str!("ReferenceError"),
    js_str!("SyntaxError"),
    js_str!("TypeError"),
    js_str!("URIError"),
    js_str!("escape"),
    js_str!("unescape"),
    js_str!("eval"),
    js_str!("Function"),
    js_str!("Generator"),
    js_str!("GeneratorFunction"),
    js_str!("Intl"),
    js_str!("Collator"),
    js_str!("ListFormat"),
    js_str!("Locale"),
    js_str!("PluralRules"),
    js_str!("Segmenter"),
    js_str!("DateTimeFormat"),
    js_str!("JSON"),
    js_str!("Map"),
    js_str!("Math"),
    js_str!("Number"),
    js_str!("NumberFormat"),
    js_str!("isFinite"),
    js_str!("isNaN"),
    js_str!("parseInt"),
    js_str!("parseFloat"),
    js_str!("Object"),
    js_str!("Promise"),
    js_str!("Proxy"),
    js_str!("Reflect"),
    js_str!("RegExp"),
    js_str!("Set"),
    js_str!("String"),
    js_str!("Symbol"),
    js_str!("TypedArray"),
    js_str!("Int8Array"),
    js_str!("Uint8Array"),
    js_str!("Uint8ClampedArray"),
    js_str!("Int16Array"),
    js_str!("Uint16Array"),
    js_str!("Int32Array"),
    js_str!("Uint32Array"),
    js_str!("BigInt64Array"),
    js_str!("BigUint64Array"),
    js_str!("Float32Array"),
    js_str!("Float64Array"),
    js_str!("encodeURI"),
    js_str!("encodeURIComponent"),
    js_str!("decodeURI"),
    js_str!("decodeURIComponent"),
    js_str!("WeakRef"),
    js_str!("WeakMap"),
    js_str!("WeakSet"),
    js_str!("Temporal"),
    js_str!("Temporal.Now"),
    js_str!("Temporal.Instant"),
    js_str!("Temporal.Duration"),
    js_str!("Temporal.Calendar"),
    js_str!("Temporal.PlainDate"),
    js_str!("Temporal.PlainDateTime"),
    js_str!("Temporal.PlainMonthDay"),
    js_str!("Temporal.PlainYearMonth"),
    js_str!("Temporal.PlainTime"),
    js_str!("Temporal.TimeZone"),
    js_str!("Temporal.ZonedDateTime"),
    // Misc
    js_str!(","),
    js_str!(":"),
    // Generic use
    js_str!("name"),
    js_str!("length"),
    js_str!("arguments"),
    js_str!("prototype"),
    js_str!("constructor"),
    js_str!("return"),
    js_str!("throw"),
    js_str!("global"),
    js_str!("globalThis"),
    // typeof
    js_str!("null"),
    js_str!("undefined"),
    js_str!("number"),
    js_str!("string"),
    js_str!("symbol"),
    js_str!("bigint"),
    js_str!("object"),
    js_str!("function"),
    // Property descriptor
    js_str!("value"),
    js_str!("get"),
    js_str!("set"),
    js_str!("writable"),
    js_str!("enumerable"),
    js_str!("configurable"),
    // Object object
    js_str!("assign"),
    js_str!("create"),
    js_str!("toString"),
    js_str!("valueOf"),
    js_str!("is"),
    js_str!("seal"),
    js_str!("isSealed"),
    js_str!("freeze"),
    js_str!("isFrozen"),
    js_str!("isExtensible"),
    js_str!("hasOwnProperty"),
    js_str!("isPrototypeOf"),
    js_str!("setPrototypeOf"),
    js_str!("getPrototypeOf"),
    js_str!("defineProperty"),
    js_str!("defineProperties"),
    js_str!("deleteProperty"),
    js_str!("construct"),
    js_str!("hasOwn"),
    js_str!("ownKeys"),
    js_str!("keys"),
    js_str!("values"),
    js_str!("entries"),
    js_str!("fromEntries"),
    js_str!("propertyIsEnumerable"),
    js_str!("preventExtensions"),
    js_str!("getOwnPropertyDescriptor"),
    js_str!("getOwnPropertyDescriptors"),
    js_str!("getOwnPropertyNames"),
    js_str!("getOwnPropertySymbols"),
    js_str!("__defineGetter__"),
    js_str!("__defineSetter__"),
    js_str!("__lookupGetter__"),
    js_str!("__lookupSetter__"),
    js_str!("__proto__"),
    js_str!("get __proto__"),
    js_str!("set __proto__"),
    // Function object
    js_str!("apply"),
    js_str!("bind"),
    js_str!("call"),
    js_str!("caller"),
    // Arguments object
    js_str!("callee"),
    // Array object
    js_str!("at"),
    js_str!("from"),
    js_str!("isArray"),
    js_str!("of"),
    js_str!("copyWithin"),
    js_str!("every"),
    js_str!("fill"),
    js_str!("filter"),
    js_str!("find"),
    js_str!("findIndex"),
    js_str!("findLast"),
    js_str!("findLastIndex"),
    js_str!("flat"),
    js_str!("flatMap"),
    js_str!("forEach"),
    js_str!("includes"),
    js_str!("indexOf"),
    js_str!("join"),
    js_str!("map"),
    js_str!("next"),
    js_str!("reduce"),
    js_str!("reduceRight"),
    js_str!("reverse"),
    js_str!("shift"),
    js_str!("slice"),
    js_str!("splice"),
    js_str!("some"),
    js_str!("sort"),
    js_str!("unshift"),
    js_str!("push"),
    js_str!("pop"),
    js_str!("groupBy"),
    js_str!("toReversed"),
    js_str!("toSorted"),
    js_str!("toSpliced"),
    js_str!("with"),
    // String object
    js_str!("charAt"),
    js_str!("charCodeAt"),
    js_str!("codePointAt"),
    js_str!("concat"),
    js_str!("endsWith"),
    js_str!("fromCharCode"),
    js_str!("fromCodePoint"),
    js_str!("lastIndexOf"),
    js_str!("match"),
    js_str!("matchAll"),
    js_str!("normalize"),
    js_str!("padEnd"),
    js_str!("padStart"),
    js_str!("raw"),
    js_str!("repeat"),
    js_str!("replace"),
    js_str!("replaceAll"),
    js_str!("search"),
    js_str!("split"),
    js_str!("startsWith"),
    js_str!("substr"),
    js_str!("substring"),
    js_str!("toLocaleString"),
    js_str!("toLowerCase"),
    js_str!("toUpperCase"),
    js_str!("trim"),
    js_str!("trimEnd"),
    js_str!("trimStart"),
    js_str!("isWellFormed"),
    js_str!("localeCompare"),
    js_str!("toWellFormed"),
    js_str!("toLocaleLowerCase"),
    js_str!("toLocaleUpperCase"),
    js_str!("trimLeft"),
    js_str!("trimRight"),
    js_str!("anchor"),
    js_str!("big"),
    js_str!("blink"),
    js_str!("bold"),
    js_str!("fixed"),
    js_str!("fontcolor"),
    js_str!("fontsize"),
    js_str!("italics"),
    js_str!("link"),
    js_str!("small"),
    js_str!("strike"),
    js_str!("sub"),
    js_str!("sup"),
    // Number object
    js_str!("Infinity"),
    js_str!("NaN"),
    js_str!("EPSILON"),
    js_str!("MAX_SAFE_INTEGER"),
    js_str!("MIN_SAFE_INTEGER"),
    js_str!("MAX_VALUE"),
    js_str!("MIN_VALUE"),
    js_str!("NEGATIVE_INFINITY"),
    js_str!("POSITIVE_INFINITY"),
    js_str!("isSafeInteger"),
    js_str!("isInteger"),
    js_str!("toExponential"),
    js_str!("toFixed"),
    js_str!("toPrecision"),
    // BigInt object
    js_str!("asIntN"),
    js_str!("asUintN"),
    // RegExp object
    js_str!("exec"),
    js_str!("test"),
    js_str!("compile"),
    js_str!("flags"),
    js_str!("index"),
    js_str!("lastIndex"),
    js_str!("hasIndices"),
    js_str!("ignoreCase"),
    js_str!("multiline"),
    js_str!("dotAll"),
    js_str!("unicode"),
    js_str!("sticky"),
    js_str!("source"),
    js_str!("get hasIndices"),
    js_str!("get global"),
    js_str!("get ignoreCase"),
    js_str!("get multiline"),
    js_str!("get dotAll"),
    js_str!("get unicode"),
    js_str!("get sticky"),
    js_str!("get flags"),
    js_str!("get source"),
    // Symbol object
    js_str!("for"),
    js_str!("keyFor"),
    js_str!("description"),
    js_str!("asyncIterator"),
    js_str!("hasInstance"),
    js_str!("species"),
    js_str!("unscopables"),
    js_str!("iterator"),
    js_str!("toStringTag"),
    js_str!("toPrimitive"),
    js_str!("isConcatSpreadable"),
    js_str!("get description"),
    // Map object
    js_str!("clear"),
    js_str!("delete"),
    js_str!("has"),
    js_str!("size"),
    // Set object
    js_str!("add"),
    // Reflect object
    // Proxy object
    js_str!("revocable"),
    // Error objects
    js_str!("message"),
    // Date object
    js_str!("toJSON"),
    js_str!("getDate"),
    js_str!("getDay"),
    js_str!("getFullYear"),
    js_str!("getHours"),
    js_str!("getMilliseconds"),
    js_str!("getMinutes"),
    js_str!("getMonth"),
    js_str!("getSeconds"),
    js_str!("getTime"),
    js_str!("getYear"),
    js_str!("getUTCDate"),
    js_str!("getUTCDay"),
    js_str!("getUTCFullYear"),
    js_str!("getUTCHours"),
    js_str!("getUTCMinutes"),
    js_str!("getUTCMonth"),
    js_str!("getUTCSeconds"),
    js_str!("setDate"),
    js_str!("setFullYear"),
    js_str!("setHours"),
    js_str!("setMilliseconds"),
    js_str!("setMinutes"),
    js_str!("setMonth"),
    js_str!("setSeconds"),
    js_str!("setYear"),
    js_str!("setTime"),
    js_str!("setUTCDate"),
    js_str!("setUTCFullYear"),
    js_str!("setUTCHours"),
    js_str!("setUTCMinutes"),
    js_str!("setUTCMonth"),
    js_str!("setUTCSeconds"),
    js_str!("toDateString"),
    js_str!("toGMTString"),
    js_str!("toISOString"),
    js_str!("toTimeString"),
    js_str!("toUTCString"),
    js_str!("now"),
    js_str!("UTC"),
    js_str!("getTimezoneOffset"),
    js_str!("getUTCMilliseconds"),
    js_str!("setUTCMilliseconds"),
    js_str!("toLocaleDateString"),
    js_str!("toLocaleTimeString"),
    // JSON object
    js_str!("parse"),
    js_str!("stringify"),
    // Promise object
    js_str!("promise"),
    js_str!("resolve"),
    js_str!("reject"),
    js_str!("all"),
    js_str!("allSettled"),
    js_str!("any"),
    js_str!("race"),
    js_str!("then"),
    js_str!("catch"),
    js_str!("finally"),
    js_str!("withResolvers"),
    // Iterator object
    js_str!("Array Iterator"),
    js_str!("Set Iterator"),
    js_str!("String Iterator"),
    js_str!("Map Iterator"),
    js_str!("For In Iterator"),
    js_str!("RegExp String Iterator"),
    // Iterator result object
    js_str!("done"),
    // Math object
    js_str!("LN10"),
    js_str!("LN2"),
    js_str!("LOG10E"),
    js_str!("LOG2E"),
    js_str!("PI"),
    js_str!("SQRT1_2"),
    js_str!("SQRT2"),
    js_str!("abs"),
    js_str!("acos"),
    js_str!("acosh"),
    js_str!("asin"),
    js_str!("asinh"),
    js_str!("atan"),
    js_str!("atanh"),
    js_str!("atan2"),
    js_str!("cbrt"),
    js_str!("ceil"),
    js_str!("clz32"),
    js_str!("cos"),
    js_str!("cosh"),
    js_str!("exp"),
    js_str!("expm1"),
    js_str!("floor"),
    js_str!("fround"),
    js_str!("hypot"),
    js_str!("imul"),
    js_str!("log"),
    js_str!("log1p"),
    js_str!("log10"),
    js_str!("log2"),
    js_str!("max"),
    js_str!("min"),
    js_str!("pow"),
    js_str!("random"),
    js_str!("round"),
    js_str!("sign"),
    js_str!("sin"),
    js_str!("sinh"),
    js_str!("sqrt"),
    js_str!("tan"),
    js_str!("tanh"),
    js_str!("trunc"),
    // TypedArray object
    js_str!("BYTES_PER_ELEMENT"),
    js_str!("buffer"),
    js_str!("byteLength"),
    js_str!("byteOffset"),
    js_str!("isView"),
    js_str!("subarray"),
    js_str!("get byteLength"),
    js_str!("get buffer"),
    js_str!("get byteOffset"),
    js_str!("get size"),
    js_str!("get length"),
    // DataView object
    js_str!("getBigInt64"),
    js_str!("getBigUint64"),
    js_str!("getFloat32"),
    js_str!("getFloat64"),
    js_str!("getInt8"),
    js_str!("getInt16"),
    js_str!("getInt32"),
    js_str!("getUint8"),
    js_str!("getUint16"),
    js_str!("getUint32"),
    js_str!("setBigInt64"),
    js_str!("setBigUint64"),
    js_str!("setFloat32"),
    js_str!("setFloat64"),
    js_str!("setInt8"),
    js_str!("setInt16"),
    js_str!("setInt32"),
    js_str!("setUint8"),
    js_str!("setUint16"),
    js_str!("setUint32"),
    // WeakRef object
    js_str!("deref"),
    // Atomic object
    js_str!("and"),
    js_str!("compareExchange"),
    js_str!("exchange"),
    js_str!("isLockFree"),
    js_str!("load"),
    js_str!("or"),
    js_str!("store"),
    js_str!("wait"),
    js_str!("notify"),
    js_str!("xor"),
    // Intl object
    js_str!("getCanonicalLocales"),
    js_str!("get compare"),
    js_str!("supportedLocalesOf"),
    js_str!("Intl.Collator"),
    js_str!("compare"),
    js_str!("resolvedOptions"),
    js_str!("Intl.ListFormat"),
    js_str!("format"),
    js_str!("formatToParts"),
    js_str!("get baseName"),
    js_str!("get calendar"),
    js_str!("get caseFirst"),
    js_str!("get collation"),
    js_str!("get hourCycle"),
    js_str!("get numeric"),
    js_str!("get numberingSystem"),
    js_str!("get language"),
    js_str!("get script"),
    js_str!("get region"),
    js_str!("Intl.Locale"),
    js_str!("maximize"),
    js_str!("minimize"),
    js_str!("baseName"),
    js_str!("calendar"),
    js_str!("caseFirst"),
    js_str!("collation"),
    js_str!("hourCycle"),
    js_str!("numeric"),
    js_str!("numberingSystem"),
    js_str!("language"),
    js_str!("script"),
    js_str!("region"),
    js_str!("Intl.Segmenter"),
    js_str!("segment"),
    js_str!("containing"),
    js_str!("Segmenter String Iterator"),
    js_str!("Intl.PluralRules"),
    js_str!("select"),
    // Temporal object
    js_str!("get Id"),
    js_str!("getOffsetNanosecondsFor"),
    js_str!("getOffsetStringFor"),
    js_str!("getPlainDateTimeFor"),
    js_str!("getInstantFor"),
    js_str!("getPossibleInstantFor"),
    js_str!("getNextTransition"),
    js_str!("getPreviousTransition"),
    js_str!("id"),
    js_str!("Now"),
    js_str!("Calendar"),
    js_str!("Duration"),
    js_str!("Instant"),
    js_str!("PlainDate"),
    js_str!("PlainDateTime"),
    js_str!("PlainMonthDay"),
    js_str!("PlainTime"),
    js_str!("PlainYearMonth"),
    js_str!("TimeZone"),
    js_str!("ZonedDateTime"),
    js_str!("timeZoneId"),
    js_str!("instant"),
    js_str!("plainDateTime"),
    js_str!("plainDateTimeISO"),
    js_str!("zonedDateTime"),
    js_str!("zonedDateTimeISO"),
    js_str!("plainDate"),
    js_str!("plainDateISO"),
    js_str!("get epochSeconds"),
    js_str!("get epochMilliseconds"),
    js_str!("get epochMicroseconds"),
    js_str!("get epochNanoseconds"),
    js_str!("epochSeconds"),
    js_str!("epochMilliseconds"),
    js_str!("epochMicroseconds"),
    js_str!("epochNanoseconds"),
    js_str!("subtract"),
    js_str!("until"),
    js_str!("since"),
    js_str!("equals"),
    js_str!("toZonedDateTime"),
    js_str!("toZonedDateTimeISO"),
    js_str!("get Years"),
    js_str!("get Months"),
    js_str!("get Weeks"),
    js_str!("get Days"),
    js_str!("get Hours"),
    js_str!("get Minutes"),
    js_str!("get Seconds"),
    js_str!("get Milliseconds"),
    js_str!("get Microseconds"),
    js_str!("get Nanoseconds"),
    js_str!("get Sign"),
    js_str!("get blank"),
    js_str!("years"),
    js_str!("months"),
    js_str!("weeks"),
    js_str!("days"),
    js_str!("hours"),
    js_str!("minutes"),
    js_str!("seconds"),
    js_str!("milliseconds"),
    js_str!("microseconds"),
    js_str!("nanoseconds"),
    js_str!("blank"),
    js_str!("negated"),
    js_str!("total"),
    js_str!("get calendarId"),
    js_str!("get year"),
    js_str!("get month"),
    js_str!("get monthCode"),
    js_str!("get day"),
    js_str!("get dayOfWeek"),
    js_str!("get dayOfYear"),
    js_str!("get weekOfYear"),
    js_str!("get yearOfWeek"),
    js_str!("get daysInWeek"),
    js_str!("get daysInMonth"),
    js_str!("get daysInYear"),
    js_str!("get monthsInYear"),
    js_str!("get inLeapYear"),
    js_str!("calendarId"),
    js_str!("year"),
    js_str!("month"),
    js_str!("monthCode"),
    js_str!("day"),
    js_str!("dayOfWeek"),
    js_str!("dayOfYear"),
    js_str!("weekOfYear"),
    js_str!("yearOfWeek"),
    js_str!("daysInWeek"),
    js_str!("daysInMonth"),
    js_str!("daysInYear"),
    js_str!("monthsInYear"),
    js_str!("inLeapYear"),
    js_str!("toPlainYearMonth"),
    js_str!("toPlainMonthDay"),
    js_str!("getISOFields"),
    js_str!("getCalendar"),
    js_str!("withCalendar"),
    js_str!("dateFromFields"),
    js_str!("yearMonthFromFields"),
    js_str!("monthDayFromFields"),
    js_str!("dateAdd"),
    js_str!("dateUntil"),
    js_str!("era"),
    js_str!("eraYear"),
    js_str!("fields"),
    js_str!("mergeFields"),
    // Console object
    js_str!("console"),
    js_str!("assert"),
    js_str!("debug"),
    js_str!("error"),
    js_str!("info"),
    js_str!("trace"),
    js_str!("warn"),
    js_str!("exception"),
    js_str!("count"),
    js_str!("countReset"),
    js_str!("group"),
    js_str!("groupCollapsed"),
    js_str!("groupEnd"),
    js_str!("time"),
    js_str!("timeLog"),
    js_str!("timeEnd"),
    js_str!("dir"),
    js_str!("dirxml"),
    // Minified name
    js_str!("a"),
    js_str!("c"),
    js_str!("d"),
    js_str!("e"),
    js_str!("f"),
    js_str!("g"),
    js_str!("h"),
    js_str!("i"),
    js_str!("j"),
    js_str!("k"),
    js_str!("l"),
    js_str!("m"),
    js_str!("n"),
    js_str!("o"),
    js_str!("p"),
    js_str!("q"),
    js_str!("r"),
    js_str!("s"),
    js_str!("t"),
    js_str!("u"),
    js_str!("v"),
    js_str!("w"),
    js_str!("x"),
    js_str!("y"),
    js_str!("z"),
    js_str!("A"),
    js_str!("C"),
    js_str!("D"),
    js_str!("E"),
    js_str!("F"),
    js_str!("G"),
    js_str!("H"),
    js_str!("I"),
    js_str!("J"),
    js_str!("K"),
    js_str!("L"),
    js_str!("M"),
    js_str!("N"),
    js_str!("O"),
    js_str!("P"),
    js_str!("Q"),
    js_str!("R"),
    js_str!("S"),
    js_str!("T"),
    js_str!("U"),
    js_str!("V"),
    js_str!("W"),
    js_str!("X"),
    js_str!("Y"),
    js_str!("Z"),
    js_str!("_"),
    js_str!("$"),
];
