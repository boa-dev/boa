(function() {var type_impls = {
"boa_gc":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#88\">source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dangling\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.36.0\">1.25.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#112\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.dangling\" class=\"fn\">dangling</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> that is dangling, but well-aligned.</p>\n<p>This is useful for initializing types which lazily allocate, like\n<code>Vec::new</code> does.</p>\n<p>Note that the pointer value may potentially represent a valid pointer to\na <code>T</code>, which means this must not be used as a “not yet initialized”\nsentinel value. Types that lazily allocate must track initialization by\nsome other means.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::dangling();\n<span class=\"comment\">// Important: don't try to access the value of `ptr` without\n// initializing it first! The pointer is not null but isn't valid either!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#150\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; &amp;'a <a class=\"union\" href=\"https://doc.rust-lang.org/1.76.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared references to the value. In contrast to <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_ref\" title=\"method core::ptr::non_null::NonNull::as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_mut\" title=\"method core::ptr::non_null::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#184\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_uninit_mut\" class=\"fn\">as_uninit_mut</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"union\" href=\"https://doc.rust-lang.org/1.76.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a unique references to the value. In contrast to <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_mut\" title=\"method core::ptr::non_null::NonNull::as_mut\"><code>as_mut</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_ref\" title=\"method core::ptr::non_null::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details></div></details>",0,"boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#191\">source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.25.0\">1.25.0 (const: 1.25.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#218\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p><code>ptr</code> must be non-null.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>) };</code></pre></div>\n<p><em>Incorrect</em> usage of this function:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// NEVER DO THAT!!! This is undefined behavior. ⚠️\n</span><span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::&lt;u32&gt;::new_unchecked(std::ptr::null_mut()) };</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const unstable\">1.25.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/93235\" title=\"Tracking issue for const_nonnull_new\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#243\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.new\" class=\"fn\">new</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(ptr) = NonNull::&lt;u32&gt;::new(std::ptr::null_mut()) {\n    <span class=\"macro\">unreachable!</span>();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/81513\" title=\"Tracking issue for ptr_metadata\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#261-264\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    data_address: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;,\n    metadata: &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs the same functionality as <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a>, except that a\n<code>NonNull</code> pointer is returned, as opposed to a raw <code>*const</code> pointer.</p>\n<p>See the documentation of <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a> for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/81513\" title=\"Tracking issue for ptr_metadata\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#279\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>&gt;, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its address and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::from_raw_parts\"><code>NonNull::from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#292\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>)</span></div></span></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>pointer::addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html\" title=\"mod core::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#307\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer with the given address.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>pointer::with_addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html\" title=\"mod core::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#321\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.map_addr\" class=\"fn\">map_addr</a>(\n    self,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a>\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>pointer::map_addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html\" title=\"mod core::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.32.0\">1.25.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#347\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Acquires the underlying <code>*mut</code> pointer.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">0</span>);\n\n<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() += <span class=\"number\">2</span>; }\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.73.0\">1.25.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#395\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the value. If the value may be uninitialized, <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_ref\" title=\"method core::ptr::non_null::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<p>For the mutable counterpart see <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_mut\" title=\"method core::ptr::non_null::NonNull::as_mut\"><code>as_mut</code></a>.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"ptr is null!\"</span>);\n\n<span class=\"kw\">let </span>ref_x = <span class=\"kw\">unsafe </span>{ ptr.as_ref() };\n<span class=\"macro\">println!</span>(<span class=\"string\">\"{ref_x}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const unstable\">1.25.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#447\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a unique reference to the value. If the value may be uninitialized, <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_mut\" title=\"method core::ptr::non_null::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>\nmust be used instead.</p>\n<p>For the shared counterpart see <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.as_ref\" title=\"method core::ptr::non_null::NonNull::as_ref\"><code>as_ref</code></a>.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">\"null pointer\"</span>);\n\n<span class=\"kw\">let </span>x_ref = <span class=\"kw\">unsafe </span>{ ptr.as_mut() };\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>x_ref += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.36.0\">1.27.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#471\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">\"null pointer\"</span>);\n\n<span class=\"kw\">let </span>casted_ptr = ptr.cast::&lt;i8&gt;();\n<span class=\"kw\">let </span>raw_ptr: <span class=\"kw-2\">*mut </span>i8 = casted_ptr.as_ptr();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#528-530\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.offset\" class=\"fn\">offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer.</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-3\"><a href=\"#safety-3\">Safety</a></h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both the starting and resulting pointer must be either in bounds or one\nbyte past the end of the same <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum, <strong>in bytes</strong> must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>s = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];\n<span class=\"kw\">let </span>ptr: NonNull&lt;u32&gt; = NonNull::new(s.as_mut_ptr()).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.offset(<span class=\"number\">1</span>).read());\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.offset(<span class=\"number\">2</span>).read());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#554\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.byte_offset\" class=\"fn\">byte_offset</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.isize.html\">isize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes.</p>\n<p><code>count</code> is in units of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.76.0/std/primitive.pointer.html#method.offset\" title=\"method pointer::offset\">offset</a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#615-617\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.add\" class=\"fn\">add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for <code>.offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-4\"><a href=\"#safety-4\">Safety</a></h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both the starting and resulting pointer must be either in bounds or one\nbyte past the end of the same <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>The computed offset, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum must fit in a <code>usize</code>.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n<span class=\"kw\">let </span>ptr: NonNull&lt;u8&gt; = NonNull::new(s.as_ptr().cast_mut()).unwrap();\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.add(<span class=\"number\">1</span>).read() <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, ptr.add(<span class=\"number\">2</span>).read() <span class=\"kw\">as </span>char);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#642\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.byte_add\" class=\"fn\">byte_add</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for <code>.byte_offset(count as isize)</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.add\" title=\"method core::ptr::non_null::NonNull::add\"><code>add</code></a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#706-708\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.sub\" class=\"fn\">sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer (convenience for\n<code>.offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of T; e.g., a <code>count</code> of 3 represents a pointer\noffset of <code>3 * size_of::&lt;T&gt;()</code> bytes.</p>\n<h5 id=\"safety-5\"><a href=\"#safety-5\">Safety</a></h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both the starting and resulting pointer must be either in bounds or one\nbyte past the end of the same <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>The computed offset cannot exceed <code>isize::MAX</code> <strong>bytes</strong>.</p>\n</li>\n<li>\n<p>The offset being in bounds cannot rely on “wrapping around” the address\nspace. That is, the infinite-precision sum must fit in a usize.</p>\n</li>\n</ul>\n<p>The compiler and standard library generally tries to ensure allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code>\nand <code>Box</code> ensure they never allocate more than <code>isize::MAX</code> bytes, so\n<code>vec.as_ptr().add(vec.len()).sub(vec.len())</code> is always safe.</p>\n<p>Most platforms fundamentally can’t even construct such an allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>s: <span class=\"kw-2\">&amp;</span>str = <span class=\"string\">\"123\"</span>;\n\n<span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>end: NonNull&lt;u8&gt; = NonNull::new(s.as_ptr().cast_mut()).unwrap().add(<span class=\"number\">3</span>);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, end.sub(<span class=\"number\">1</span>).read() <span class=\"kw\">as </span>char);\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{}\"</span>, end.sub(<span class=\"number\">2</span>).read() <span class=\"kw\">as </span>char);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#738\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.byte_sub\" class=\"fn\">byte_sub</a>(self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the offset from a pointer in bytes (convenience for\n<code>.byte_offset((count as isize).wrapping_neg())</code>).</p>\n<p><code>count</code> is in units of bytes.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.sub\" title=\"method core::ptr::non_null::NonNull::sub\"><code>sub</code></a> on it. See that method for documentation\nand safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation changes only the data pointer,\nleaving the metadata untouched.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#855-857\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.offset_from\" class=\"fn\">offset_from</a>(self, origin: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.isize.html\">isize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of T: the distance in bytes divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This is equivalent to <code>(self as isize - origin as isize) / (mem::size_of::&lt;T&gt;() as isize)</code>,\nexcept that it has a lot more opportunities for UB, in exchange for the compiler\nbetter understanding what you are doing.</p>\n<p>The primary motivation of this method is for computing the <code>len</code> of an array/slice\nof <code>T</code> that you are currently representing as a “start” and “end” pointer\n(and “end” is “one past the end” of the array).\nIn that case, <code>end.offset_from(start)</code> gets you the length of the array.</p>\n<p>All of the following safety requirements are trivially satisfied for this usecase.</p>\n<h5 id=\"safety-6\"><a href=\"#safety-6\">Safety</a></h5>\n<p>If any of the following conditions are violated, the result is Undefined\nBehavior:</p>\n<ul>\n<li>\n<p>Both <code>self</code> and <code>origin</code> must be either in bounds or one\nbyte past the end of the same <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/index.html#allocated-object\" title=\"mod core::ptr\">allocated object</a>.</p>\n</li>\n<li>\n<p>Both pointers must be <em>derived from</em> a pointer to the same object.\n(See below for an example.)</p>\n</li>\n<li>\n<p>The distance between the pointers, in bytes, must be an exact multiple\nof the size of <code>T</code>.</p>\n</li>\n<li>\n<p>The distance between the pointers, <strong>in bytes</strong>, cannot overflow an <code>isize</code>.</p>\n</li>\n<li>\n<p>The distance being in bounds cannot rely on “wrapping around” the address space.</p>\n</li>\n</ul>\n<p>Rust types are never larger than <code>isize::MAX</code> and Rust allocations never wrap around the\naddress space, so two pointers within some value of any Rust type <code>T</code> will always satisfy\nthe last two conditions. The standard library also generally ensures that allocations\nnever reach a size where an offset is a concern. For instance, <code>Vec</code> and <code>Box</code> ensure they\nnever allocate more than <code>isize::MAX</code> bytes, so <code>ptr_into_vec.offset_from(vec.as_ptr())</code>\nalways satisfies the last two conditions.</p>\n<p>Most platforms fundamentally can’t even construct such a large allocation.\nFor instance, no known 64-bit platform can ever serve a request\nfor 2<sup>63</sup> bytes due to page-table limitations or splitting the address space.\nHowever, some 32-bit and 16-bit platforms may successfully serve a request for\nmore than <code>isize::MAX</code> bytes with things like Physical Address\nExtension. As such, memory acquired directly from allocators or memory\nmapped files <em>may</em> be too large to handle with this function.\n(Note that <a href=\"#method.offset\"><code>offset</code></a> and <a href=\"#method.add\"><code>add</code></a> also have a similar limitation and hence cannot be used on\nsuch large allocations either.)</p>\n<p>The requirement for pointers to be derived from the same allocated object is primarily\nneeded for <code>const</code>-compatibility: the distance between pointers into <em>different</em> allocated\nobjects is not known at compile-time. However, the requirement also exists at\nruntime and may be exploited by optimizations. If you wish to compute the difference between\npointers that are not guaranteed to be from the same allocation, use <code>(self as isize - origin as isize) / mem::size_of::&lt;T&gt;()</code>.</p>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>]);\n<span class=\"kw\">let </span>ptr2: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>]);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset_from(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset_from(ptr2), -<span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.offset(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.offset(-<span class=\"number\">2</span>), ptr1);\n}</code></pre></div>\n<p><em>Incorrect</em> usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience, strict_provenance)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr1 = NonNull::new(Box::into_raw(Box::new(<span class=\"number\">0u8</span>))).unwrap();\n<span class=\"kw\">let </span>ptr2 = NonNull::new(Box::into_raw(Box::new(<span class=\"number\">1u8</span>))).unwrap();\n<span class=\"kw\">let </span>diff = (ptr2.addr().get() <span class=\"kw\">as </span>isize).wrapping_sub(ptr1.addr().get() <span class=\"kw\">as </span>isize);\n<span class=\"comment\">// Make ptr2_other an \"alias\" of ptr2, but derived from ptr1.\n</span><span class=\"kw\">let </span>ptr2_other = NonNull::new(ptr1.as_ptr().wrapping_byte_offset(diff)).unwrap();\n<span class=\"macro\">assert_eq!</span>(ptr2.addr(), ptr2_other.addr());\n<span class=\"comment\">// Since ptr2_other and ptr2 are derived from pointers to different objects,\n// computing their offset is undefined behavior, even though\n// they point to the same address!\n</span><span class=\"kw\">unsafe </span>{\n    <span class=\"kw\">let </span>zero = ptr2_other.offset_from(ptr2); <span class=\"comment\">// Undefined Behavior\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.byte_offset_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#876\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.byte_offset_from\" class=\"fn\">byte_offset_from</a>&lt;U&gt;(self, origin: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.isize.html\">isize</a><div class=\"where\">where\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers. The returned value is in\nunits of <strong>bytes</strong>.</p>\n<p>This is purely a convenience for casting to a <code>u8</code> pointer and\nusing <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#method.offset_from\" title=\"method core::ptr::non_null::NonNull::offset_from\"><code>offset_from</code></a> on it. See that method for\ndocumentation and safety requirements.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointers,\nignoring the metadata.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#950-952\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.sub_ptr\" class=\"fn\">sub_ptr</a>(self, subtracted: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the distance between two pointers, <em>where it’s known that\n<code>self</code> is equal to or greater than <code>origin</code></em>. The returned value is in\nunits of T: the distance in bytes is divided by <code>mem::size_of::&lt;T&gt;()</code>.</p>\n<p>This computes the same value that <a href=\"#method.offset_from\"><code>offset_from</code></a>\nwould compute, but with the added precondition that the offset is\nguaranteed to be non-negative.  This method is equivalent to\n<code>usize::try_from(self.offset_from(origin)).unwrap_unchecked()</code>,\nbut it provides slightly more information to the optimizer, which can\nsometimes allow it to optimize slightly better with some backends.</p>\n<p>This method can be though of as recovering the <code>count</code> that was passed\nto <a href=\"#method.add\"><code>add</code></a> (or, with the parameters in the other order,\nto <a href=\"#method.sub\"><code>sub</code></a>).  The following are all equivalent, assuming\nthat their safety preconditions are met:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>ptr.sub_ptr(origin) == count\norigin.add(count) == ptr\nptr.sub(count) == origin</code></pre></div>\n<h5 id=\"safety-7\"><a href=\"#safety-7\">Safety</a></h5>\n<ul>\n<li>\n<p>The distance between the pointers must be non-negative (<code>self &gt;= origin</code>)</p>\n</li>\n<li>\n<p><em>All</em> the safety conditions of <a href=\"#method.offset_from\"><code>offset_from</code></a>\napply to this method as well; see it for the full details.</p>\n</li>\n</ul>\n<p>Importantly, despite the return type of this method being able to represent\na larger offset, it’s still <em>not permitted</em> to pass pointers which differ\nby more than <code>isize::MAX</code> <em>bytes</em>.  As such, the result of this method will\nalways be less than or equal to <code>isize::MAX as usize</code>.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>This function panics if <code>T</code> is a Zero-Sized Type (“ZST”).</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>a = [<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>ptr1: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">1</span>]);\n<span class=\"kw\">let </span>ptr2: NonNull&lt;u32&gt; = NonNull::from(<span class=\"kw-2\">&amp;</span>a[<span class=\"number\">3</span>]);\n<span class=\"kw\">unsafe </span>{\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr1), <span class=\"number\">2</span>);\n    <span class=\"macro\">assert_eq!</span>(ptr1.add(<span class=\"number\">2</span>), ptr2);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub(<span class=\"number\">2</span>), ptr1);\n    <span class=\"macro\">assert_eq!</span>(ptr2.sub_ptr(ptr2), <span class=\"number\">0</span>);\n}\n\n<span class=\"comment\">// This would be incorrect, as the pointers are not correctly ordered:\n// ptr1.sub_ptr(ptr2)</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#968-970\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.read\" class=\"fn\">read</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.read.html\" title=\"fn core::ptr::read\"><code>ptr::read</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_volatile\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#989-991\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.read_volatile\" class=\"fn\">read_volatile</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs a volatile read of the value from <code>self</code> without moving it. This\nleaves the memory in <code>self</code> unchanged.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.read_volatile.html\" title=\"fn core::ptr::read_volatile\"><code>ptr::read_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1009-1011\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.read_unaligned\" class=\"fn\">read_unaligned</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Reads the value from <code>self</code> without moving it. This leaves the\nmemory in <code>self</code> unchanged.</p>\n<p>Unlike <code>read</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.read_unaligned.html\" title=\"fn core::ptr::read_unaligned\"><code>ptr::read_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1029-1031\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.copy_to\" class=\"fn\">copy_to</a>(self, dest: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_to_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1049-1051\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.copy_to_nonoverlapping\" class=\"fn\">copy_to_nonoverlapping</a>(self, dest: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>self</code> to <code>dest</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>same</em> argument order as <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1069-1071\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.copy_from\" class=\"fn\">copy_from</a>(self, src: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy.html\" title=\"fn core::intrinsics::copy\"><code>ptr::copy</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.copy_from_nonoverlapping\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1089-1091\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.copy_from_nonoverlapping\" class=\"fn\">copy_from_nonoverlapping</a>(self, src: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Copies <code>count * size_of&lt;T&gt;</code> bytes from <code>src</code> to <code>self</code>. The source\nand destination may <em>not</em> overlap.</p>\n<p>NOTE: this has the <em>opposite</em> argument order of <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.copy_nonoverlapping.html\" title=\"fn core::intrinsics::copy_nonoverlapping\"><code>ptr::copy_nonoverlapping</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop_in_place\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1104\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.drop_in_place\" class=\"fn\">drop_in_place</a>(self)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Executes the destructor (if any) of the pointed-to value.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.drop_in_place.html\" title=\"fn core::ptr::drop_in_place\"><code>ptr::drop_in_place</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1120-1122\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.write\" class=\"fn\">write</a>(self, val: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.write.html\" title=\"fn core::ptr::write\"><code>ptr::write</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1140-1142\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.write_bytes\" class=\"fn\">write_bytes</a>(self, val: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.u8.html\">u8</a>, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Invokes memset on the specified pointer, setting <code>count * size_of::&lt;T&gt;()</code>\nbytes of memory starting at <code>self</code> to <code>val</code>.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/intrinsics/fn.write_bytes.html\" title=\"fn core::intrinsics::write_bytes\"><code>ptr::write_bytes</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_volatile\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1161-1163\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.write_volatile\" class=\"fn\">write_volatile</a>(self, val: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.</p>\n<p>Volatile operations are intended to act on I/O memory, and are guaranteed\nto not be elided or reordered by the compiler across other volatile\noperations.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.write_volatile.html\" title=\"fn core::ptr::write_volatile\"><code>ptr::write_volatile</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_unaligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1182-1184\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.write_unaligned\" class=\"fn\">write_unaligned</a>(self, val: T)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Overwrites a memory location with the given value without reading or\ndropping the old value.</p>\n<p>Unlike <code>write</code>, the pointer may be unaligned.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.write_unaligned.html\" title=\"fn core::ptr::write_unaligned\"><code>ptr::write_unaligned</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1198-1200\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.replace\" class=\"fn\">replace</a>(self, src: T) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Replaces the value at <code>self</code> with <code>src</code>, returning the old\nvalue, without dropping either.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.replace.html\" title=\"fn core::ptr::replace\"><code>ptr::replace</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1217-1219\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.swap\" class=\"fn\">swap</a>(self, with: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike <code>mem::swap</code> which is\notherwise equivalent.</p>\n<p>See <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/fn.swap.html\" title=\"fn core::ptr::swap\"><code>ptr::swap</code></a> for safety concerns and examples.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.align_offset\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/117691\" title=\"Tracking issue for non_null_convenience\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1271-1273\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.align_offset\" class=\"fn\">align_offset</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>non_null_convenience</code>)</span></div></span></summary><div class=\"docblock\"><p>Computes the offset that needs to be applied to the pointer in order to make it aligned to\n<code>align</code>.</p>\n<p>If it is not possible to align the pointer, the implementation returns\n<code>usize::MAX</code>. It is permissible for the implementation to <em>always</em>\nreturn <code>usize::MAX</code>. Only your algorithm’s performance can depend\non getting a usable offset here, not its correctness.</p>\n<p>The offset is expressed in number of <code>T</code> elements, and not bytes.</p>\n<p>There are no guarantees whatsoever that offsetting the pointer will not overflow or go\nbeyond the allocation that the pointer points into. It is up to the caller to ensure that\nthe returned offset is correct in all terms other than alignment.</p>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>The function panics if <code>align</code> is not a power-of-two.</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<p>Accessing adjacent <code>u8</code> as <code>u16</code></p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(non_null_convenience)]\n</span><span class=\"kw\">use </span>std::mem::align_of;\n<span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>x = [<span class=\"number\">5_u8</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];\n<span class=\"kw\">let </span>ptr = NonNull::new(x.as_ptr() <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>u8).unwrap();\n<span class=\"kw\">let </span>offset = ptr.align_offset(align_of::&lt;u16&gt;());\n\n<span class=\"kw\">if </span>offset &lt; x.len() - <span class=\"number\">1 </span>{\n    <span class=\"kw\">let </span>u16_ptr = ptr.add(offset).cast::&lt;u16&gt;();\n    <span class=\"macro\">assert!</span>(u16_ptr.read() == u16::from_ne_bytes([<span class=\"number\">5</span>, <span class=\"number\">6</span>]) || u16_ptr.read() == u16::from_ne_bytes([<span class=\"number\">6</span>, <span class=\"number\">7</span>]));\n} <span class=\"kw\">else </span>{\n    <span class=\"comment\">// while the pointer can be aligned via `offset`, it would point\n    // outside the allocation\n</span>}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/104203\" title=\"Tracking issue for const_pointer_is_aligned\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1400-1402\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.is_aligned\" class=\"fn\">is_aligned</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is properly aligned for <code>T</code>.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = NonNull::&lt;AlignedI32&gt;::from(<span class=\"kw-2\">&amp;</span>data);\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned());\n<span class=\"macro\">assert!</span>(!NonNull::new(ptr.as_ptr().wrapping_byte_add(<span class=\"number\">1</span>)).unwrap().is_aligned());</code></pre></div>\n<h5 id=\"at-compiletime\"><a href=\"#at-compiletime\">At compiletime</a></h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\nis never aligned if cast to a type with a stricter alignment than the reference’s\nunderlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n#![feature(const_pointer_is_aligned)]\n#![feature(non_null_convenience)]\n#![feature(const_option)]\n#![feature(const_nonnull_new)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>data = [AlignedI32(<span class=\"number\">42</span>), AlignedI32(<span class=\"number\">42</span>)];\n    <span class=\"kw\">let </span>ptr = NonNull::&lt;AlignedI32&gt;::new(<span class=\"kw-2\">&amp;</span>data[<span class=\"number\">0</span>] <span class=\"kw\">as </span><span class=\"kw-2\">*const </span><span class=\"kw\">_ as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).unwrap();\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// At runtime either `ptr1` or `ptr2` would be aligned, but at compiletime neither is aligned.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = <span class=\"kw\">unsafe </span>{ ptr.add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;() };\n    <span class=\"macro\">assert!</span>(!ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn’t aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*const </span>AlignedI32 = <span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.cast::&lt;AlignedI64&gt;().is_aligned());\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned());\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.cast::&lt;AlignedI64&gt;().is_aligned(),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).cast::&lt;AlignedI64&gt;().is_aligned(),\n);</code></pre></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n#![feature(const_pointer_is_aligned)]\n#![feature(const_option)]\n#![feature(const_nonnull_new)]\n</span><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// On some platforms, the alignment of primitives is less than their size.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n<span class=\"attr\">#[repr(align(<span class=\"number\">8</span>))]\n</span><span class=\"kw\">struct </span>AlignedI64(i64);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*mut </span>AlignedI32).unwrap();\n    <span class=\"macro\">assert!</span>(ptr.is_aligned());\n\n    <span class=\"comment\">// For pointers with a known address, runtime and compiletime behavior are identical.\n    </span><span class=\"kw\">let </span>ptr1 = ptr.cast::&lt;AlignedI64&gt;();\n    <span class=\"kw\">let </span>ptr2 = NonNull::new(ptr.as_ptr().wrapping_add(<span class=\"number\">1</span>)).unwrap().cast::&lt;AlignedI64&gt;();\n    <span class=\"macro\">assert!</span>(ptr1.is_aligned());\n    <span class=\"macro\">assert!</span>(!ptr2.is_aligned());\n};</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_aligned_to\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/104203\" title=\"Tracking issue for const_pointer_is_aligned\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1515\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html#tymethod.is_aligned_to\" class=\"fn\">is_aligned_to</a>(self, align: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>pointer_is_aligned</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns whether the pointer is aligned to <code>align</code>.</p>\n<p>For non-<code>Sized</code> pointees this operation considers only the data pointer,\nignoring the metadata.</p>\n<h5 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h5>\n<p>The function panics if <code>align</code> is not a power-of-two (this includes 0).</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert!</span>(ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">2</span>));\n<span class=\"macro\">assert!</span>(!ptr.wrapping_byte_add(<span class=\"number\">2</span>).is_aligned_to(<span class=\"number\">4</span>));\n\n<span class=\"macro\">assert_ne!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>), ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));</code></pre></div>\n<h5 id=\"at-compiletime-1\"><a href=\"#at-compiletime-1\">At compiletime</a></h5>\n<p><strong>Note: Alignment at compiletime is experimental and subject to change. See the\n<a href=\"https://github.com/rust-lang/rust/issues/104203\">tracking issue</a> for details.</strong></p>\n<p>At compiletime, the compiler may not know where a value will end up in memory.\nCalling this function on a pointer created from a reference at compiletime will only\nreturn <code>true</code> if the pointer is guaranteed to be aligned. This means that the pointer\ncannot be stricter aligned than the reference’s underlying allocation.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>data = AlignedI32(<span class=\"number\">42</span>);\n    <span class=\"kw\">let </span>ptr = <span class=\"kw-2\">&amp;</span>data <span class=\"kw\">as </span><span class=\"kw-2\">*const </span>AlignedI32;\n\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n\n    <span class=\"comment\">// At compiletime, we know for sure that the pointer isn't aligned to 8.\n    </span><span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n};</code></pre></div>\n<p>Due to this behavior, it is possible that a runtime pointer derived from a compiletime\npointer is aligned, even if the compiletime pointer wasn’t aligned.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"comment\">// On some platforms, the alignment of i32 is less than 4.\n</span><span class=\"attr\">#[repr(align(<span class=\"number\">4</span>))]\n</span><span class=\"kw\">struct </span>AlignedI32(i32);\n\n<span class=\"comment\">// At compiletime, neither `COMPTIME_PTR` nor `COMPTIME_PTR + 1` is aligned.\n</span><span class=\"kw\">const </span>COMPTIME_PTR: <span class=\"kw-2\">*const </span>AlignedI32 = <span class=\"kw-2\">&amp;</span>AlignedI32(<span class=\"number\">42</span>);\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.is_aligned_to(<span class=\"number\">8</span>));\n<span class=\"kw\">const _</span>: () = <span class=\"macro\">assert!</span>(!COMPTIME_PTR.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>));\n\n<span class=\"comment\">// At runtime, either `runtime_ptr` or `runtime_ptr + 1` is aligned.\n</span><span class=\"kw\">let </span>runtime_ptr = COMPTIME_PTR;\n<span class=\"macro\">assert_ne!</span>(\n    runtime_ptr.is_aligned_to(<span class=\"number\">8</span>),\n    runtime_ptr.wrapping_add(<span class=\"number\">1</span>).is_aligned_to(<span class=\"number\">8</span>),\n);</code></pre></div>\n<p>If a pointer is created from a fixed address, this function behaves the same during\nruntime and compiletime.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(pointer_is_aligned)]\n#![feature(const_pointer_is_aligned)]\n\n</span><span class=\"kw\">const _</span>: () = {\n    <span class=\"kw\">let </span>ptr = <span class=\"number\">40 </span><span class=\"kw\">as </span><span class=\"kw-2\">*const </span>u8;\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">1</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">2</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">4</span>));\n    <span class=\"macro\">assert!</span>(ptr.is_aligned_to(<span class=\"number\">8</span>));\n    <span class=\"macro\">assert!</span>(!ptr.is_aligned_to(<span class=\"number\">16</span>));\n};</code></pre></div>\n</div></details></div></details>",0,"boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1809\">source</a></span><a href=\"#impl-PartialOrd-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1811\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1758\">source</a></span><a href=\"#impl-Clone-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1760\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1769\">source</a><a href=\"#impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","CoerceUnsized<NonNull<U>>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Eq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1789\">source</a></span><a href=\"#impl-Eq-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Eq","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1817\">source</a></span><a href=\"#impl-Hash-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1819\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.76.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1782\">source</a></span><a href=\"#impl-Pointer-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1783\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1801\">source</a></span><a href=\"#impl-Ord-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1803\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1792\">source</a></span><a href=\"#impl-PartialEq-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1795\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Sync-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#86\">source</a></span><a href=\"#impl-Sync-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Sync</code> because the data they reference may be aliased.</p>\n</div>","Sync","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1775\">source</a></span><a href=\"#impl-Debug-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1776\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/panic/unwind_safe.rs.html#191\">source</a></span><a href=\"#impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","UnwindSafe","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1835\">source</a></span><a href=\"#impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1840\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(reference: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details>","From<&mut T>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1847\">source</a></span><a href=\"#impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1852\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(reference: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details>","From<&T>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1772\">source</a><a href=\"#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","DispatchFromDyn<NonNull<U>>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Copy-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#1766\">source</a></span><a href=\"#impl-Copy-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Copy","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Send-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/ptr/non_null.rs.html#81\">source</a></span><a href=\"#impl-Send-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Send</code> because the data they reference may be aliased.</p>\n</div>","Send","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()