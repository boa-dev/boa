(function() {var type_impls = {
"boa_gc":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#86\">source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.dangling\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.36.0\">1.25.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#110\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.dangling\" class=\"fn\">dangling</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> that is dangling, but well-aligned.</p>\n<p>This is useful for initializing types which lazily allocate, like\n<code>Vec::new</code> does.</p>\n<p>Note that the pointer value may potentially represent a valid pointer to\na <code>T</code>, which means this must not be used as a “not yet initialized”\nsentinel value. Types that lazily allocate must track initialization by\nsome other means.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::dangling();\n<span class=\"comment\">// Important: don&#39;t try to access the value of `ptr` without\n// initializing it first! The pointer is not null but isn&#39;t valid either!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#148\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_uninit_ref\" class=\"fn\">as_uninit_ref</a>&lt;'a&gt;(self) -&gt; &amp;'a <a class=\"union\" href=\"https://doc.rust-lang.org/1.75.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a shared references to the value. In contrast to <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_ref\" title=\"method core::ptr::non_null::NonNull::as_ref\"><code>as_ref</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the mutable counterpart see <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_mut\" title=\"method core::ptr::non_null::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_uninit_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#182\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_uninit_mut\" class=\"fn\">as_uninit_mut</a>&lt;'a&gt;(self) -&gt; &amp;'a mut <a class=\"union\" href=\"https://doc.rust-lang.org/1.75.0/core/mem/maybe_uninit/union.MaybeUninit.html\" title=\"union core::mem::maybe_uninit::MaybeUninit\">MaybeUninit</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_as_uninit</code>)</span></div></span></summary><div class=\"docblock\"><p>Returns a unique references to the value. In contrast to <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_mut\" title=\"method core::ptr::non_null::NonNull::as_mut\"><code>as_mut</code></a>, this does not require\nthat the value has to be initialized.</p>\n<p>For the shared counterpart see <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_ref\" title=\"method core::ptr::non_null::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!</p>\n</div></details></div></details>",0,"boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#189\">source</a><a href=\"#impl-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_unchecked\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.25.0\">1.25.0 (const: 1.25.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#216\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.new_unchecked\" class=\"fn\">new_unchecked</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code>.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p><code>ptr</code> must be non-null.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::new_unchecked(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>) };</code></pre></div>\n<p><em>Incorrect</em> usage of this function:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"comment\">// NEVER DO THAT!!! This is undefined behavior. ⚠️\n</span><span class=\"kw\">let </span>ptr = <span class=\"kw\">unsafe </span>{ NonNull::&lt;u32&gt;::new_unchecked(std::ptr::null_mut()) };</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const unstable\">1.25.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/93235\" title=\"Tracking issue for const_nonnull_new\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#241\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.new\" class=\"fn\">new</a>(ptr: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut T</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>NonNull</code> if <code>ptr</code> is non-null.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::&lt;u32&gt;::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">&quot;ptr is null!&quot;</span>);\n\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(ptr) = NonNull::&lt;u32&gt;::new(std::ptr::null_mut()) {\n    <span class=\"macro\">unreachable!</span>();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/81513\" title=\"Tracking issue for ptr_metadata\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#259-262\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.from_raw_parts\" class=\"fn\">from_raw_parts</a>(\n    data_address: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;,\n    metadata: &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Performs the same functionality as <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a>, except that a\n<code>NonNull</code> pointer is returned, as opposed to a raw <code>*const</code> pointer.</p>\n<p>See the documentation of <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/metadata/fn.from_raw_parts.html\" title=\"fn core::ptr::metadata::from_raw_parts\"><code>std::ptr::from_raw_parts</code></a> for more details.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_raw_parts\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/81513\" title=\"Tracking issue for ptr_metadata\">unstable</a></span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#277\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.to_raw_parts\" class=\"fn\">to_raw_parts</a>(self) -&gt; (<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>&gt;, &lt;T as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/metadata/trait.Pointee.html\" title=\"trait core::ptr::metadata::Pointee\">Pointee</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/metadata/trait.Pointee.html#associatedtype.Metadata\" title=\"type core::ptr::metadata::Pointee::Metadata\">Metadata</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>ptr_metadata</code>)</span></div></span></summary><div class=\"docblock\"><p>Decompose a (possibly wide) pointer into its address and metadata components.</p>\n<p>The pointer can be later reconstructed with <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.from_raw_parts\" title=\"associated function core::ptr::non_null::NonNull::from_raw_parts\"><code>NonNull::from_raw_parts</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#290\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.addr\" class=\"fn\">addr</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>)</span></div></span></summary><div class=\"docblock\"><p>Gets the “address” portion of the pointer.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html#method.addr\" title=\"method pointer::addr\"><code>pointer::addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html\" title=\"mod core::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#305\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.with_addr\" class=\"fn\">with_addr</a>(self, addr: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer with the given address.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html#method.with_addr\" title=\"method pointer::with_addr\"><code>pointer::with_addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html\" title=\"mod core::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_addr\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#319\">source</a><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.map_addr\" class=\"fn\">map_addr</a>(\n    self,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/num/nonzero/struct.NonZeroUsize.html\" title=\"struct core::num::nonzero::NonZeroUsize\">NonZeroUsize</a>\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>strict_provenance</code>)</span></div></span></summary><div class=\"docblock\"><p>Creates a new pointer by mapping <code>self</code>’s address to a new one.</p>\n<p>For more details see the equivalent method on a raw pointer, <a href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html#method.map_addr\" title=\"method pointer::map_addr\"><code>pointer::map_addr</code></a>.</p>\n<p>This API and its claimed semantics are part of the Strict Provenance experiment,\nsee the <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html\" title=\"mod core::ptr\"><code>ptr</code> module documentation</a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.32.0\">1.25.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#345\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Acquires the underlying <code>*mut</code> pointer.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">&quot;ptr is null!&quot;</span>);\n\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">0</span>);\n\n<span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() += <span class=\"number\">2</span>; }\n<span class=\"kw\">let </span>x_value = <span class=\"kw\">unsafe </span>{ <span class=\"kw-2\">*</span>ptr.as_ptr() };\n<span class=\"macro\">assert_eq!</span>(x_value, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const since 1.73.0\">1.25.0 (const: 1.73.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#393\">source</a></span><h4 class=\"code-header\">pub const unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_ref\" class=\"fn\">as_ref</a>&lt;'a&gt;(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a T</a></h4></section></summary><div class=\"docblock\"><p>Returns a shared reference to the value. If the value may be uninitialized, <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_ref\" title=\"method core::ptr::non_null::NonNull::as_uninit_ref\"><code>as_uninit_ref</code></a>\nmust be used instead.</p>\n<p>For the mutable counterpart see <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_mut\" title=\"method core::ptr::non_null::NonNull::as_mut\"><code>as_mut</code></a>.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get mutated (except inside <code>UnsafeCell</code>).</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">&quot;ptr is null!&quot;</span>);\n\n<span class=\"kw\">let </span>ref_x = <span class=\"kw\">unsafe </span>{ ptr.as_ref() };\n<span class=\"macro\">println!</span>(<span class=\"string\">&quot;{ref_x}&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0, const unstable\">1.25.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/91822\" title=\"Tracking issue for const_ptr_as_ref\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#445\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.as_mut\" class=\"fn\">as_mut</a>&lt;'a&gt;(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;'a mut T</a></h4></section></summary><div class=\"docblock\"><p>Returns a unique reference to the value. If the value may be uninitialized, <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_uninit_mut\" title=\"method core::ptr::non_null::NonNull::as_uninit_mut\"><code>as_uninit_mut</code></a>\nmust be used instead.</p>\n<p>For the shared counterpart see <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#method.as_ref\" title=\"method core::ptr::non_null::NonNull::as_ref\"><code>as_ref</code></a>.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>When calling this method, you have to ensure that all of the following is true:</p>\n<ul>\n<li>\n<p>The pointer must be properly aligned.</p>\n</li>\n<li>\n<p>It must be “dereferenceable” in the sense defined in <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/index.html#safety\" title=\"mod core::ptr\">the module documentation</a>.</p>\n</li>\n<li>\n<p>The pointer must point to an initialized instance of <code>T</code>.</p>\n</li>\n<li>\n<p>You must enforce Rust’s aliasing rules, since the returned lifetime <code>'a</code> is\narbitrarily chosen and does not necessarily reflect the actual lifetime of the data.\nIn particular, while this reference exists, the memory the pointer points to must\nnot get accessed (read or written) through any other pointer.</p>\n</li>\n</ul>\n<p>This applies even if the result of this method is unused!\n(The part about being initialized is not yet fully decided, but until\nit is, the only safe approach is to ensure that they are indeed initialized.)</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x).expect(<span class=\"string\">&quot;null pointer&quot;</span>);\n\n<span class=\"kw\">let </span>x_ref = <span class=\"kw\">unsafe </span>{ ptr.as_mut() };\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">0</span>);\n<span class=\"kw-2\">*</span>x_ref += <span class=\"number\">2</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>x_ref, <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.27.0, const since 1.36.0\">1.27.0 (const: 1.36.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#469\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html#tymethod.cast\" class=\"fn\">cast</a>&lt;U&gt;(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;</h4></section></summary><div class=\"docblock\"><p>Casts to a pointer of another type.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ptr::NonNull;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>x = <span class=\"number\">0u32</span>;\n<span class=\"kw\">let </span>ptr = NonNull::new(<span class=\"kw-2\">&amp;mut </span>x <span class=\"kw\">as </span><span class=\"kw-2\">*mut </span><span class=\"kw\">_</span>).expect(<span class=\"string\">&quot;null pointer&quot;</span>);\n\n<span class=\"kw\">let </span>casted_ptr = ptr.cast::&lt;i8&gt;();\n<span class=\"kw\">let </span>raw_ptr: <span class=\"kw-2\">*mut </span>i8 = casted_ptr.as_ptr();</code></pre></div>\n</div></details></div></details>",0,"boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Eq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#781\">source</a></span><a href=\"#impl-Eq-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Eq","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#792\">source</a></span><a href=\"#impl-Ord-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#794\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#826-828\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#846-848\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#871-874\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<span class=\"where fmt-newline\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</span></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#784\">source</a></span><a href=\"#impl-PartialEq-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#786\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#239\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#750\">source</a></span><a href=\"#impl-Clone-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#752\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#761\">source</a><a href=\"#impl-CoerceUnsized%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","CoerceUnsized<NonNull<U>>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#808\">source</a></span><a href=\"#impl-Hash-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#810\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</span></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/hash/mod.rs.html#242-244\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut H</a>)<span class=\"where fmt-newline\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#774\">source</a></span><a href=\"#impl-Pointer-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#775\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Pointer","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Sync-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#84\">source</a></span><a href=\"#impl-Sync-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Sync</code> because the data they reference may be aliased.</p>\n</div>","Sync","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#767\">source</a></span><a href=\"#impl-Debug-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#768\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#800\">source</a></span><a href=\"#impl-PartialOrd-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#802\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1122\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1139\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1155\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/cmp.rs.html#1172\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#826\">source</a></span><a href=\"#impl-From%3C%26mut+T%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#831\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(reference: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details>","From<&mut T>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#838\">source</a></span><a href=\"#impl-From%3C%26T%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#843\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(reference: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.</p>\n<p>This conversion is safe and infallible since references cannot be null.</p>\n</div></details></div></details>","From<&T>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Copy-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#758\">source</a></span><a href=\"#impl-Copy-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","Copy","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-Send-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#79\">source</a></span><a href=\"#impl-Send-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section><div class=\"docblock\"><p><code>NonNull</code> pointers are not <code>Send</code> because the data they reference may be aliased.</p>\n</div>","Send","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.25.0\">1.25.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/panic/unwind_safe.rs.html#191\">source</a></span><a href=\"#impl-UnwindSafe-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/panic/unwind_safe/trait.UnwindSafe.html\" title=\"trait core::panic::unwind_safe::UnwindSafe\">UnwindSafe</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/panic/unwind_safe/trait.RefUnwindSafe.html\" title=\"trait core::panic::unwind_safe::RefUnwindSafe\">RefUnwindSafe</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","UnwindSafe","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"],["<section id=\"impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/ptr/non_null.rs.html#764\">source</a><a href=\"#impl-DispatchFromDyn%3CNonNull%3CU%3E%3E-for-NonNull%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/unsize/trait.DispatchFromDyn.html\" title=\"trait core::ops::unsize::DispatchFromDyn\">DispatchFromDyn</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/ptr/non_null/struct.NonNull.html\" title=\"struct core::ptr::non_null::NonNull\">NonNull</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Unsize.html\" title=\"trait core::marker::Unsize\">Unsize</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h3></section>","DispatchFromDyn<NonNull<U>>","boa_gc::GcErasedPointer","boa_gc::EphemeronPointer","boa_gc::ErasedWeakMapBoxPointer"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()