(function() {var type_impls = {
"boa_engine":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: 'a,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_read_only\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_read_only</a>(self) -&gt; ReadOnlyView&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Wraps this <code>DashMap</code> into a read-only view. This view allows to obtain raw references to the stored values.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_hasher</a>(hasher: S) -&gt; DashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new DashMap with a capacity of 0 and the provided hasher.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>reviews = DashMap::with_hasher(s);\nreviews.insert(<span class=\"string\">&quot;Veloren&quot;</span>, <span class=\"string\">&quot;What a fantastic game!&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity_and_hasher</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>, hasher: S) -&gt; DashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new DashMap with a specified starting capacity and hasher.</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>mappings = DashMap::with_capacity_and_hasher(<span class=\"number\">2</span>, s);\nmappings.insert(<span class=\"number\">2</span>, <span class=\"number\">4</span>);\nmappings.insert(<span class=\"number\">8</span>, <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher_and_shard_amount\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_hasher_and_shard_amount</a>(\n    hasher: S,\n    shard_amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; DashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new DashMap with a specified hasher and shard amount</p>\n<p>shard_amount should be greater than 0 and a power of two.\nIf a shard_amount which is not a power of two is provided, the function will panic.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>mappings = DashMap::with_hasher_and_shard_amount(s, <span class=\"number\">32</span>);\nmappings.insert(<span class=\"number\">2</span>, <span class=\"number\">4</span>);\nmappings.insert(<span class=\"number\">8</span>, <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher_and_shard_amount\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">with_capacity_and_hasher_and_shard_amount</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>,\n    hasher: S,\n    shard_amount: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; DashMap&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new DashMap with a specified starting capacity, hasher and shard_amount.</p>\n<p>shard_amount should greater than 0 and be a power of two.\nIf a shard_amount which is not a power of two is provided, the function will panic.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span>mappings = DashMap::with_capacity_and_hasher_and_shard_amount(<span class=\"number\">2</span>, s, <span class=\"number\">32</span>);\nmappings.insert(<span class=\"number\">2</span>, <span class=\"number\">4</span>);\nmappings.insert(<span class=\"number\">8</span>, <span class=\"number\">16</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_usize\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">hash_usize</a>&lt;T&gt;(&amp;self, item: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;T</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a><span class=\"where fmt-newline\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</span></h4></section></summary><div class=\"docblock\"><p>Hash a given item to produce a usize.\nUses the provided or default HashBuilder.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hasher\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">hasher</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;S</a></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the map’s <a href=\"https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\"><code>BuildHasher</code></a>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>hasher = RandomState::new();\n<span class=\"kw\">let </span>map: DashMap&lt;i32, i32&gt; = DashMap::new();\n<span class=\"kw\">let </span>hasher: <span class=\"kw-2\">&amp;</span>RandomState = map.hasher();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">insert</a>(&amp;self, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section></summary><div class=\"docblock\"><p>Inserts a key and a value into the map. Returns the old value associated with the key if there was one.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>map = DashMap::new();\nmap.insert(<span class=\"string\">&quot;I am the key!&quot;</span>, <span class=\"string\">&quot;And I am the value!&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Removes an entry from the map, returning the key and value if they existed in the map.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>soccer_team = DashMap::new();\nsoccer_team.insert(<span class=\"string\">&quot;Jack&quot;</span>, <span class=\"string\">&quot;Goalie&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(soccer_team.remove(<span class=\"string\">&quot;Jack&quot;</span>).unwrap().<span class=\"number\">1</span>, <span class=\"string\">&quot;Goalie&quot;</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove_if\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_if</a>&lt;Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Removes an entry from the map, returning the key and value\nif the entry existed and the provided conditional function returned true.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>soccer_team = DashMap::new();\nsoccer_team.insert(<span class=\"string\">&quot;Sam&quot;</span>, <span class=\"string\">&quot;Forward&quot;</span>);\nsoccer_team.remove_if(<span class=\"string\">&quot;Sam&quot;</span>, |<span class=\"kw\">_</span>, position| position == <span class=\"kw-2\">&amp;</span><span class=\"string\">&quot;Goalie&quot;</span>);\n<span class=\"macro\">assert!</span>(soccer_team.contains_key(<span class=\"string\">&quot;Sam&quot;</span>));</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>soccer_team = DashMap::new();\nsoccer_team.insert(<span class=\"string\">&quot;Sam&quot;</span>, <span class=\"string\">&quot;Forward&quot;</span>);\nsoccer_team.remove_if(<span class=\"string\">&quot;Sam&quot;</span>, |<span class=\"kw\">_</span>, position| position == <span class=\"kw-2\">&amp;</span><span class=\"string\">&quot;Forward&quot;</span>);\n<span class=\"macro\">assert!</span>(!soccer_team.contains_key(<span class=\"string\">&quot;Sam&quot;</span>));</code></pre></div>\n</div></details><section id=\"method.remove_if_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">remove_if_mut</a>&lt;Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter</a>(&amp;'a self) -&gt; Iter&lt;'a, K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an iterator over a DashMap yielding immutable references.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding a mutable reference into the map.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>words = DashMap::new();\nwords.insert(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>);\n<span class=\"macro\">assert_eq!</span>(words.iter().count(), <span class=\"number\">1</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">iter_mut</a>(&amp;'a self) -&gt; IterMut&lt;'a, K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Iterator over a DashMap yielding mutable references.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>map = DashMap::new();\nmap.insert(<span class=\"string\">&quot;Johnny&quot;</span>, <span class=\"number\">21</span>);\nmap.iter_mut().for_each(|<span class=\"kw-2\">mut </span>r| <span class=\"kw-2\">*</span>r += <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"string\">&quot;Johnny&quot;</span>).unwrap(), <span class=\"number\">22</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Ref&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Get an immutable reference to an entry in the map</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding a mutable reference into the map.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>youtubers = DashMap::new();\nyoutubers.insert(<span class=\"string\">&quot;Bosnian Bill&quot;</span>, <span class=\"number\">457000</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>youtubers.get(<span class=\"string\">&quot;Bosnian Bill&quot;</span>).unwrap(), <span class=\"number\">457000</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">get_mut</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RefMut&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to an entry in the map</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>class = DashMap::new();\nclass.insert(<span class=\"string\">&quot;Albin&quot;</span>, <span class=\"number\">15</span>);\n<span class=\"kw-2\">*</span>class.get_mut(<span class=\"string\">&quot;Albin&quot;</span>).unwrap() -= <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>class.get(<span class=\"string\">&quot;Albin&quot;</span>).unwrap(), <span class=\"number\">14</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_get</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; TryResult&lt;Ref&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Get an immutable reference to an entry in the map, if the shard is not locked.\nIf the shard is locked, the function will return [TryResult::Locked].</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>dashmap::try_result::TryResult;\n\n<span class=\"kw\">let </span>map = DashMap::new();\nmap.insert(<span class=\"string\">&quot;Johnny&quot;</span>, <span class=\"number\">21</span>);\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.try_get(<span class=\"string\">&quot;Johnny&quot;</span>).unwrap(), <span class=\"number\">21</span>);\n\n<span class=\"kw\">let </span>_result1_locking = map.get_mut(<span class=\"string\">&quot;Johnny&quot;</span>);\n\n<span class=\"kw\">let </span>result2 = map.try_get(<span class=\"string\">&quot;Johnny&quot;</span>);\n<span class=\"macro\">assert!</span>(result2.is_locked());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_get_mut\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_get_mut</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; TryResult&lt;RefMut&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Get a mutable reference to an entry in the map, if the shard is not locked.\nIf the shard is locked, the function will return [TryResult::Locked].</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n<span class=\"kw\">use </span>dashmap::try_result::TryResult;\n\n<span class=\"kw\">let </span>map = DashMap::new();\nmap.insert(<span class=\"string\">&quot;Johnny&quot;</span>, <span class=\"number\">21</span>);\n\n<span class=\"kw-2\">*</span>map.try_get_mut(<span class=\"string\">&quot;Johnny&quot;</span>).unwrap() += <span class=\"number\">1</span>;\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>map.get(<span class=\"string\">&quot;Johnny&quot;</span>).unwrap(), <span class=\"number\">22</span>);\n\n<span class=\"kw\">let </span>_result1_locking = map.get(<span class=\"string\">&quot;Johnny&quot;</span>);\n\n<span class=\"kw\">let </span>result2 = map.try_get_mut(<span class=\"string\">&quot;Johnny&quot;</span>);\n<span class=\"macro\">assert!</span>(result2.is_locked());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_fit\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">shrink_to_fit</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Remove excess capacity to reduce memory usage.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>(&amp;self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Retain elements that whose predicates return true\nand discard elements whose predicates return false.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>people = DashMap::new();\npeople.insert(<span class=\"string\">&quot;Albin&quot;</span>, <span class=\"number\">15</span>);\npeople.insert(<span class=\"string\">&quot;Jones&quot;</span>, <span class=\"number\">22</span>);\npeople.insert(<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"number\">27</span>);\npeople.retain(|<span class=\"kw\">_</span>, v| <span class=\"kw-2\">*</span>v &gt; <span class=\"number\">20</span>);\n<span class=\"macro\">assert_eq!</span>(people.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Fetches the total number of key-value pairs stored in the map.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding a mutable reference into the map.</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>people = DashMap::new();\npeople.insert(<span class=\"string\">&quot;Albin&quot;</span>, <span class=\"number\">15</span>);\npeople.insert(<span class=\"string\">&quot;Jones&quot;</span>, <span class=\"number\">22</span>);\npeople.insert(<span class=\"string\">&quot;Charlie&quot;</span>, <span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(people.len(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Checks if the map is empty or not.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding a mutable reference into the map.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>map = DashMap::&lt;(), ()&gt;::new();\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">clear</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>Removes all key-value pairs in the map.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>stats = DashMap::new();\nstats.insert(<span class=\"string\">&quot;Goals&quot;</span>, <span class=\"number\">4</span>);\n<span class=\"macro\">assert!</span>(!stats.is_empty());\nstats.clear();\n<span class=\"macro\">assert!</span>(stats.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns how many key-value pairs the map can store without reallocating.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding a mutable reference into the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alter\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alter</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; V)<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Modify a specific value according to a function.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>stats = DashMap::new();\nstats.insert(<span class=\"string\">&quot;Goals&quot;</span>, <span class=\"number\">4</span>);\nstats.alter(<span class=\"string\">&quot;Goals&quot;</span>, |<span class=\"kw\">_</span>, v| v * <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>stats.get(<span class=\"string\">&quot;Goals&quot;</span>).unwrap(), <span class=\"number\">8</span>);</code></pre></div>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>If the given closure panics, then <code>alter</code> will abort the process</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.alter_all\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">alter_all</a>(&amp;self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; V)</h4></section></summary><div class=\"docblock\"><p>Modify every value in the map according to a function.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>stats = DashMap::new();\nstats.insert(<span class=\"string\">&quot;Wins&quot;</span>, <span class=\"number\">4</span>);\nstats.insert(<span class=\"string\">&quot;Losses&quot;</span>, <span class=\"number\">2</span>);\nstats.alter_all(|<span class=\"kw\">_</span>, v| v + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>stats.get(<span class=\"string\">&quot;Wins&quot;</span>).unwrap(), <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>stats.get(<span class=\"string\">&quot;Losses&quot;</span>).unwrap(), <span class=\"number\">3</span>);</code></pre></div>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>If the given closure panics, then <code>alter_all</code> will abort the process</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.view\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">view</a>&lt;Q, R&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;V</a>) -&gt; R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Scoped access into an item of the map according to a function.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>warehouse = DashMap::new();\nwarehouse.insert(<span class=\"number\">4267</span>, (<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"number\">100</span>));\nwarehouse.insert(<span class=\"number\">2359</span>, (<span class=\"string\">&quot;Pear&quot;</span>, <span class=\"number\">120</span>));\n<span class=\"kw\">let </span>fruit = warehouse.view(<span class=\"kw-2\">&amp;</span><span class=\"number\">4267</span>, |_k, v| <span class=\"kw-2\">*</span>v);\n<span class=\"macro\">assert_eq!</span>(fruit, <span class=\"prelude-val\">Some</span>((<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"number\">100</span>)));</code></pre></div>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>If the given closure panics, then <code>view</code> will abort the process</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section></summary><div class=\"docblock\"><p>Checks if the map contains a specific key.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding a mutable reference into the map.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>dashmap::DashMap;\n\n<span class=\"kw\">let </span>team_sizes = DashMap::new();\nteam_sizes.insert(<span class=\"string\">&quot;Dakota Cherries&quot;</span>, <span class=\"number\">23</span>);\n<span class=\"macro\">assert!</span>(team_sizes.contains_key(<span class=\"string\">&quot;Dakota Cherries&quot;</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">entry</a>(&amp;'a self, key: K) -&gt; Entry&lt;'a, K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Advanced entry API that tries to mimic <code>std::collections::HashMap</code>.\nSee the documentation on <code>dashmap::mapref::entry</code> for more details.</p>\n<p><strong>Locking behaviour:</strong> May deadlock if called when holding any sort of reference into the map.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_entry\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_entry</a>(&amp;'a self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'a, K, V, S&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Advanced entry API that tries to mimic <code>std::collections::HashMap</code>.\nSee the documentation on <code>dashmap::mapref::entry</code> for more details.</p>\n<p>Returns None if the shard is currently locked.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reserve\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, TryReserveError&gt;</h4></section></summary><div class=\"docblock\"><p>Advanced entry API that tries to mimic <code>std::collections::HashMap::try_reserve</code>.\nTries to reserve capacity for at least <code>shard * additional</code>\nand may reserve more space to avoid frequent reallocations.</p>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p>If the capacity overflows, or the allocator reports a failure, then an error is returned.</p>\n</div></details></div></details>",0,"boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt; for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;I&gt;(intoiter: I) -&gt; DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</span></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, V)>","boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Debug-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.75.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.75.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Clone-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; DashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.75.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Default-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; DashMap&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.75.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Extend%3C(K,+V)%3E-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt; for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;I&gt;(&amp;mut self, intoiter: I)<span class=\"where fmt-newline\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</span></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#376\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.75.0/src/core/iter/traits/collect.rs.html#384\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, V)>","boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = OwningIter&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;DashMap&lt;K, V, S&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.75.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","boa_engine::builtins::symbol::FxDashMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Map%3C'a,+K,+V,+S%3E-for-DashMap%3CK,+V,+S%3E\" class=\"impl\"><a href=\"#impl-Map%3C'a,+K,+V,+S%3E-for-DashMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; Map&lt;'a, K, V, S&gt; for DashMap&lt;K, V, S&gt;<span class=\"where fmt-newline\">where\n    K: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: 'a,\n    S: 'a + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</span></h3></section></summary><div class=\"impl-items\"><section id=\"method._shard_count\" class=\"method trait-impl\"><a href=\"#method._shard_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_shard_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method._get_read_shard\" class=\"method trait-impl\"><a href=\"#method._get_read_shard\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">_get_read_shard</a>(\n    &amp;'a self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; &amp;'a HashMap&lt;K, SharedValue&lt;V&gt;, S&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method._yield_read_shard\" class=\"method trait-impl\"><a href=\"#method._yield_read_shard\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">_yield_read_shard</a>(\n    &amp;'a self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; RwLockReadGuard&lt;'a, RawRwLock, HashMap&lt;K, SharedValue&lt;V&gt;, S&gt;&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method._yield_write_shard\" class=\"method trait-impl\"><a href=\"#method._yield_write_shard\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">_yield_write_shard</a>(\n    &amp;'a self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; RwLockWriteGuard&lt;'a, RawRwLock, HashMap&lt;K, SharedValue&lt;V&gt;, S&gt;&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method._try_yield_read_shard\" class=\"method trait-impl\"><a href=\"#method._try_yield_read_shard\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">_try_yield_read_shard</a>(\n    &amp;'a self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RwLockReadGuard&lt;'a, RawRwLock, HashMap&lt;K, SharedValue&lt;V&gt;, S&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method._try_yield_write_shard\" class=\"method trait-impl\"><a href=\"#method._try_yield_write_shard\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a class=\"fn\">_try_yield_write_shard</a>(\n    &amp;'a self,\n    i: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RwLockWriteGuard&lt;'a, RawRwLock, HashMap&lt;K, SharedValue&lt;V&gt;, S&gt;&gt;&gt;</h4></section></summary><div class='docblock'>Safety <a>Read more</a></div></details><section id=\"method._insert\" class=\"method trait-impl\"><a href=\"#method._insert\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_insert</a>(&amp;self, key: K, value: V) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;V&gt;</h4></section><section id=\"method._remove\" class=\"method trait-impl\"><a href=\"#method._remove\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_remove</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._remove_if\" class=\"method trait-impl\"><a href=\"#method._remove_if\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_remove_if</a>&lt;Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._remove_if_mut\" class=\"method trait-impl\"><a href=\"#method._remove_if_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_remove_if_mut</a>&lt;Q&gt;(\n    &amp;self,\n    key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>,\n    f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.tuple.html\">(K, V)</a>&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._iter\" class=\"method trait-impl\"><a href=\"#method._iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_iter</a>(&amp;'a self) -&gt; Iter&lt;'a, K, V, S&gt;</h4></section><section id=\"method._iter_mut\" class=\"method trait-impl\"><a href=\"#method._iter_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_iter_mut</a>(&amp;'a self) -&gt; IterMut&lt;'a, K, V, S&gt;</h4></section><section id=\"method._get\" class=\"method trait-impl\"><a href=\"#method._get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_get</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Ref&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._get_mut\" class=\"method trait-impl\"><a href=\"#method._get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_get_mut</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;RefMut&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._try_get\" class=\"method trait-impl\"><a href=\"#method._try_get\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_try_get</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; TryResult&lt;Ref&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._try_get_mut\" class=\"method trait-impl\"><a href=\"#method._try_get_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_try_get_mut</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; TryResult&lt;RefMut&lt;'a, K, V, S&gt;&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._shrink_to_fit\" class=\"method trait-impl\"><a href=\"#method._shrink_to_fit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_shrink_to_fit</a>(&amp;self)</h4></section><section id=\"method._retain\" class=\"method trait-impl\"><a href=\"#method._retain\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_retain</a>(&amp;self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;mut V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a>)</h4></section><section id=\"method._len\" class=\"method trait-impl\"><a href=\"#method._len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><section id=\"method._capacity\" class=\"method trait-impl\"><a href=\"#method._capacity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.usize.html\">usize</a></h4></section><section id=\"method._alter\" class=\"method trait-impl\"><a href=\"#method._alter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_alter</a>&lt;Q&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; V)<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._alter_all\" class=\"method trait-impl\"><a href=\"#method._alter_all\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_alter_all</a>(&amp;self, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, V) -&gt; V)</h4></section><section id=\"method._view\" class=\"method trait-impl\"><a href=\"#method._view\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_view</a>&lt;Q, R&gt;(&amp;self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>, f: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;V</a>) -&gt; R) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;<span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._entry\" class=\"method trait-impl\"><a href=\"#method._entry\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_entry</a>(&amp;'a self, key: K) -&gt; Entry&lt;'a, K, V, S&gt;</h4></section><section id=\"method._try_entry\" class=\"method trait-impl\"><a href=\"#method._try_entry\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_try_entry</a>(&amp;'a self, key: K) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.75.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Entry&lt;'a, K, V, S&gt;&gt;</h4></section><section id=\"method._hasher\" class=\"method trait-impl\"><a href=\"#method._hasher\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_hasher</a>(&amp;self) -&gt; S</h4></section><section id=\"method._clear\" class=\"method trait-impl\"><a href=\"#method._clear\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_clear</a>(&amp;self)</h4></section><section id=\"method._contains_key\" class=\"method trait-impl\"><a href=\"#method._contains_key\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_contains_key</a>&lt;Q&gt;(&amp;'a self, key: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a><span class=\"where fmt-newline\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.75.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</span></h4></section><section id=\"method._is_empty\" class=\"method trait-impl\"><a href=\"#method._is_empty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">_is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.75.0/std/primitive.bool.html\">bool</a></h4></section></div></details>","Map<'a, K, V, S>","boa_engine::builtins::symbol::FxDashMap"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()