window.SIDEBAR_ITEMS = {"constant":[["BOA_GC",""],["GC_DROPPING",""]],"derive":[["Finalize","Derive the Finalize trait."],["Trace","Derive the Trace trait."]],"fn":[["finalizer_safe","Returns `true` if it is safe for a type to run [`Finalize::finalize`]."],["force_collect","Forcefully runs a garbage collection of all unaccessible nodes."]],"macro":[["custom_trace","Utility macro to manually implement [`Trace`] on a type."],["empty_trace","Utility macro to define an empty implementation of [`Trace`]."]],"mod":[["cell","A garbage collected cell implementation"],["internals",""],["pointers","Pointers represents the External types returned by the Boa Garbage Collector"],["trace",""]],"struct":[["Allocator","The Allocator handles allocation of garbage collected values."],["BoaGc",""],["Collector","This collector currently functions in four main phases"],["DropGuard","`DropGuard` flags whether the Collector is currently running `Collector::sweep()` or `Collector::dump()`"],["Ephemeron","A key-value pair where the value becomes unaccesible when the key is garbage collected."],["Gc","A garbage-collected pointer type over an immutable value."],["GcBox","A garbage collected allocation."],["GcConfig",""],["GcRef","A wrapper type for an immutably borrowed value from a `GcCell<T>`."],["GcRefCell","A mutable memory location with dynamically checked borrow rules that can be used inside of a garbage-collected pointer."],["GcRefMut","A wrapper type for a mutably borrowed value from a `GcCell<T>`."],["GcRuntimeData",""],["Unreachables",""],["WeakGc","A weak reference to a [`Gc`]."]],"trait":[["Finalize","Substitute for the [`Drop`] trait for garbage collected types."],["Trace","The Trace trait, which needs to be implemented on garbage-collected objects."]],"type":[["EphemeronPointer",""],["GcPointer",""]]};