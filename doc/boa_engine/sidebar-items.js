window.SIDEBAR_ITEMS = {"enum":[["JsNativeErrorKind","The list of possible error types a [`JsNativeError`] can be."],["JsValue","A Javascript value"]],"macro":[["js_string","Utility macro to create a [`JsString`]."]],"mod":[["bigint","This module implements the JavaScript bigint primitive rust type."],["builtins","Builtins live here, such as Object, String, Math, etc."],["bytecompiler",""],["class","Traits and structs for implementing native classes."],["context","Javascript context."],["environments","This module implements ECMAScript `Environment Records`."],["error","Error-related types and conversions."],["job",""],["object","This module implements the Rust representation of a JavaScript object, see [`object::builtins`][builtins] for implementors."],["prelude","A convenience module that re-exports the most commonly-used Boa APIs"],["property","This module implements the Property Descriptor."],["realm","Conceptually, a realm consists of a set of intrinsic objects, an ECMAScript global environment, all of the ECMAScript code that is loaded within the scope of that global environment, and other associated state and resources."],["string","A UTF-16–encoded, reference counted, immutable string."],["symbol","This module implements the global `Symbol` object."],["value","This module implements the JavaScript Value."],["vm","The Virtual Machine (VM) handles generating instructions, then executing them. This module will provide an instruction set for the AST to use, various traits, plus an interpreter to execute those instructions"]],"struct":[["Context","Javascript context. It is the primary way to interact with the runtime."],["JsBigInt","JavaScript bigint primitive rust type."],["JsError","The error type returned by all operations related to the execution of Javascript code."],["JsNativeError","Native representation of an ideal `Error` object from Javascript."],["JsString","A UTF-16–encoded, reference counted, immutable string."],["JsSymbol","This represents a JavaScript symbol primitive."]],"type":[["JsResult","The result of a Javascript expression is represented like this so it can succeed (`Ok`) or fail (`Err`)"]]};