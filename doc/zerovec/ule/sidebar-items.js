window.SIDEBAR_ITEMS = {"derive":[["ULE","Custom derive for [`ULE`]."],["VarULE","Custom derive for [`VarULE`]"]],"enum":[["ZeroVecError","A generic error type to be used for decoding slices of ULE types"]],"fn":[["encode_varule_to_box","Given an [`EncodeAsVarULE`] type `S`, encode it into a `Box<T>`"]],"mod":[["custom","Documentation on implementing custom VarULE types."],["tuple","ULE impls for tuples."]],"struct":[["CharULE","A u8 array of little-endian data corresponding to a Unicode code point."],["MultiFieldsULE","This type is used by the custom derive to represent multiple [`VarULE`] fields packed into a single end-of-struct field. It is not recommended to use this type directly."],["OptionULE","This type is the [`ULE`] type for `Option<U>` where `U` is a [`ULE`] type"],["OptionVarULE","A type allowing one to represent `Option<U>` for [`VarULE`] `U` types."],["RawBytesULE","A u8 array of little-endian data with infallible conversions to and from &[u8]."]],"trait":[["AsULE","A trait for any type that has a 1:1 mapping with an unaligned little-endian (ULE) type."],["EncodeAsVarULE","Allows types to be encoded as VarULEs. This is highly useful for implementing VarULE on custom DSTs where the type cannot be obtained as a reference to some other type."],["EqULE","An [`EqULE`] type is one whose byte sequence equals the byte sequence of its ULE type on little-endian platforms. This enables certain performance optimizations, such as `ZeroVec::try_from_slice`."],["SliceAsULE","A trait for a type where aligned slices can be cast to unaligned slices."],["ULE","Fixed-width, byte-aligned data that can be cast to and from a little-endian byte slice."],["VarULE","Variable-width, byte-aligned data that can be cast to and from a little-endian byte slice."]]};