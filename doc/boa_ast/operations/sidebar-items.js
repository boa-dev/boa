window.SIDEBAR_ITEMS = {"enum":[["ContainsSymbol","Represents all the possible symbols searched for by the `Contains` operation."]],"fn":[["bound_names","Returns a list with the bound names of an AST node, which may contain duplicates."],["contains","Returns `true` if the node contains the given symbol."],["contains_arguments","Returns true if the node contains an identifier reference with name `arguments`."],["has_direct_super","Returns `true` if `method` has a super call in its parameters or body."],["lexically_declared_names","Returns a list with the lexical bindings of a node, which may contain duplicates."],["lexically_declared_names_legacy","Returns a list with the lexical bindings of a node, which may contain duplicates."],["top_level_lexically_declared_names","Returns a list with the lexical bindings of a top-level statement list, which may contain duplicates."],["top_level_lexicals","Utility function that collects the top level lexicals of a statement list into `names`."],["top_level_var_declared_names","Returns a list with the var bindings of a top-level statement list, with no duplicates."],["top_level_vars","Utility function that collects the top level vars of a statement list into `names`."],["var_declared_names","Returns a set with the var bindings of a node, with no duplicates."]],"struct":[["BoundNamesVisitor","The [`Visitor`] used to obtain the bound names of a node."],["LexicallyDeclaredNamesVisitor","The [`Visitor`] used to obtain the lexically declared names of a node."],["VarDeclaredNamesVisitor","The [`Visitor`] used to obtain the var declared names of a node."]],"trait":[["IdentList","A container that [`BoundNamesVisitor`] can use to push the found identifiers."]]};