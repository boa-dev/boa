"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["node_modules_monaco-editor_esm_vs_basic-languages_tcl_tcl_js"],{

/***/ "./node_modules/monaco-editor/esm/vs/basic-languages/tcl/tcl.js":
/*!**********************************************************************!*\
  !*** ./node_modules/monaco-editor/esm/vs/basic-languages/tcl/tcl.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"conf\": () => (/* binding */ conf),\n/* harmony export */   \"language\": () => (/* binding */ language)\n/* harmony export */ });\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar conf = {\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ]\r\n};\r\nvar language = {\r\n    tokenPostfix: '.tcl',\r\n    specialFunctions: [\r\n        'set',\r\n        'unset',\r\n        'rename',\r\n        'variable',\r\n        'proc',\r\n        'coroutine',\r\n        'foreach',\r\n        'incr',\r\n        'append',\r\n        'lappend',\r\n        'linsert',\r\n        'lreplace'\r\n    ],\r\n    mainFunctions: [\r\n        'if',\r\n        'then',\r\n        'elseif',\r\n        'else',\r\n        'case',\r\n        'switch',\r\n        'while',\r\n        'for',\r\n        'break',\r\n        'continue',\r\n        'return',\r\n        'package',\r\n        'namespace',\r\n        'catch',\r\n        'exit',\r\n        'eval',\r\n        'expr',\r\n        'uplevel',\r\n        'upvar'\r\n    ],\r\n    builtinFunctions: [\r\n        'file',\r\n        'info',\r\n        'concat',\r\n        'join',\r\n        'lindex',\r\n        'list',\r\n        'llength',\r\n        'lrange',\r\n        'lsearch',\r\n        'lsort',\r\n        'split',\r\n        'array',\r\n        'parray',\r\n        'binary',\r\n        'format',\r\n        'regexp',\r\n        'regsub',\r\n        'scan',\r\n        'string',\r\n        'subst',\r\n        'dict',\r\n        'cd',\r\n        'clock',\r\n        'exec',\r\n        'glob',\r\n        'pid',\r\n        'pwd',\r\n        'close',\r\n        'eof',\r\n        'fblocked',\r\n        'fconfigure',\r\n        'fcopy',\r\n        'fileevent',\r\n        'flush',\r\n        'gets',\r\n        'open',\r\n        'puts',\r\n        'read',\r\n        'seek',\r\n        'socket',\r\n        'tell',\r\n        'interp',\r\n        'after',\r\n        'auto_execok',\r\n        'auto_load',\r\n        'auto_mkindex',\r\n        'auto_reset',\r\n        'bgerror',\r\n        'error',\r\n        'global',\r\n        'history',\r\n        'load',\r\n        'source',\r\n        'time',\r\n        'trace',\r\n        'unknown',\r\n        'unset',\r\n        'update',\r\n        'vwait',\r\n        'winfo',\r\n        'wm',\r\n        'bind',\r\n        'event',\r\n        'pack',\r\n        'place',\r\n        'grid',\r\n        'font',\r\n        'bell',\r\n        'clipboard',\r\n        'destroy',\r\n        'focus',\r\n        'grab',\r\n        'lower',\r\n        'option',\r\n        'raise',\r\n        'selection',\r\n        'send',\r\n        'tk',\r\n        'tkwait',\r\n        'tk_bisque',\r\n        'tk_focusNext',\r\n        'tk_focusPrev',\r\n        'tk_focusFollowsMouse',\r\n        'tk_popup',\r\n        'tk_setPalette'\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    brackets: [\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' }\r\n    ],\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"'\\[\\]\\{\\};\\$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    variables: /(?:\\$+(?:(?:\\:\\:?)?[a-zA-Z_]\\w*)+)/,\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_]\\w*/,\r\n                {\r\n                    cases: {\r\n                        '@specialFunctions': {\r\n                            token: 'keyword.flow',\r\n                            next: '@specialFunc'\r\n                        },\r\n                        '@mainFunctions': 'keyword',\r\n                        '@builtinFunctions': 'variable',\r\n                        '@default': 'operator.scss'\r\n                    }\r\n                }\r\n            ],\r\n            [/\\s+\\-+(?!\\d|\\.)\\w*|{\\*}/, 'metatag'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, 'operator'],\r\n            [/\\$+(?:\\:\\:)?\\{/, { token: 'identifier', next: '@nestedVariable' }],\r\n            [/@variables/, 'type.identifier'],\r\n            [/\\.(?!\\d|\\.)[\\w\\-]*/, 'operator.sql'],\r\n            // numbers\r\n            [/\\d+(\\.\\d+)?/, 'number'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter\r\n            [/;/, 'delimiter'],\r\n            // strings\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@dstring' }],\r\n            [/'/, { token: 'string.quote', bracket: '@open', next: '@sstring' }]\r\n        ],\r\n        dstring: [\r\n            [/\\[/, { token: '@brackets', next: '@nestedCall' }],\r\n            [/\\$+(?:\\:\\:)?\\{/, { token: 'identifier', next: '@nestedVariable' }],\r\n            [/@variables/, 'type.identifier'],\r\n            [/[^\\\\$\\[\\]\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        sstring: [\r\n            [/\\[/, { token: '@brackets', next: '@nestedCall' }],\r\n            [/\\$+(?:\\:\\:)?\\{/, { token: 'identifier', next: '@nestedVariable' }],\r\n            [/@variables/, 'type.identifier'],\r\n            [/[^\\\\$\\[\\]']+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/#.*\\\\$/, { token: 'comment', next: '@newlineComment' }],\r\n            [/#.*(?!\\\\)$/, 'comment']\r\n        ],\r\n        newlineComment: [\r\n            [/.*\\\\$/, 'comment'],\r\n            [/.*(?!\\\\)$/, { token: 'comment', next: '@pop' }]\r\n        ],\r\n        nestedVariable: [\r\n            [/[^\\{\\}\\$]+/, 'type.identifier'],\r\n            [/\\}/, { token: 'identifier', next: '@pop' }]\r\n        ],\r\n        nestedCall: [\r\n            [/\\[/, { token: '@brackets', next: '@nestedCall' }],\r\n            [/\\]/, { token: '@brackets', next: '@pop' }],\r\n            { include: 'root' }\r\n        ],\r\n        specialFunc: [\r\n            [/\"/, { token: 'string', next: '@dstring' }],\r\n            [/'/, { token: 'string', next: '@sstring' }],\r\n            [/\\S+/, { token: 'type', next: '@pop' }]\r\n        ]\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./node_modules/monaco-editor/esm/vs/basic-languages/tcl/tcl.js?");

/***/ })

}]);