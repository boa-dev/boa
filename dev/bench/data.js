window.BENCHMARK_DATA = {
  "lastUpdate": 1647115292138,
  "repoUrl": "https://github.com/boa-dev/boa",
  "entries": {
    "Boa Benchmarks": [
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "distinct": false,
          "id": "13b29ecd682f323a1221d227428f61f0985e36cf",
          "message": "auto generate release notes based on labels (#1756)\n\nThis should help with the process of making the changelogs on releases.\r\nhttps://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes",
          "timestamp": "2021-12-22T03:44:12Z",
          "tree_id": "29b98305f878614e9e841023f80d18a8e59bea57",
          "url": "https://github.com/boa-dev/boa/commit/13b29ecd682f323a1221d227428f61f0985e36cf"
        },
        "date": 1640146523986,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 344.35,
            "range": "± 0.060",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4.2025,
            "range": "± 0.003",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 18.12,
            "range": "± 0.010",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.2572,
            "range": "± 0.001",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 871.69,
            "range": "± 1.130",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 9.4953,
            "range": "± 0.035",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 4.8046,
            "range": "± 0.004",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 674.58,
            "range": "± 0.900",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 622.27,
            "range": "± 3.430",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 13.23,
            "range": "± 0.008",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31.376,
            "range": "± 0.011",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27.555,
            "range": "± 0.083",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "baa272c9bbc38ee3d38ce20c890986f739af13e1",
          "message": "Bump webpack-dev-server from 4.6.0 to 4.7.1 (#1759)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.6.0 to 4.7.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.1</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.0...v4.7.1\">4.7.1</a> (2021-12-22)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>removed <code>url</code> package, fixed compatibility with future webpack defaults (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4132\">#4132</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/4e5d8eae654ef382697722c6406dbc96207594aa\">4e5d8ea</a>)</li>\n</ul>\n<h2>v4.7.0</h2>\n<h2><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.6.0...v4.7.0\">4.7.0</a> (2021-12-21)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>setupMiddlewares</code> option and deprecated <code>onAfterSetupMiddleware</code> and <code>onBeforeSetupMiddleware</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4068\">#4068</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c13aa560651a3bb4c4a7b1b4363c04383596c7e9\">c13aa56</a>)</li>\n<li>added types (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8f02c3f3d6131fd37f58ef4d5cbe15578c94a6fd\">8f02c3f</a>)</li>\n<li>show deprecation warning for <code>cacert</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4115\">#4115</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c73ddfb934ec748e3dd34456d4293b933e9c6c99\">c73ddfb</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add description for <code>watchFiles</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4057\">#4057</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/75f381751e5377ae297c32f9fcdcd096ef28c5c2\">75f3817</a>)</li>\n<li>allow passing options for custom server (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4110\">#4110</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fc8bed95251f27a24c1441307c44782f3836edd6\">fc8bed9</a>)</li>\n<li>correct schema for <code>ClientLogging</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4084\">#4084</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/9b7ae7b5f4ac4a920b1ae3b47a8eb15d093cb369\">9b7ae7b</a>)</li>\n<li>mark <code>--open-app</code> deprecated in favor of <code>--open-app-name</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4091\">#4091</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/693c28a0499e431b09274b8b7ecce71adb292c8f\">693c28a</a>)</li>\n<li>show deprecation warning for both <code>https</code> and <code>http2</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4069\">#4069</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/d8d5d71c8ca495098e1ee30ebc72ffd657ad5ba0\">d8d5d71</a>)</li>\n<li>update <code>--web-socket-server</code> description (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4098\">#4098</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/65955e96cf7869dd4294699fd2a3878c2179c656\">65955e9</a>)</li>\n<li>update <code>listen</code> and <code>close</code> deprecation warning message (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4097\">#4097</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/b217a191d09a93e8dcc1fff2ee26e97857e096d3\">b217a19</a>)</li>\n<li>update descriptions of <code>https</code> and <code>server</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4094\">#4094</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f97c9e2df460ef9a84c8ab2016c6bce3c90d93ac\">f97c9e2</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.0...v4.7.1\">4.7.1</a> (2021-12-22)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>removed <code>url</code> package, fixed compatibility with future webpack defaults (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4132\">#4132</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/4e5d8eae654ef382697722c6406dbc96207594aa\">4e5d8ea</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.6.0...v4.7.0\">4.7.0</a> (2021-12-21)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>setupMiddlewares</code> option and deprecated <code>onAfterSetupMiddleware</code> and <code>onBeforeSetupMiddleware</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4068\">#4068</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c13aa560651a3bb4c4a7b1b4363c04383596c7e9\">c13aa56</a>)</li>\n<li>added types (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8f02c3f3d6131fd37f58ef4d5cbe15578c94a6fd\">8f02c3f</a>)</li>\n<li>show deprecation warning for <code>cacert</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4115\">#4115</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c73ddfb934ec748e3dd34456d4293b933e9c6c99\">c73ddfb</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add description for <code>watchFiles</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4057\">#4057</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/75f381751e5377ae297c32f9fcdcd096ef28c5c2\">75f3817</a>)</li>\n<li>allow passing options for custom server (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4110\">#4110</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fc8bed95251f27a24c1441307c44782f3836edd6\">fc8bed9</a>)</li>\n<li>correct schema for <code>ClientLogging</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4084\">#4084</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/9b7ae7b5f4ac4a920b1ae3b47a8eb15d093cb369\">9b7ae7b</a>)</li>\n<li>mark <code>--open-app</code> deprecated in favor of <code>--open-app-name</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4091\">#4091</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/693c28a0499e431b09274b8b7ecce71adb292c8f\">693c28a</a>)</li>\n<li>show deprecation warning for both <code>https</code> and <code>http2</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4069\">#4069</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/d8d5d71c8ca495098e1ee30ebc72ffd657ad5ba0\">d8d5d71</a>)</li>\n<li>update <code>--web-socket-server</code> description (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4098\">#4098</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/65955e96cf7869dd4294699fd2a3878c2179c656\">65955e9</a>)</li>\n<li>update <code>listen</code> and <code>close</code> deprecation warning message (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4097\">#4097</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/b217a191d09a93e8dcc1fff2ee26e97857e096d3\">b217a19</a>)</li>\n<li>update descriptions of <code>https</code> and <code>server</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4094\">#4094</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f97c9e2df460ef9a84c8ab2016c6bce3c90d93ac\">f97c9e2</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/afe49753b9f38679d200e88059bbe9a97e25e368\"><code>afe4975</code></a> chore(release): 4.1.7</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/4e5d8eae654ef382697722c6406dbc96207594aa\"><code>4e5d8ea</code></a> fix: droped <code>url</code> package (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4132\">#4132</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/b0c98f047e41116d947490e3adcdfaccaaf9afb5\"><code>b0c98f0</code></a> chore(release): 4.7.0</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/3138213401301ebf191b3b152a78529f5f5e412b\"><code>3138213</code></a> chore(deps): update (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4127\">#4127</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/8f02c3f3d6131fd37f58ef4d5cbe15578c94a6fd\"><code>8f02c3f</code></a> feat: added types</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f4fb15f14cd1c2b6bd3a536c4d25b3004f035a90\"><code>f4fb15f</code></a> fix: update description of <code>onAfterSetupMiddleware</code> and `onBeforeSetupMiddlew...</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/37b73d5f7d7e3cff12fed8aedfc981b3fb4d3de7\"><code>37b73d5</code></a> test: add e2e test for <code>WEBPACK_SERVE</code> env variable (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4125\">#4125</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f5a9d05f3888cd5c0bb9e974d48680710fdda6f7\"><code>f5a9d05</code></a> chore(deps-dev): bump eslint from 8.4.1 to 8.5.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4121\">#4121</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/c9b959fe15e5778a906d957f832a43384cd90b1b\"><code>c9b959f</code></a> chore(deps): bump ws from 8.3.0 to 8.4.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4124\">#4124</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/42208aab74c5b77382b8e8058e657e478ee62174\"><code>42208aa</code></a> chore(deps-dev): bump lint-staged from 12.1.2 to 12.1.3 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4122\">#4122</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.6.0...v4.7.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.6.0&new-version=4.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2021-12-23T15:11:48Z",
          "tree_id": "b0a4c4856db1f9c4faf3194476535f534bcabd79",
          "url": "https://github.com/boa-dev/boa/commit/baa272c9bbc38ee3d38ce20c890986f739af13e1"
        },
        "date": 1640274009314,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 344.16,
            "range": "± 0.050",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4.2468,
            "range": "± 0.001",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 18.269,
            "range": "± 0.008",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.2693,
            "range": "± 0.001",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 870.27,
            "range": "± 0.420",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 9.6632,
            "range": "± 0.006",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 4.1845,
            "range": "± 0.002",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 592.69,
            "range": "± 0.790",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 547.7,
            "range": "± 0.850",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 13.175,
            "range": "± 0.006",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28.224,
            "range": "± 0.016",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24.775,
            "range": "± 0.009",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "039c46ba7b3d6d672bfe7c6bc395677e1240874b",
          "message": "Removed a bunch of warnings and clippy errors (#1754)\n\nThis Pull Request fixes some warnings and clips errors. It conflicts with the VM/non-VM PR, so should probably go in first, so that this branch gets properly updated and we get the list of real warnings/errors there.",
          "timestamp": "2021-12-23T17:43:15Z",
          "tree_id": "a58638a3e680d9d3775df1ee7a317f4eeeb68ed7",
          "url": "https://github.com/boa-dev/boa/commit/039c46ba7b3d6d672bfe7c6bc395677e1240874b"
        },
        "date": 1640283483296,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 303.96,
            "range": "± 0.120",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3.7571,
            "range": "± 0.002",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 16.09,
            "range": "± 0.009",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.0001,
            "range": "± 0.002",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 768.75,
            "range": "± 0.420",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 8.4105,
            "range": "± 0.007",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 4.7539,
            "range": "± 0.005",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 672.31,
            "range": "± 0.900",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 618.61,
            "range": "± 1.020",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 13.149,
            "range": "± 0.009",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27.686,
            "range": "± 0.009",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24.281,
            "range": "± 0.016",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "949e481be88c48b833ef3daaa9995ade691f672c",
          "message": "Fix some broken links in the profiler documentation (#1762)\n\nThe `measureme` repo changed their file names for their READMEs, so the links were broken. This is now fixed.",
          "timestamp": "2021-12-24T13:05:27Z",
          "tree_id": "feb742e56b12ac5871e669d9e08e811b9f8c790b",
          "url": "https://github.com/boa-dev/boa/commit/949e481be88c48b833ef3daaa9995ade691f672c"
        },
        "date": 1640352839530,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 416.72,
            "range": "± 15.910",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5.5811,
            "range": "± 0.178",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 24.159,
            "range": "± 0.722",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3.1741,
            "range": "± 0.085",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 993.36,
            "range": "± -978.023",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11.801,
            "range": "± 0.358",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 6.1516,
            "range": "± 0.179",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 806.28,
            "range": "± 25.610",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 713.58,
            "range": "± 23.360",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 17.679,
            "range": "± 0.539",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37.76,
            "range": "± 1.274",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 33.18,
            "range": "± 0.648",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "0545f004248c26c4afaf1ca5d9dbe787f4064575",
          "message": "Updated test262 suite and dependencies (#1755)\n\nThis Pull Request updates the Test262 test suite with the latest tests, and updates both the JavaScript and Rust dependencies.",
          "timestamp": "2021-12-24T13:14:36Z",
          "tree_id": "06a9f5b506329571fd3a06976f7ed69ada5dad8c",
          "url": "https://github.com/boa-dev/boa/commit/0545f004248c26c4afaf1ca5d9dbe787f4064575"
        },
        "date": 1640353707148,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 421.71,
            "range": "± 6.010",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5.5901,
            "range": "± 0.192",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 23.487,
            "range": "± 0.644",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.9769,
            "range": "± 0.080",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 991.5,
            "range": "± -978.116",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12.228,
            "range": "± 0.384",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 6.1595,
            "range": "± 0.123",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 734.41,
            "range": "± 18.850",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 691.43,
            "range": "± 24.170",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 18.261,
            "range": "± 0.477",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36.423,
            "range": "± 1.191",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31.451,
            "range": "± 0.729",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "936006+jasonwilliams@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "dfb3df5bf2c920262a0250d4b924201e78373541",
          "message": "Start removing non-VM path (#1747)",
          "timestamp": "2021-12-25T18:56:36+01:00",
          "tree_id": "699f9b045c443fc5d27154b330f12abe1a5ef6c6",
          "url": "https://github.com/boa-dev/boa/commit/dfb3df5bf2c920262a0250d4b924201e78373541"
        },
        "date": 1640456211531,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 394.74,
            "range": "± 2.930",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4.9877,
            "range": "± 0.025",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 16.572,
            "range": "± 0.114",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19.367,
            "range": "± 0.255",
            "unit": "us"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9.7897,
            "range": "± 0.041",
            "unit": "us"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12.194,
            "range": "± 0.063",
            "unit": "us"
          },
          {
            "name": "Array access (Parser)",
            "value": 14.792,
            "range": "± 0.240",
            "unit": "us"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15.992,
            "range": "± 0.101",
            "unit": "us"
          },
          {
            "name": "Array pop (Parser)",
            "value": 173.55,
            "range": "± 1.100",
            "unit": "us"
          },
          {
            "name": "String copy (Parser)",
            "value": 6.606,
            "range": "± 0.078",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34.241,
            "range": "± 0.220",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30.085,
            "range": "± 0.256",
            "unit": "us"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 962.94,
            "range": "± 3.630",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2.8776,
            "range": "± 0.028",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3.3503,
            "range": "± 0.015",
            "unit": "us"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1.9611,
            "range": "± 0.028",
            "unit": "us"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1.6459,
            "range": "± 0.030",
            "unit": "us"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8.3769,
            "range": "± 0.099",
            "unit": "us"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1.4448,
            "range": "± 0.027",
            "unit": "us"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6.182,
            "range": "± 0.126",
            "unit": "us"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5.8261,
            "range": "± 0.099",
            "unit": "us"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5.8707,
            "range": "± 0.092",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 49.969,
            "range": "± 0.792",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3.0927,
            "range": "± 0.048",
            "unit": "ms"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13.883,
            "range": "± 0.232",
            "unit": "us"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1.5393,
            "range": "± 0.023",
            "unit": "ms"
          },
          {
            "name": "String copy (Execution)",
            "value": 6.1732,
            "range": "± 0.093",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1.5995,
            "range": "± 0.021",
            "unit": "ms"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1.5253,
            "range": "± 0.025",
            "unit": "ms"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "50dda0ba7e4a12a044731e1f6b0363403620c551",
          "message": "Using upstream benchmark action (#1753)\n\n* Using upstream benchmark action\r\n\r\n* Updated benchmarks action",
          "timestamp": "2021-12-31T14:10:59+01:00",
          "tree_id": "46d1948f911af692d193904bfbff39a922df9712",
          "url": "https://github.com/boa-dev/boa/commit/50dda0ba7e4a12a044731e1f6b0363403620c551"
        },
        "date": 1640957402332,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4778,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15686,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18479,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10636,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11335,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12243,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7148,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9549,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9278,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11627,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13540,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15159,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159553,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8675,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12536,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6397,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12625,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15936,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15856,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6215,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33137,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28777,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 803,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2412,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2870,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1475,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1567,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1878,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1482,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1484,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1821,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1821,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1445,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2222,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7279,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1784,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2519,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1257,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1668,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2008,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2467,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 968,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5460,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5344,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5240,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45937,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2851316,
            "range": "± 3094",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6423,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6600,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7130,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10082,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10104,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13199,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13226,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10749,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3186127,
            "range": "± 5885",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1344167,
            "range": "± 5352",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6418,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7679,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5594,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5449,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6844,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8722,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2187,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1460586,
            "range": "± 13850",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1347274,
            "range": "± 10698",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "RageKnify@gmail.com",
            "name": "Joã Borges",
            "username": "RageKnify"
          },
          "committer": {
            "email": "RageKnify@gmail.com",
            "name": "Joã Borges",
            "username": "RageKnify"
          },
          "distinct": false,
          "id": "56cd7f38b89599c5d32841f4855f4c648142d17c",
          "message": "Fix bors hanging (#1767)\n\nThis Pull Request fixes the bors hanging we've had recently\r\nThe vm action had been removed but bors was still waiting for it\r\n\r\nIt changes the following:\r\n\r\n- Remove 'Tests on Linux with vm enabled' from the actions to be waited for",
          "timestamp": "2021-12-31T16:50:45Z",
          "tree_id": "129e18bda125f27020faf2a3e21e2d0b5f7fa2e3",
          "url": "https://github.com/boa-dev/boa/commit/56cd7f38b89599c5d32841f4855f4c648142d17c"
        },
        "date": 1640971185215,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 411,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5097,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17377,
            "range": "± 739",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20291,
            "range": "± 876",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11625,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12292,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13138,
            "range": "± 449",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7949,
            "range": "± 368",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10389,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10038,
            "range": "± 269",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12491,
            "range": "± 832",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14981,
            "range": "± 1027",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16626,
            "range": "± 1257",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 182359,
            "range": "± 6111",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9275,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13839,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6812,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13722,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17720,
            "range": "± 683",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17363,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6956,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36235,
            "range": "± 1548",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31771,
            "range": "± 621",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 967,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2974,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3419,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1796,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1920,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2286,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1815,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1810,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2208,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2198,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1749,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2722,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8866,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2161,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3082,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1532,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1980,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2409,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2947,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1185,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6737,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6442,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6555,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 56469,
            "range": "± 2141",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3453209,
            "range": "± 106194",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7897,
            "range": "± 609",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8250,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8517,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12436,
            "range": "± 738",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12479,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16166,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16095,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13145,
            "range": "± 293",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3948839,
            "range": "± 114445",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1635033,
            "range": "± 60447",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7932,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9501,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6929,
            "range": "± 364",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6670,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8347,
            "range": "± 463",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10646,
            "range": "± 480",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2675,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1784708,
            "range": "± 55408",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1643381,
            "range": "± 40050",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d831ff3dc599eb5fbf1d0e01a0120f530e184c17",
          "message": "Bump webpack-dev-server from 4.7.1 to 4.7.2 (#1766)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.7.1 to 4.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.2</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.1...v4.7.2\">4.7.2</a> (2021-12-29)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>apply <code>onAfterSetupMiddleware</code> after <code>setupMiddlewares</code> (as behavior earlier) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f6bc644bb81b966e030d8f8a54d5a99cd61ec8f2\">f6bc644</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.1...v4.7.2\">4.7.2</a> (2021-12-29)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>apply <code>onAfterSetupMiddleware</code> after <code>setupMiddlewares</code> (as behavior earlier) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f6bc644bb81b966e030d8f8a54d5a99cd61ec8f2\">f6bc644</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/75999bb9bb8803de633fcb037405f45a5bf7d029\"><code>75999bb</code></a> chore(release): 4.7.2</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/90a96f7bd8e5338f91ef8e4fd6c2ddc01e8174db\"><code>90a96f7</code></a> ci: fix (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4143\">#4143</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f6bc644bb81b966e030d8f8a54d5a99cd61ec8f2\"><code>f6bc644</code></a> fix: compatible with <code>onAfterSetupMiddleware</code></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/317e4b9d5c94212d2d481e7cea4ab3f40809cca6\"><code>317e4b9</code></a> docs: fix testing instructions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4133\">#4133</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/ff4550e498988d872f04d0fcebc27c1f946c2097\"><code>ff4550e</code></a> test: remove redundant test cases related to 3rd party code (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4131\">#4131</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/0dd1ee6dcff7245eb15b0ca980953e2154cf77a5\"><code>0dd1ee6</code></a> test: add e2e tests for <code>setupExitSignals</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4130\">#4130</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.1...v4.7.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.7.1&new-version=4.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-01T21:40:08Z",
          "tree_id": "0e10ef0c9d7125e1d1b0745ab649df181c8c36c6",
          "url": "https://github.com/boa-dev/boa/commit/d831ff3dc599eb5fbf1d0e01a0120f530e184c17"
        },
        "date": 1641074860057,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4616,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15190,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17604,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10229,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10924,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11790,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6888,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9311,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8893,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11182,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13082,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14635,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153926,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8283,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12075,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6138,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12053,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15338,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15256,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6095,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31784,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27780,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 804,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2392,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2817,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1470,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1577,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1874,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1479,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1481,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1811,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1810,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1441,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2237,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7276,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1779,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2508,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1253,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1667,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2004,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2448,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 968,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5465,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5288,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5252,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46412,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2840190,
            "range": "± 4559",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6441,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6662,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7120,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10074,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10121,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13080,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13161,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10800,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3194023,
            "range": "± 7899",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1345573,
            "range": "± 5338",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6378,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7666,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5553,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5434,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6803,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8649,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2181,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1462413,
            "range": "± 10014",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1348632,
            "range": "± 15442",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "89d91f5b10bae4c85c923d1a7683b8cbd48f701f",
          "message": "Bump benchmark-action/github-action-benchmark from 1.11.2 to 1.11.3 (#1769)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.11.2 to 1.11.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.11.3</h2>\n<p>Fix: fix trailing whitespace characters in cargo benchmarks (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/97\">#97</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.11.3\">v1.11.3</a> - 31 Dec 2021</h1>\n<ul>\n<li><strong>Fix:</strong> Fix trailing whitespace characters in cargo benchmarks (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/97\">#97</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/1c1a8fb0ca538ff5572ed02039d91a610726c19e\"><code>1c1a8fb</code></a> v1.11.3</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.11.2...v1.11.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-03T10:43:36Z",
          "tree_id": "1a62602b4a1462a602e8e0b3173db58b99ce0e61",
          "url": "https://github.com/boa-dev/boa/commit/89d91f5b10bae4c85c923d1a7683b8cbd48f701f"
        },
        "date": 1641208504045,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4777,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15573,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18322,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10580,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11305,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12182,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7237,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9600,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9324,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11588,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13448,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15019,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159461,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8624,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12555,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6353,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12502,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15931,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15814,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6163,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32867,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28523,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 803,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2453,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2821,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1486,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1581,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1891,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1506,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1511,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1819,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1818,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1454,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2251,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7293,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1788,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2526,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1261,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1662,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2007,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2451,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 990,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5547,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5369,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5195,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45731,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2841912,
            "range": "± 39004",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6369,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6545,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6974,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10047,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10086,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13027,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13093,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10699,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3191434,
            "range": "± 5358",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1342082,
            "range": "± 6034",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6395,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7702,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5537,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5370,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6944,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8663,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2196,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1452493,
            "range": "± 8931",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1346863,
            "range": "± 7419",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7fba7c0c45c6a79114d01721f41ca27722fdbd5c",
          "message": "Bump indexmap from 1.7.0 to 1.8.0 (#1776)\n\nBumps [indexmap](https://github.com/bluss/indexmap) from 1.7.0 to 1.8.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/bluss/indexmap/blob/master/RELEASES.rst\">indexmap's changelog</a>.</em></p>\n<blockquote>\n<ul>\n<li>\n<p>1.8.0</p>\n<ul>\n<li>\n<p>The new <code>IndexMap::into_keys</code> and <code>IndexMap::into_values</code> will consume\nthe map into keys or values, respectively, matching Rust 1.54's <code>HashMap</code>\nmethods, by <a href=\"https://github.com/taiki-e\"><code>@​taiki-e</code></a> in PR 195_.</p>\n</li>\n<li>\n<p>More of the iterator types implement <code>Debug</code>, <code>ExactSizeIterator</code>, and\n<code>FusedIterator</code>, by <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a> in PR 196_.</p>\n</li>\n<li>\n<p><code>IndexMap</code> and <code>IndexSet</code> now implement rayon's <code>ParallelDrainRange</code>,\nby <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a> in PR 197_.</p>\n</li>\n<li>\n<p><code>IndexMap::with_hasher</code> and <code>IndexSet::with_hasher</code> are now <code>const</code>\nfunctions, allowing static maps and sets, by <a href=\"https://github.com/mwillsey\"><code>@​mwillsey</code></a> in PR 203_.</p>\n</li>\n<li>\n<p><code>IndexMap</code> and <code>IndexSet</code> now implement <code>From</code> for arrays, matching\nRust 1.56's implementation for <code>HashMap</code>, by <a href=\"https://github.com/rouge8\"><code>@​rouge8</code></a> in PR 205_.</p>\n</li>\n<li>\n<p><code>IndexMap</code> and <code>IndexSet</code> now have methods <code>sort_unstable_keys</code>,\n<code>sort_unstable_by</code>, <code>sorted_unstable_by</code>, and <code>par_*</code> equivalents,\nwhich sort in-place without preserving the order of equal items, by\n<a href=\"https://github.com/bhgomes\"><code>@​bhgomes</code></a> in PR 211_.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>.. _195: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/195\">bluss/indexmap#195</a>\n.. _196: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/196\">bluss/indexmap#196</a>\n.. _197: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/197\">bluss/indexmap#197</a>\n.. _203: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/203\">bluss/indexmap#203</a>\n.. _205: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/205\">bluss/indexmap#205</a>\n.. _211: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/211\">bluss/indexmap#211</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/bluss/indexmap/commit/916d1c96d2070d736c0ab5d5ba294b1c5593f009\"><code>916d1c9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/213\">#213</a> from cuviper/release-1.7.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/5386d2bf703f48550f9ac6e03c4e28b09cbc689e\"><code>5386d2b</code></a> Release 1.8.0 instead</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/f090281240c05639c665170a2c633c96adfacc07\"><code>f090281</code></a> Release 1.7.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/5a14f7bb8af6e3c8c4fe52bdd2978da07126cbbe\"><code>5a14f7b</code></a> Move recent changes to RELEASES.rst</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/13468f20f51666969b588f0bff7b1749726bf8ca\"><code>13468f2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/211\">#211</a> from bhgomes/add-sort-unstable-methods</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/8bb46ca2e4cc192ab86b6dc80015d8b5a424fe4b\"><code>8bb46ca</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/205\">#205</a> from rouge8/from-array</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/6fca269adf18b1dd0ef0e62f5e8744c7cba51725\"><code>6fca269</code></a> No extra space is used in unstable sorts</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/5d2ce528b3c431722581526b175a51528ae0efa0\"><code>5d2ce52</code></a> Require rustc 1.51+ for <code>IndexMap::from(array)</code> and <code>IndexSet::from(array)</code></li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/f0159f656d95d19b681e63b827538f6d0ca3367b\"><code>f0159f6</code></a> Add <code>IndexMap::from(array)</code> and <code>IndexSet::from(array)</code></li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/4d6dde35b59009e6097a58c6ebbb0cb9b549709d\"><code>4d6dde3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/197\">#197</a> from cuviper/par_drain</li>\n<li>Additional commits viewable in <a href=\"https://github.com/bluss/indexmap/compare/1.7.0...1.8.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=indexmap&package-manager=cargo&previous-version=1.7.0&new-version=1.8.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-11T17:41:09Z",
          "tree_id": "dc87106f2a219587c8f3058d1a7bfbd584e9a42c",
          "url": "https://github.com/boa-dev/boa/commit/7fba7c0c45c6a79114d01721f41ca27722fdbd5c"
        },
        "date": 1641925057949,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 323,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4178,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13775,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18264,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9238,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9858,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10713,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7128,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8377,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8031,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10112,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11737,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13172,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 132985,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7550,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10913,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5576,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11051,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13990,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13825,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5459,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32741,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25341,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 807,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2152,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2487,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1318,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1404,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1715,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1327,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1326,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1587,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1587,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1287,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2024,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6089,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1574,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2221,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1109,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1476,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1768,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2149,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 890,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4940,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4808,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4603,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41545,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2532937,
            "range": "± 2988",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5587,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5775,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6135,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8909,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8940,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11743,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11767,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9486,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3010638,
            "range": "± 7840",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1229794,
            "range": "± 5700",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5668,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6760,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4843,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4736,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5932,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7672,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1951,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1291363,
            "range": "± 12190",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1197867,
            "range": "± 9974",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "distinct": false,
          "id": "2300d87e227242ce12c4880ae14ce50e6b698386",
          "message": "add more timers on object functions (#1775)\n\n```\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Item                                           | Self time | % of total time | Time     | Item count |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| run                                            | 14.27ms   | 15.545          | 161.26ms | 56         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__get_own_property__                   | 9.28ms    | 10.115          | 12.67ms  | 5412       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LexicalEnvironment::get_binding_value          | 9.10ms    | 9.918           | 22.00ms  | 1066       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::validate_and_apply_property_descriptor | 6.12ms    | 6.669           | 6.12ms   | 677        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_set                           | 4.07ms    | 4.434           | 39.14ms  | 818        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_get_own_property              | 3.60ms    | 3.922           | 3.60ms   | 5720       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__call__                               | 3.22ms    | 3.505           | 103.95ms | 410        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_define_own_property           | 3.10ms    | 3.379           | 10.90ms  | 677        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_has_property                  | 2.95ms    | 3.209           | 7.17ms   | 1772       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__has_property__                       | 2.85ms    | 3.107           | 10.02ms  | 1772       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_get                           | 2.85ms    | 3.104           | 8.14ms   | 1632       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__get__                                | 2.81ms    | 3.063           | 10.95ms  | 1632       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetName                                 | 2.56ms    | 2.789           | 24.56ms  | 1066       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__define_own_property__                | 2.48ms    | 2.704           | 13.58ms  | 521        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - SetName                                 | 1.81ms    | 1.972           | 9.52ms   | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Call                                    | 1.35ms    | 1.473           | 103.28ms | 356        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__set__                                | 1.29ms    | 1.401           | 40.43ms  | 818        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetPropertyByName                       | 1.24ms    | 1.354           | 4.95ms   | 355        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Date                                           | 1.07ms    | 1.171           | 1.08ms   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__get_prototype_of__                   | 1.06ms    | 1.151           | 1.21ms   | 621        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetPropertyByValue                      | 1.05ms    | 1.143           | 1.91ms   | 154        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| create_intrinsics                              | 871.52µs  | 0.949           | 7.92ms   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Array                                          | 761.02µs  | 0.829           | 763.84µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Opcode retrieval                               | 756.35µs  | 0.824           | 756.35µs | 4941       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Math                                           | 750.16µs  | 0.817           | 753.72µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object                                         | 618.59µs  | 0.674           | 620.77µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| String                                         | 611.83µs  | 0.667           | 614.46µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| RegExp                                         | 419.63µs  | 0.457           | 421.09µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| next()                                         | 339.03µs  | 0.369           | 849.73µs | 96         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| console                                        | 332.59µs  | 0.362           | 334.02µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Identifier                                     | 318.53µs  | 0.347           | 337.39µs | 30         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - DefInitArg                              | 305.43µs  | 0.333           | 305.43µs | 54         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Reflect                                        | 265.70µs  | 0.289           | 267.45µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Dup                                     | 260.49µs  | 0.284           | 260.49µs | 555        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Number                                         | 225.72µs  | 0.246           | 305.09µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BigInt64Array                                  | 220.31µs  | 0.240           | 220.54µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Map                                            | 208.40µs  | 0.227           | 209.97µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushInt8                                | 201.64µs  | 0.220           | 201.64µs | 402        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Set                                            | 196.16µs  | 0.214           | 197.64µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Pop                                     | 191.73µs  | 0.209           | 191.73µs | 455        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Symbol                                         | 186.95µs  | 0.204           | 188.13µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__is_extensible__                      | 159.01µs  | 0.173           | 159.01µs | 677        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - LessThan                                | 152.95µs  | 0.167           | 152.95µs | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_get_prototype_of              | 152.01µs  | 0.166           | 152.01µs | 621        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Main                                           | 150.58µs  | 0.164           | 82.11ms  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Inc                                     | 134.81µs  | 0.147           | 134.81µs | 200        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| AssignmentExpression                           | 113.77µs  | 0.124           | 4.08ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - JumpIfFalse                             | 103.93µs  | 0.113           | 103.93µs | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| function                                       | 103.75µs  | 0.113           | 104.33µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| MemberExpression                               | 97.28µs   | 0.106           | 2.30ms   | 26         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: next                          | 94.48µs   | 0.103           | 100.99µs | 6          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| From<JsObject>                                 | 83.55µs   | 0.091           | 83.55µs  | 2582       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Jump                                    | 83.45µs   | 0.091           | 83.45µs  | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrayBuffer                                    | 82.91µs   | 0.090           | 84.38µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Realm::create                                  | 82.24µs   | 0.090           | 93.74µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BigInt                                         | 79.60µs   | 0.087           | 81.04µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LeftHandSIdeExpression                         | 76.08µs   | 0.083           | 3.04ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| NumberLiteral                                  | 70.64µs   | 0.077           | 99.63µs  | 7          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| MultiplicativeExpression                       | 68.45µs   | 0.075           | 3.38ms   | 24         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Mul                                     | 66.50µs   | 0.072           | 66.50µs  | 100        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| StatementList                                  | 66.01µs   | 0.072           | 3.70ms   | 3          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GreaterThan                             | 61.54µs   | 0.067           | 61.54µs  | 100        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetFunction                             | 52.91µs   | 0.058           | 175.00µs | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Float32Array                                   | 52.62µs   | 0.057           | 52.82µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| From<String>                                   | 50.52µs   | 0.055           | 50.52µs  | 431        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ExponentiationExpression                       | 48.15µs   | 0.052           | 3.31ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| PrimaryExpression                              | 47.01µs   | 0.051           | 1.82ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - LogicalAnd                              | 46.79µs   | 0.051           | 46.79µs  | 100        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Boolean                                        | 42.78µs   | 0.047           | 43.08µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Int8Array                                      | 41.96µs   | 0.046           | 42.18µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Float64Array                                   | 41.36µs   | 0.045           | 41.57µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BigUint64Array                                 | 41.12µs   | 0.045           | 41.34µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint16Array                                    | 40.82µs   | 0.044           | 41.03µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint8Array                                     | 40.68µs   | 0.044           | 40.89µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint32Array                                    | 40.61µs   | 0.044           | 40.81µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| JSON                                           | 40.59µs   | 0.044           | 41.73µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Int32Array                                     | 40.57µs   | 0.044           | 40.79µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint8ClampedArray                              | 40.47µs   | 0.044           | 40.69µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Int16Array                                     | 40.37µs   | 0.044           | 40.57µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BitwiseANDExpression                           | 39.90µs   | 0.043           | 3.56ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Error                                          | 39.58µs   | 0.043           | 40.62µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| UpdateExpression                               | 39.50µs   | 0.043           | 3.08ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - RestParameterPop                        | 39.29µs   | 0.043           | 39.29µs  | 55         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Arguments                                      | 37.25µs   | 0.041           | 689.94µs | 7          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Relation Expression                            | 36.74µs   | 0.040           | 3.49ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| AdditiveExpression                             | 36.23µs   | 0.039           | 3.42ms   | 24         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| SyntaxError                                    | 34.38µs   | 0.037           | 35.85µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ShiftExpression                                | 34.17µs   | 0.037           | 3.45ms   | 24         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ReferenceError                                 | 33.10µs   | 0.036           | 34.17µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| TypeError                                      | 32.79µs   | 0.036           | 33.79µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| EvalError                                      | 32.17µs   | 0.035           | 33.43µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| URIError                                       | 32.05µs   | 0.035           | 33.35µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ShortCircuitExpression                         | 32.02µs   | 0.035           | 3.65ms   | 20         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BitwiseORExpression                            | 30.85µs   | 0.034           | 3.62ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| EqualityExpression                             | 30.82µs   | 0.034           | 3.52ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BitwiseXORExpression                           | 30.80µs   | 0.034           | 3.59ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ConditionalExpression                          | 29.84µs   | 0.033           | 3.68ms   | 20         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Operator                                       | 28.55µs   | 0.031           | 30.56µs  | 13         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ForStatement                                   | 28.09µs   | 0.031           | 1.18ms   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Proxy                                          | 28.02µs   | 0.031           | 28.19µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_char()                            | 27.88µs   | 0.030           | 27.88µs  | 147        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_is_ascii_pred()                   | 26.11µs   | 0.028           | 27.33µs  | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| VariableStatement                              | 25.01µs   | 0.027           | 224.24µs | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Intl                                           | 23.92µs   | 0.026           | 24.90µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Statement                                      | 23.60µs   | 0.026           | 4.26ms   | 9          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| RangeError                                     | 23.47µs   | 0.026           | 24.56µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - DefInitVar                              | 20.60µs   | 0.022           | 49.41µs  | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Return                                  | 20.47µs   | 0.022           | 20.47µs  | 55         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Expression                                     | 20.13µs   | 0.022           | 3.27ms   | 13         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| CallExpression                                 | 19.32µs   | 0.021           | 714.52µs | 6          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: parseInt                      | 19.31µs   | 0.021           | 20.46µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Iterator Prototype                             | 18.91µs   | 0.021           | 18.99µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| String Iterator                                | 18.66µs   | 0.020           | 37.92µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: isNaN                         | 18.43µs   | 0.020           | 19.50µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: parseFloat                    | 18.37µs   | 0.020           | 19.41µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: isFinite                      | 18.11µs   | 0.020           | 19.13µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrowFunction                                  | 16.54µs   | 0.018           | 80.56µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_is()                              | 16.24µs   | 0.018           | 16.40µs  | 5          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushZero                                | 15.39µs   | 0.017           | 15.39µs  | 56         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushUndefined                           | 13.76µs   | 0.015           | 13.76µs  | 55         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| UnaryExpression                                | 11.52µs   | 0.013           | 3.75ms   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LexicalEnvironment::new                        | 11.15µs   | 0.012           | 11.20µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::peek_char()                            | 10.27µs   | 0.011           | 10.27µs  | 78         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LexicalEnvironment::has_binding                | 10.22µs   | 0.011           | 28.81µs  | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrayIterator                                  | 10.09µs   | 0.011           | 28.84µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| StatementListItem                              | 9.83µs    | 0.011           | 3.57ms   | 7          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__construct__                          | 9.80µs    | 0.011           | 31.22µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushDeclarativeEnvironment              | 9.31µs    | 0.010           | 9.71µs   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushNewArray                            | 9.19µs    | 0.010           | 24.97µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ExpressionStatement                            | 9.06µs    | 0.010           | 2.80ms   | 5          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ForInIterator                                  | 8.71µs    | 0.009           | 26.32µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| SetIterator                                    | 8.67µs    | 0.009           | 26.13µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| RegExp String Iterator                         | 8.47µs    | 0.009           | 25.15µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| MapIterator                                    | 8.47µs    | 0.009           | 25.54µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| FunctionExpression                             | 7.08µs    | 0.008           | 1.77ms   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| SpreadLiteral                                  | 6.89µs    | 0.008           | 23.29µs  | 5          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| new_declarative_environment                    | 6.76µs    | 0.007           | 6.76µs   | 59         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| FunctionStatementList                          | 5.80µs    | 0.006           | 1.82ms   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - New                                     | 5.65µs    | 0.006           | 36.90µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::peek()                                 | 4.65µs    | 0.005           | 4.65µs   | 59         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| FormalParameters                               | 4.54µs    | 0.005           | 6.33µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - This                                    | 3.50µs    | 0.004           | 3.53µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::get_prototype_from_constructor         | 3.42µs    | 0.004           | 9.07µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::set_goal()                             | 3.33µs    | 0.004           | 3.33µs   | 99         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Initializer                                    | 3.29µs    | 0.004           | 161.59µs | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BindingIdentifier                              | 3.27µs    | 0.004           | 3.27µs   | 3          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrayLiteral                                   | 2.42µs    | 0.003           | 3.98µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| globalThis                                     | 1.35µs    | 0.001           | 1.38µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PopEnvironment                          | 1.23µs    | 0.001           | 1.23µs   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_byte()                            | 943.00ns  | 0.001           | 943.00ns | 11         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Swap                                    | 841.00ns  | 0.001           | 841.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - LogicalNot                              | 661.00ns  | 0.001           | 661.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PopOnReturnAdd                          | 351.00ns  | 0.000           | 351.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PopOnReturnSub                          | 211.00ns  | 0.000           | 211.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Infinity                                       | 160.00ns  | 0.000           | 160.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| undefined                                      | 140.00ns  | 0.000           | 140.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| NaN                                            | 130.00ns  | 0.000           | 130.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Execute                                        | 70.00ns   | 0.000           | 70.00ns  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Compilation                                    | 40.00ns   | 0.000           | 40.00ns  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\nTotal cpu time: 91.797457ms\r\n+------+---------------+\r\n| Item | Artifact Size |\r\n+------+---------------+\r\n```",
          "timestamp": "2022-01-11T21:43:47Z",
          "tree_id": "fd056e45d3fd22bfe6f0d7a60ac8ae083cc64090",
          "url": "https://github.com/boa-dev/boa/commit/2300d87e227242ce12c4880ae14ce50e6b698386"
        },
        "date": 1641939228850,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4077,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13234,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15496,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8982,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9664,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10359,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6145,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9234,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8861,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11067,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11456,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14518,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 132492,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8180,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11932,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6065,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12111,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15435,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15169,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6142,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31695,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27783,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 783,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2369,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2796,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1471,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1568,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1922,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1494,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1494,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1800,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1795,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1443,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6920,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1762,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2503,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1242,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1651,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1985,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2427,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1012,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5553,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5382,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5187,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46425,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2849904,
            "range": "± 3756",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6381,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6621,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7087,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10090,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10073,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13310,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13164,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10696,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3409933,
            "range": "± 8969",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1388080,
            "range": "± 4373",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6429,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7746,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5480,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5387,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6735,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8728,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2185,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1454784,
            "range": "± 11334",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1344273,
            "range": "± 8873",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "RageKnify@gmail.com",
            "name": "RageKnify",
            "username": "RageKnify"
          },
          "committer": {
            "email": "RageKnify@gmail.com",
            "name": "RageKnify",
            "username": "RageKnify"
          },
          "distinct": true,
          "id": "7f18d7a85168e02b0da51abfdeedcd1c5e96db0c",
          "message": "Refactor: optimize println!()\n\nClippy 1.58.0 complains about `format!()` inside `println!()` being\ninefficient",
          "timestamp": "2022-01-13T21:28:17+01:00",
          "tree_id": "f23b325ac2d437d413847e03103203ccf1c8230e",
          "url": "https://github.com/boa-dev/boa/commit/7f18d7a85168e02b0da51abfdeedcd1c5e96db0c"
        },
        "date": 1642107292450,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 396,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5016,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16910,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19426,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11346,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12109,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12917,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7681,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10220,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9767,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12260,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14588,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16518,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 178177,
            "range": "± 3783",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9175,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13514,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6725,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13431,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17054,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16955,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6898,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34881,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30422,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 924,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2852,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3339,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1793,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1889,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2269,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1743,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1755,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2133,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2128,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1705,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2601,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8532,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2109,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2968,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1479,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1943,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2323,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2919,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1189,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6406,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6296,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6155,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54980,
            "range": "± 434",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3357371,
            "range": "± 31645",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7644,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7954,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8364,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11962,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12044,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15514,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15448,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12927,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3890966,
            "range": "± 55340",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1590140,
            "range": "± 18843",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7731,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9319,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6711,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6343,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7968,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10301,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2591,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1712461,
            "range": "± 23130",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1577098,
            "range": "± 24907",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "4365c7d3885506813187cf2699f662c255a29e1a",
          "message": "Add proxy handling in `isArray` method (#1777)\n\nIt changes the following:\r\n\r\n- Add handling for proxy objects to the abstract `is_array` operation.\r\n- Implement the abstract `is_array` operation for `JsValue` and `JsObject` to avoid clones.\r\n- Fix some builtin function lengths.",
          "timestamp": "2022-01-13T20:43:14Z",
          "tree_id": "99e448cde121ee14173a7e9662938da9c8a62279",
          "url": "https://github.com/boa-dev/boa/commit/4365c7d3885506813187cf2699f662c255a29e1a"
        },
        "date": 1642108668590,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 296,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4130,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13265,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15553,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9025,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9642,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10378,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6129,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8169,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7798,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9733,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11660,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12955,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137105,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7331,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12058,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6177,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10556,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13495,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13282,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5366,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28008,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24520,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 684,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2131,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2518,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1312,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1411,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1662,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1304,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1304,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1595,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1593,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1268,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1963,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6098,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1569,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2248,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1101,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1474,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1771,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2166,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 876,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4909,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5367,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5233,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41274,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2556266,
            "range": "± 2954",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5606,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6607,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7081,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10136,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8898,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11633,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11542,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9470,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2886675,
            "range": "± 7946",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1351739,
            "range": "± 4438",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6430,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7736,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4952,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5334,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6859,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8592,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1957,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1281208,
            "range": "± 9885",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1180039,
            "range": "± 13898",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4bae3bbe99a026c8aca7e685763fd27625dbc8e3",
          "message": "Bump getrandom from 0.2.3 to 0.2.4 (#1783)\n\nBumps [getrandom](https://github.com/rust-random/getrandom) from 0.2.3 to 0.2.4.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/getrandom/blob/master/CHANGELOG.md\">getrandom's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.2.4] - 2021-12-13</h2>\n<h3>Changed</h3>\n<ul>\n<li>Use explicit imports in the <code>js</code> backend <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/220\">#220</a></li>\n<li>Use <code>/dev/urandom</code> on Redox instead of <code>rand:</code> <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/222\">#222</a></li>\n<li>Use <code>NonZeroU32::new_unchecked</code> to convert wasi error <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/233\">#233</a></li>\n</ul>\n<h3>Added</h3>\n<ul>\n<li>SOLID targets (<code>*-kmc-solid_*</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/235\">#235</a></li>\n<li>Limited Hermit (<code>x86_64-unknown-hermit</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/236\">#236</a></li>\n</ul>\n<p><a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/220\">#220</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/220\">rust-random/getrandom#220</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/222\">#222</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/222\">rust-random/getrandom#222</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/233\">#233</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/233\">rust-random/getrandom#233</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/235\">#235</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/235\">rust-random/getrandom#235</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/236\">#236</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/236\">rust-random/getrandom#236</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/b9c7c0c13d76eead06c4433368fd5c45bdbe7651\"><code>b9c7c0c</code></a> Release v0.2.4 (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/238\">#238</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/9110af54d199cbdba541039012e218a2223b744f\"><code>9110af5</code></a> Fix get_rng_fd comment typo (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/240\">#240</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/ec445bb0acb738a7cc97102084292fe6f18d2afc\"><code>ec445bb</code></a> Added x86_64-unknown-hermit support (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/236\">#236</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/f5e33009edc2ac5ea59f7dde68709e9572b94458\"><code>f5e3300</code></a> Add SOLID target support (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/235\">#235</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/0d0404be5a7f5024301b433b0941920318309ff8\"><code>0d0404b</code></a> Use <code>NonZeroU32::new_unchecked</code> to convert wasi error (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/233\">#233</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/e4004f41faed8ec4f6336cfab8ea11e18102392d\"><code>e4004f4</code></a> redox: Switch to /dev/urandom (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/30308ae845b0bf3839e5a92120559eaf56048c28\"><code>30308ae</code></a> js: Explictly list all dependancies used with the &quot;js&quot; feature (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/220\">#220</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/dcf452bb14f55abdc7dde94c8bb4880dbec581f9\"><code>dcf452b</code></a> fix some typos (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/218\">#218</a>)</li>\n<li>See full diff in <a href=\"https://github.com/rust-random/getrandom/compare/v0.2.3...v0.2.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=getrandom&package-manager=cargo&previous-version=0.2.3&new-version=0.2.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-14T13:55:38Z",
          "tree_id": "10581705dd0f7773cc50ca5d64098fa0ed1b20fc",
          "url": "https://github.com/boa-dev/boa/commit/4bae3bbe99a026c8aca7e685763fd27625dbc8e3"
        },
        "date": 1642170555383,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 343,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4637,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15061,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17374,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10168,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10876,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11853,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6927,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9295,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8963,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11211,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12938,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14476,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151204,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8285,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11997,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6087,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11979,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15247,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15277,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5996,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31608,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27544,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 791,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2432,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2864,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1499,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1587,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1889,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1504,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1499,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1831,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1846,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1444,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2212,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7026,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1789,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2540,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1251,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1699,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2062,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2530,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 988,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5552,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5344,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5237,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46551,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2863157,
            "range": "± 4169",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6478,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6592,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7076,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10174,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10209,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13132,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13131,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10901,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3220496,
            "range": "± 3796",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339330,
            "range": "± 4710",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6468,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7824,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5646,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5430,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6830,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8624,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2238,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1458271,
            "range": "± 9496",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1340307,
            "range": "± 10807",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "2fda7b3e3f21eb8285843df26df556e32a513868",
          "message": "Bump crazy-max/ghaction-github-pages from 2.5.0 to 2.6.0 (#1782)\n\nBumps [crazy-max/ghaction-github-pages](https://github.com/crazy-max/ghaction-github-pages) from 2.5.0 to 2.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/crazy-max/ghaction-github-pages/releases\">crazy-max/ghaction-github-pages's releases</a>.</em></p>\n<blockquote>\n<h2>v2.6.0</h2>\n<ul>\n<li>Add <code>absolute_build_dir</code> and <code>follow_symlinks</code> inputs (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/161\">#161</a>)</li>\n<li>Bump <code>@​actions/exec</code> from 1.0.4 to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/152\">#152</a>)</li>\n<li>Bump <code>@​actions/core</code> from 1.3.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/154\">#154</a> <a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/156\">#156</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/crazy-max/ghaction-github-pages/blob/dev/CHANGELOG.md\">crazy-max/ghaction-github-pages's changelog</a>.</em></p>\n<blockquote>\n<h2>2.6.0 (2022/01/13)</h2>\n<ul>\n<li>Add <code>absolute_build_dir</code> and <code>follow_symlinks</code> inputs (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/161\">#161</a>)</li>\n<li>Bump <code>@​actions/exec</code> from 1.0.4 to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/152\">#152</a>)</li>\n<li>Bump <code>@​actions/core</code> from 1.3.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/154\">#154</a> <a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/156\">#156</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/a117e4aa1fb4854d021546d2abdfac95be568a3a\"><code>a117e4a</code></a> Update CHANGELOG</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/b26115d93559ced239640d12e613ef00b9b6d4cb\"><code>b26115d</code></a> Update LICENSE</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/0c20c87f978dc85e4b78d5bf7c156de15b2f169e\"><code>0c20c87</code></a> Add input options related to <code>copy()</code> (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/161\">#161</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/cde164fd08931bfb465c1102a277a4173e956b03\"><code>cde164f</code></a> Bump <code>@​actions/core</code> from 1.5.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/156\">#156</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/a28ceb62e63d540a0182126a3315defa095eff76\"><code>a28ceb6</code></a> Update ci workflow</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/1ae239f7b822f4ef2d57ca2c7792713696508b10\"><code>1ae239f</code></a> Fix build.Dockerfile</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/8e7a38741f9cdbd9b6c87b43cdc405706dbed1ed\"><code>8e7a387</code></a> Bump <code>@​actions/exec</code> from 1.0.4 to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/152\">#152</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/80513f63a652257747ffc41bce197f9b7365a2e0\"><code>80513f6</code></a> Bump <code>@​actions/core</code> from 1.3.0 to 1.5.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/154\">#154</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/c76c2e60dde5c4fa62585af514323433ccd73353\"><code>c76c2e6</code></a> Update README</li>\n<li>See full diff in <a href=\"https://github.com/crazy-max/ghaction-github-pages/compare/v2.5.0...v2.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=crazy-max/ghaction-github-pages&package-manager=github_actions&previous-version=2.5.0&new-version=2.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-14T14:08:08Z",
          "tree_id": "60c1465cc2c638b905e80772af436982fe45bdfe",
          "url": "https://github.com/boa-dev/boa/commit/2fda7b3e3f21eb8285843df26df556e32a513868"
        },
        "date": 1642171134282,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 347,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4140,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14851,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17394,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10075,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10775,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11545,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6918,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9062,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8861,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9683,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12963,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14421,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154150,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7139,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11868,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6045,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11957,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15243,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15042,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5972,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31267,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27510,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 837,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2215,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2946,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1562,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1649,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1967,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1548,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1549,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1882,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1884,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1510,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2306,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7113,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1859,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2623,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1320,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1690,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2081,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2509,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 993,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5644,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5452,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5183,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46870,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2878695,
            "range": "± 4875",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6441,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6661,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6977,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10276,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10152,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13512,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13413,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10912,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3222043,
            "range": "± 10626",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339205,
            "range": "± 6004",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6516,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7015,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5719,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5529,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6866,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8728,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2249,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1460080,
            "range": "± 8018",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1195727,
            "range": "± 9039",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "5c4d970119df1ef3a951ae2803fab2d15758ac92",
          "message": "Bump serde_json from 1.0.73 to 1.0.75 (#1785)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.73 to 1.0.75.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.74</h2>\n<ul>\n<li>Allow creating RawValues from references to unsized values (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/841\">#841</a>, thanks <a href=\"https://github.com/EFanZh\"><code>@​EFanZh</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/a22b686f499e12146cf9a8932d2aebce7c9f2fc3\"><code>a22b686</code></a> Release 1.0.75</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/36c43bfed5aa695f8d7a8138de585d425b042ed3\"><code>36c43bf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/848\">#848</a> from serde-rs/num</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/d54138145514758ea9475baf77cd5bf4788e9eaf\"><code>d541381</code></a> Deserialize small numbers as integers in arbitrary_precision</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/0ca5a69d734c4f5a0185e93de491b45e25ca39b6\"><code>0ca5a69</code></a> Add regression test for issue 845</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/66919777d0c31addd190c7a48ec78145a270294d\"><code>6691977</code></a> Disable buggy iter_not_returning_iterator lint</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/aebe84cb09663d0c3371273fb20d838c2e752bcd\"><code>aebe84c</code></a> Raise toolchain version for preserve_order to rust 1.46</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/3f459308f5055e9a4b1b611a77dad07132011e8d\"><code>3f45930</code></a> Set miriflags once for whole miri job</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/c79d9ad2e1da0ea3d8e21841404df78ba6f82435\"><code>c79d9ad</code></a> Run miri also with some features enabled</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/58d40de6ed22bf0c80bbe2443dd00f265281aa2d\"><code>58d40de</code></a> Release 1.0.74</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/ef7794f87f43d22fc74d1e38aa2cec1d6bcec12e\"><code>ef7794f</code></a> Detect warnings in CI</li>\n<li>Additional commits viewable in <a href=\"https://github.com/serde-rs/json/compare/v1.0.73...v1.0.75\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.73&new-version=1.0.75)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-17T23:20:06Z",
          "tree_id": "88712b77b2ee9b6c127e1d00caae016f13738b51",
          "url": "https://github.com/boa-dev/boa/commit/5c4d970119df1ef3a951ae2803fab2d15758ac92"
        },
        "date": 1642463818846,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 392,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4674,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14941,
            "range": "± 1625",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16484,
            "range": "± 1038",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10430,
            "range": "± 1715",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10410,
            "range": "± 1221",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11511,
            "range": "± 1123",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6498,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8826,
            "range": "± 624",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8831,
            "range": "± 834",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10491,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12674,
            "range": "± 990",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14131,
            "range": "± 1122",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 155442,
            "range": "± 12818",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8631,
            "range": "± 647",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13166,
            "range": "± 1069",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7028,
            "range": "± 896",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13292,
            "range": "± 720",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14721,
            "range": "± 1227",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15211,
            "range": "± 1346",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6108,
            "range": "± 511",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30553,
            "range": "± 2005",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27604,
            "range": "± 2252",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 853,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2428,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3098,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1604,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1655,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2143,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1739,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1762,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2252,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2199,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1861,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2692,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8120,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2115,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2836,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1357,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1743,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2142,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2697,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1047,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6075,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6451,
            "range": "± 489",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6850,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 56842,
            "range": "± 5941",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3878605,
            "range": "± 263920",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8253,
            "range": "± 576",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7782,
            "range": "± 674",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8773,
            "range": "± 715",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11649,
            "range": "± 906",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11411,
            "range": "± 793",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14827,
            "range": "± 834",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15543,
            "range": "± 1194",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13061,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3562747,
            "range": "± 306661",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1421536,
            "range": "± 85992",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7903,
            "range": "± 581",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9271,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 7352,
            "range": "± 859",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 7568,
            "range": "± 1380",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 9211,
            "range": "± 559",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10991,
            "range": "± 778",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2330,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1487087,
            "range": "± 120274",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1435492,
            "range": "± 104179",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "dc005e17ef91669316d6af3fc367cfb5ae62bda6",
          "message": "Bump structopt from 0.3.25 to 0.3.26 (#1786)\n\nBumps [structopt](https://github.com/TeXitoi/structopt) from 0.3.25 to 0.3.26.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/97e92a3755a65f8ea44c994fd403208e7d97f561\"><code>97e92a3</code></a> v0.3.26</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/2bdd6b49adfa88d0d5a8e39b14a5fb1999a32eaa\"><code>2bdd6b4</code></a> Clarification on maintenance since clap v3 is out</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/2736281a647cecb23ae1c17bbaf625b18ebf4b38\"><code>2736281</code></a> Upgrade heck</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/358cccf9af0dd0a149b66e2a46bfa3f7e3137fa6\"><code>358cccf</code></a> [docs] Add output to all examples</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/4c1a8fcb2f3f9d1359c81f5ccb12657a0f8e7a8f\"><code>4c1a8fc</code></a> Link to the clap API in the documentation that says all clap methods can be used</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/ffd4772156a26ff3845fb36d2f5dbd113fa579e1\"><code>ffd4772</code></a> Typo</li>\n<li>See full diff in <a href=\"https://github.com/TeXitoi/structopt/compare/v0.3.25...v0.3.26\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=structopt&package-manager=cargo&previous-version=0.3.25&new-version=0.3.26)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-19T19:21:54Z",
          "tree_id": "3ae1d750f8d116162bdadbfeaa7dfb9eb709d8e1",
          "url": "https://github.com/boa-dev/boa/commit/dc005e17ef91669316d6af3fc367cfb5ae62bda6"
        },
        "date": 1642622273525,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 394,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5120,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16606,
            "range": "± 526",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19168,
            "range": "± 1055",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11298,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11937,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13077,
            "range": "± 1043",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7482,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10012,
            "range": "± 707",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9788,
            "range": "± 513",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12234,
            "range": "± 502",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14424,
            "range": "± 556",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15949,
            "range": "± 755",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 172462,
            "range": "± 11554",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9179,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13136,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6772,
            "range": "± 335",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13045,
            "range": "± 458",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16666,
            "range": "± 562",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16683,
            "range": "± 537",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6709,
            "range": "± 1026",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34465,
            "range": "± 1371",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31289,
            "range": "± 2880",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 968,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2890,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3339,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1854,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1940,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2270,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1813,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1792,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2246,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2237,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1796,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2667,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7934,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2076,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3008,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1559,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1959,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2364,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2813,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1084,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6350,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6237,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6383,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54197,
            "range": "± 1710",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3543107,
            "range": "± 140922",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7825,
            "range": "± 225",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8078,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8705,
            "range": "± 743",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11541,
            "range": "± 409",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11606,
            "range": "± 451",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15013,
            "range": "± 876",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15083,
            "range": "± 550",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12700,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3520821,
            "range": "± 172668",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1455619,
            "range": "± 44950",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7632,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8986,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6816,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6457,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8015,
            "range": "± 453",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10124,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2523,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1647124,
            "range": "± 73793",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1529273,
            "range": "± 87772",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "nguyeste008@students.garlandisd.net",
            "name": "Steven nguyen",
            "username": "icecream17"
          },
          "committer": {
            "email": "nguyeste008@students.garlandisd.net",
            "name": "Steven nguyen",
            "username": "icecream17"
          },
          "distinct": false,
          "id": "01e0480cd8d6eaca46f738e84e876a217fed525f",
          "message": "Copy/paste fix in Proxy error message (#1787)\n\n(Really small self-explanatory change - maybe the commit message could be better)\r\n\r\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nIt changes the following:\r\n\r\nWhen calling `new Proxy(undefined, {})` the error message now refers to the target `undefined` instead of the handler `{}`",
          "timestamp": "2022-01-19T19:34:27Z",
          "tree_id": "4836275ae1820514a1e7e4b38647dd06e0f57afb",
          "url": "https://github.com/boa-dev/boa/commit/01e0480cd8d6eaca46f738e84e876a217fed525f"
        },
        "date": 1642622937610,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 411,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5315,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17655,
            "range": "± 926",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20062,
            "range": "± 831",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11990,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12445,
            "range": "± 751",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13539,
            "range": "± 622",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7880,
            "range": "± 402",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10619,
            "range": "± 458",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10383,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12859,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15066,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16627,
            "range": "± 585",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 185428,
            "range": "± 6672",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9499,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13593,
            "range": "± 586",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7074,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13916,
            "range": "± 495",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17519,
            "range": "± 632",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17507,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7126,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36406,
            "range": "± 1190",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31850,
            "range": "± 1360",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1035,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3108,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3551,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1963,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2089,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2426,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1949,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1927,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2366,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2383,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1913,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2833,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8649,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2213,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3125,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1652,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 2054,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2435,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2995,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1141,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6751,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6461,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6777,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 58235,
            "range": "± 2694",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3753093,
            "range": "± 156749",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8288,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8542,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 9087,
            "range": "± 351",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12205,
            "range": "± 575",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12069,
            "range": "± 651",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15986,
            "range": "± 1303",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15583,
            "range": "± 786",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13327,
            "range": "± 631",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3697567,
            "range": "± 126517",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1569706,
            "range": "± 62201",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 8195,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9597,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 7001,
            "range": "± 326",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6748,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8649,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10820,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2667,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1724157,
            "range": "± 63016",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1578252,
            "range": "± 74110",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "48185f393dbac48c4199ee5bda596240961c9f04",
          "message": "Lexer string interning (#1758)\n\nThis Pull Request is part of #279.\r\n\r\n It adds a string interner to Boa, which allows many types to not contain heap-allocated strings, and just contain a `NonZeroUsize` instead. This can move types to the stack (hopefully I'll be able to move `Token`, for example, maybe some `Node` types too.\r\n\r\nNote that the internet is for now only available in the lexer. Next steps (in this PR or future ones) would include also using interning in the parser, and finally in execution. The idea is that strings should be represented with a `Sym` until they are displayed.\r\n\r\nTalking about display. I have changed the `ParseError` type in order to not contain anything that could contain a `Sym` (basically tokens), which might be a bit faster, but what is important is that we don't depend on the interner when displaying errors.\r\n\r\nThe issue I have now is in order to display tokens. This requires the interner if we want to know identifiers, for example. The issue here is that Rust doesn't allow using a `fmt::Formatter` (only in nightly), which is making my head hurt. Maybe someone of you can find a better way of doing this.\r\n\r\nThen, about `cursor.expect()`, this is the only place where we don't have the expected token type as a static string, so it's failing to compile. We have the option of changing the type definition of `ParseError` to contain an owned string, but maybe we can avoid this by having a `&'static str` come from a `TokenKind` with the default values, such as \"identifier\" for an identifier. I wanted for you to think about it and maybe we can just add that and avoid allocations there.\r\n\r\nOh, and this depends on the VM-only branch, so that has to be merged before :)\r\n\r\nAnother thing to check: should the interner be in its own module?",
          "timestamp": "2022-01-22T18:03:31Z",
          "tree_id": "c4f7e377c97d74570d718aa5ebaae3244c7517a3",
          "url": "https://github.com/boa-dev/boa/commit/48185f393dbac48c4199ee5bda596240961c9f04"
        },
        "date": 1642876868145,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 350,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4374,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14408,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16717,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9524,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10211,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10968,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6577,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8700,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8445,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10488,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12349,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13939,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144548,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7892,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11556,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5854,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11554,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14787,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14527,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5784,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30232,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26515,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 795,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2432,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2853,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1502,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1607,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1907,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1513,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1846,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1849,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1438,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2240,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6865,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1797,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2550,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1264,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1678,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2019,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2486,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 987,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5526,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5375,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5352,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46290,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2885870,
            "range": "± 4810",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6453,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6811,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7127,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10269,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10332,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13452,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13412,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11010,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3324860,
            "range": "± 8520",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1365574,
            "range": "± 8156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6473,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7775,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5591,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5367,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6836,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8699,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2192,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1482210,
            "range": "± 11301",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1369734,
            "range": "± 7619",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "raskad",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "raskad",
            "username": "Razican"
          },
          "distinct": false,
          "id": "80794e5ba59cc98b00808e9cd877674fc951669c",
          "message": "Adjust `compile` and `execute` to avoid clones (#1778)\n\nIt changes the following:\r\n\r\n- Adjust the `context` methods `compile` and `execute` to avoid clones on `StatementList` and `CodeBlock`\r\n\r\n\n\nCo-authored-by: raskad <32105367+raskad@users.noreply.github.com>",
          "timestamp": "2022-01-23T18:37:54Z",
          "tree_id": "9eab2f418659e940d3e33a7b11eabefa44f2ca35",
          "url": "https://github.com/boa-dev/boa/commit/80794e5ba59cc98b00808e9cd877674fc951669c"
        },
        "date": 1642964877273,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 340,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4375,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14185,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16543,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9439,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10154,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10951,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6609,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8750,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8454,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10387,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12162,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13749,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138719,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7911,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11334,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5918,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11397,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14645,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14372,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5688,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29299,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25743,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 663,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1582,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1883,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1171,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1210,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1419,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1200,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1200,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1373,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1370,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1002,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1460,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2985,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1327,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1824,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1022,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 879,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1010,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1376,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 369,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3242,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3250,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4447,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 40664,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2509815,
            "range": "± 4758",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5585,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5739,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6124,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8898,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8965,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11584,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11587,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9337,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2867846,
            "range": "± 7816",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1187717,
            "range": "± 6257",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6142,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7483,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4679,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4523,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5797,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7664,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1766,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1296466,
            "range": "± 12728",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1198124,
            "range": "± 6884",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "e92cff592078106d6ada1387d0bf8b779de2596a",
          "message": "Interner support in the parser (#1765)\n\nThis builds on top of #1758 to try to bring #1763 to life.\r\n\r\nSomething that should probably be done here would be to convert `JsString` to a `Sym` internally. Then, further optimizations could be done adding common strings to a custom interner type (those that we know statically).\r\n\r\nThis is definitely work in progress, but I would like to have feedback on the API, and feel free to contribute.\n\nCo-authored-by: raskad <32105367+raskad@users.noreply.github.com>",
          "timestamp": "2022-01-23T22:45:14Z",
          "tree_id": "192cac2a97f3d8212227e1e5c52cee20390bd8dc",
          "url": "https://github.com/boa-dev/boa/commit/e92cff592078106d6ada1387d0bf8b779de2596a"
        },
        "date": 1642980033340,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 339,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4326,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14016,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16251,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9464,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10099,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10842,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6479,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8580,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8209,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10288,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12255,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13593,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143047,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7628,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11042,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5707,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11274,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14447,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12446,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5091,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29388,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25776,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 699,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1477,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1792,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1011,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1046,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1190,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1006,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1015,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1145,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1141,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 865,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1194,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2960,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1290,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1680,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1039,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 757,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 878,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1183,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 411,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2905,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2521,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4316,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46056,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2821148,
            "range": "± 4746",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6217,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6464,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6936,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8700,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9913,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13003,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11515,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9423,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2928339,
            "range": "± 7724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1198671,
            "range": "± 3709",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5496,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7423,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5252,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4815,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6059,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7594,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1974,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1515756,
            "range": "± 11581",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1235428,
            "range": "± 7719",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4eb29c966ae0f50015ee56152b233e8d2e04308c",
          "message": "Bump serde_json from 1.0.76 to 1.0.78 (#1796)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.76 to 1.0.78.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.78</h2>\n<ul>\n<li>Support deserializing as <code>&amp;RawValue</code> in map key position, which would previously fail with <em>&quot;invalid type: newtype struct&quot;</em> (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/851\">#851</a>)</li>\n</ul>\n<h2>v1.0.77</h2>\n<ul>\n<li>Include discord invite links in the published readme</li>\n<li>Improve compile error on compiling with neither <code>std</code> nor <code>alloc</code> feature enabled</li>\n<li>Include integration tests in published package (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/578\">#578</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/98cafacefe69f0c1095eccda1795b699ac711787\"><code>98cafac</code></a> Release 1.0.78</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/2d81cbd11302bd246db248dfb335110d1827e893\"><code>2d81cbd</code></a> Move raw_value test imports to block of imports</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/cbb0342ba0100fe2164f5afcd00e9deb501093fc\"><code>cbb0342</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/851\">#851</a> from serde-rs/rawkey</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/e5cdfcc7ee482238a654afbf3c0116a9f852ce79\"><code>e5cdfcc</code></a> Support deserializing map key as &amp;RawValue</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/6a3fb68979b7e9da0f690f6f07e907045c1b30d9\"><code>6a3fb68</code></a> Add test of deserializing a &amp;RawValue in map key position</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/d8512af496a65906a93ff9191cd963e0dbc64de5\"><code>d8512af</code></a> Release 1.0.77</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/5fe9bdd3562bf29d02d1ab798bbcff069173306b\"><code>5fe9bdd</code></a> Improve error on compiling with neither std nor alloc</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/4c1564931859d1ba51dccdebe0e16959697297d7\"><code>4c15649</code></a> Include integration tests in published package</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/71257c5667f3005694652477c0d47c81db57edea\"><code>71257c5</code></a> Add discord invite links</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/json/compare/v1.0.76...v1.0.78\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.76&new-version=1.0.78)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-24T20:04:47Z",
          "tree_id": "d997a69d2547b7b5a28326f3d478f2d659177583",
          "url": "https://github.com/boa-dev/boa/commit/4eb29c966ae0f50015ee56152b233e8d2e04308c"
        },
        "date": 1643056836719,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 402,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4785,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15234,
            "range": "± 1211",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18518,
            "range": "± 1376",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10671,
            "range": "± 787",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11000,
            "range": "± 549",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12289,
            "range": "± 805",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6983,
            "range": "± 567",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9594,
            "range": "± 526",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9447,
            "range": "± 509",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11698,
            "range": "± 1182",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13587,
            "range": "± 1046",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14845,
            "range": "± 1013",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 163621,
            "range": "± 9010",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8681,
            "range": "± 686",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12128,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6257,
            "range": "± 434",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12443,
            "range": "± 792",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15892,
            "range": "± 1990",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15373,
            "range": "± 1008",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6459,
            "range": "± 398",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32164,
            "range": "± 1953",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29032,
            "range": "± 1652",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 905,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1831,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2252,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1494,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1541,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1697,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1425,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1447,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1571,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1690,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1261,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1683,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3917,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1575,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2050,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1309,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 995,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1563,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 540,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3777,
            "range": "± 244",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3669,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6600,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54482,
            "range": "± 3378",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3830919,
            "range": "± 155820",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7614,
            "range": "± 916",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7858,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8212,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11396,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11150,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14911,
            "range": "± 833",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14654,
            "range": "± 1075",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12258,
            "range": "± 760",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3472325,
            "range": "± 163093",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1438717,
            "range": "± 82429",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7848,
            "range": "± 468",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8431,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6674,
            "range": "± 363",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6664,
            "range": "± 392",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8230,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10215,
            "range": "± 700",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2188,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1632343,
            "range": "± 79471",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1517855,
            "range": "± 85325",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "090d7ace806becb0b63a9562221d0fe5e0cede31",
          "message": "Bump serde from 1.0.134 to 1.0.135 (#1797)\n\nBumps [serde](https://github.com/serde-rs/serde) from 1.0.134 to 1.0.135.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/serde/commit/8932c852a50d1e1644e4d2b52d816cbce3e95567\"><code>8932c85</code></a> Release 1.0.135</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/9f3dd3c7c4bd4305f0f5790811461c94e9f96078\"><code>9f3dd3c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2163\">#2163</a> from serde-rs/discord</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/dd9b415ff90f1f7b61ddde34abde93c1aab2cef2\"><code>dd9b415</code></a> Add discord invite links</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/serde/compare/v1.0.134...v1.0.135\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde&package-manager=cargo&previous-version=1.0.134&new-version=1.0.135)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-24T21:21:42Z",
          "tree_id": "5ae7b1c702fc87300b2d5527240aa00dbee8468f",
          "url": "https://github.com/boa-dev/boa/commit/090d7ace806becb0b63a9562221d0fe5e0cede31"
        },
        "date": 1643061371543,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4377,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14098,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16341,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9229,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9888,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10701,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6452,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8540,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8174,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10145,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12129,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13468,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 140416,
            "range": "± 224",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7758,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11264,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5779,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11351,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14342,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14049,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5799,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29094,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25555,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 701,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1464,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1801,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1165,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1168,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1343,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1175,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1148,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1298,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1301,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 998,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1377,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3264,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1303,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1667,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1026,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 782,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 862,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1185,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 397,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2830,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2841,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4956,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45246,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2857437,
            "range": "± 5178",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6299,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6555,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7004,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9596,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9752,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12907,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12909,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10617,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3200470,
            "range": "± 5520",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1325810,
            "range": "± 4140",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6292,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7505,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5370,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5407,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6837,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8808,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1980,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1490355,
            "range": "± 15113",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1386411,
            "range": "± 7960",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "672eede30d7bcc46a58ae08acdb864678a54d46b",
          "message": "Convert `Codeblock` variables to `Sym` (#1798)\n\nIt changes the following:\r\n\r\n- Convert `Codeblock` variables to `Sym`",
          "timestamp": "2022-01-29T10:10:09Z",
          "tree_id": "b2623f43059fea04195c48c44dee19568ad5f8da",
          "url": "https://github.com/boa-dev/boa/commit/672eede30d7bcc46a58ae08acdb864678a54d46b"
        },
        "date": 1643453167079,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 403,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4632,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15575,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18143,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10183,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10929,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11697,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6987,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9233,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8827,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11044,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13346,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14905,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 167647,
            "range": "± 832",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8265,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12230,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6105,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12282,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15756,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15535,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6393,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32013,
            "range": "± 375",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28340,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 765,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1546,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1758,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1149,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1172,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1382,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1217,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1226,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1347,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1337,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 991,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1367,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3451,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1243,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1509,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1039,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 746,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 797,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1208,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 463,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2595,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2595,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5793,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51309,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3277902,
            "range": "± 30800",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7336,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7681,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8077,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11196,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11227,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14719,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14698,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12388,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3815885,
            "range": "± 31065",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1624654,
            "range": "± 14599",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7258,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8546,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6179,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6340,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8039,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10426,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2341,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1760022,
            "range": "± 18751",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1628289,
            "range": "± 27698",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "e37cb6c9f6d9fd61f3b58155727c9e3dbce46ea4",
          "message": "Updated dependencies (#1803)\n\nThe main idea behind this is to upgrade the Unicode version from 13 to 14. I also upgraded the rest of the dependencies, so this closes #1802, #1800 and #1799.",
          "timestamp": "2022-01-29T16:24:12Z",
          "tree_id": "1137a3ee5057fd6a4457b1fb4ee1d54626364f39",
          "url": "https://github.com/boa-dev/boa/commit/e37cb6c9f6d9fd61f3b58155727c9e3dbce46ea4"
        },
        "date": 1643475546174,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 297,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3840,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12257,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14253,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8141,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8722,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9428,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6405,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7469,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7183,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8928,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10726,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12062,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 128030,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6712,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9686,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4939,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9925,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12555,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12344,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5080,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25637,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22612,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 584,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1135,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1324,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 847,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 858,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1025,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 928,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 927,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1020,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1036,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 728,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1023,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2536,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 934,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1157,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 791,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 565,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 903,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 343,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 1946,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 1940,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4424,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38885,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2446951,
            "range": "± 5848",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6191,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5717,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6884,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8597,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8595,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11355,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11390,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9106,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2708488,
            "range": "± 3715",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1153037,
            "range": "± 3964",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5357,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6383,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4579,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4785,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6123,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7752,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1743,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1302077,
            "range": "± 6169",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1205230,
            "range": "± 7648",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "db067cf864781c4858b1ea80ed0f9e3f61d447d3",
          "message": "Updated the Test262 test suite (#1794)\n\nThis PR just updates the Test262 sub-module to bring all the new tests created in the last month and a half.",
          "timestamp": "2022-01-29T16:38:08Z",
          "tree_id": "4e65dc966a2c0706135abc7ae675cb75e75c2d23",
          "url": "https://github.com/boa-dev/boa/commit/db067cf864781c4858b1ea80ed0f9e3f61d447d3"
        },
        "date": 1643476369537,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4308,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14253,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16316,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9252,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9927,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10754,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6410,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8519,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8221,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10139,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12192,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13815,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144779,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7622,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10998,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5610,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11226,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14149,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13906,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5807,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29422,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25984,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 660,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1295,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1495,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 966,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 979,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1144,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1029,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1040,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1147,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1156,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 820,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1179,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2856,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1060,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1305,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 883,
            "range": "± 878",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 642,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 681,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1016,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 395,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2188,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2186,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4983,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44262,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2752766,
            "range": "± 3516",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6222,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6383,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6748,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9860,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9816,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12925,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12931,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10387,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3059704,
            "range": "± 6455",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1309337,
            "range": "± 4511",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6024,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7109,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5193,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5481,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6934,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8808,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1972,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1483816,
            "range": "± 9969",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1364193,
            "range": "± 9357",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "98faa73bbe963449317f1dd1f203a781c665387e",
          "message": "Update the PR benchmarks action (#1774)\n\nThis is just for debugging for now. If we find out a fix, we can merge it.",
          "timestamp": "2022-01-29T17:34:13Z",
          "tree_id": "ddd3721e7be6bfa353b4cb61f32bd4947c5d0e0b",
          "url": "https://github.com/boa-dev/boa/commit/98faa73bbe963449317f1dd1f203a781c665387e"
        },
        "date": 1643479633797,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 344,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4430,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14157,
            "range": "± 709",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17039,
            "range": "± 1287",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9373,
            "range": "± 662",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10062,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10526,
            "range": "± 566",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6357,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8380,
            "range": "± 381",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8240,
            "range": "± 502",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10435,
            "range": "± 653",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12481,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13584,
            "range": "± 650",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151649,
            "range": "± 7592",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7655,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11074,
            "range": "± 684",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5700,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11152,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14463,
            "range": "± 1398",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13753,
            "range": "± 708",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5872,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29999,
            "range": "± 1740",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28712,
            "range": "± 1972",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 759,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1430,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1760,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1107,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1220,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1412,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1211,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1207,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1367,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1487,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1121,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1473,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3364,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1359,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1623,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1155,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 839,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 875,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1291,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 495,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2951,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2712,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6348,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51769,
            "range": "± 1899",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3814847,
            "range": "± 259248",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7601,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7854,
            "range": "± 364",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8505,
            "range": "± 1437",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11746,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11516,
            "range": "± 577",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15485,
            "range": "± 699",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15759,
            "range": "± 658",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12564,
            "range": "± 692",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3465566,
            "range": "± 169921",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1553268,
            "range": "± 69888",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7634,
            "range": "± 315",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9231,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6422,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6296,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8159,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10383,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2313,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1658320,
            "range": "± 81818",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1581651,
            "range": "± 77718",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d96b6407d5b3a8ac6bc3e54138fcd6273eddebeb",
          "message": "Bump benchmark-action/github-action-benchmark from 1.11.3 to 1.12.0 (#1811)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.11.3 to 1.12.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.12.0</h2>\n<p>Feat: Support private repositories (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/105\">#105</a>)\nChore: Bump action runner to node v16 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/106\">#106</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.12.0\">v1.12.0</a> - 28 Jan 2022</h1>\n<ul>\n<li><strong>Feat:</strong> Support private repositories (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/105\">#105</a>)</li>\n<li><strong>Chore</strong> Bump action runner to node v16 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/106\">#106</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/b7064e06aeeb370bc6da9992de82f14aa8334089\"><code>b7064e0</code></a> v1.12.0</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.11.3...v1.12.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.11.3&new-version=1.12.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-31T20:01:44Z",
          "tree_id": "a03e6afb8d9456a030a06105650fcf45d5923df2",
          "url": "https://github.com/boa-dev/boa/commit/d96b6407d5b3a8ac6bc3e54138fcd6273eddebeb"
        },
        "date": 1643661260939,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 329,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4568,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14839,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17214,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9816,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10474,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11328,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6958,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8933,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8695,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10657,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12986,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14422,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 152024,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8079,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11690,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6126,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11399,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14305,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14081,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6025,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30686,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27109,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 640,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1333,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1554,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1001,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1005,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1171,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1069,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1076,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1167,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1171,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 835,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1200,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2757,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1088,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1325,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 888,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 653,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 695,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1028,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 364,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2296,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2268,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5040,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41117,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2781306,
            "range": "± 3532",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6146,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6337,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6713,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9588,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9632,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12868,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12729,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10669,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3104285,
            "range": "± 17867",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1309008,
            "range": "± 4519",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6163,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7245,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5265,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5298,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6845,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8689,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1720,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1435463,
            "range": "± 9957",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1340945,
            "range": "± 9407",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "60b7eb89340c266a2b4f180690e8781245b6a1c8",
          "message": "General code clean-up and new lint addition (#1809)\n\nThis PR adds some Clippy lints. Mainly, it adds the list of pedantic lints excluding some lints that were causing too many warnings. I also denied some useful restriction and pedantic lints, to make sure we use `Self` all the possible times (for better maintainability), and that we pass elements by reference where possible, for example, or that the documentation is properly written.\r\n\r\nThis might even have some small performance gains.\r\n\r\nI also added a perfect hash function for the CLI keywords, which should be more efficient than a `HashSet`. This is something we could use elsewhere too.",
          "timestamp": "2022-02-03T09:59:06Z",
          "tree_id": "220ff5b9a8e5fcec9cf733b5d56a2f29f2a88cfb",
          "url": "https://github.com/boa-dev/boa/commit/60b7eb89340c266a2b4f180690e8781245b6a1c8"
        },
        "date": 1643884665887,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 390,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4412,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14913,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17087,
            "range": "± 532",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10073,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10525,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11113,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6591,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9162,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8655,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10597,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12824,
            "range": "± 354",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14107,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165036,
            "range": "± 2365",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7988,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11606,
            "range": "± 353",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5982,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11841,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15682,
            "range": "± 488",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14750,
            "range": "± 575",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5965,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30349,
            "range": "± 1188",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26788,
            "range": "± 924",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 755,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1432,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1681,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1086,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1124,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1348,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1222,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1168,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1298,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1348,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 924,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1312,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3120,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1219,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1494,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1000,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 720,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 738,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1141,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 456,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2484,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2472,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5690,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49181,
            "range": "± 1197",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3112445,
            "range": "± 68749",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7101,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7241,
            "range": "± 215",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7922,
            "range": "± 308",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11202,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10971,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14707,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14968,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12021,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3492938,
            "range": "± 125904",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1492941,
            "range": "± 45011",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6981,
            "range": "± 213",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8152,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5898,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6239,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7961,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10359,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2297,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1681256,
            "range": "± 41297",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1522853,
            "range": "± 49362",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "23208d81345e823b260a47ae7c777f817fd88905",
          "message": "Bump copy-webpack-plugin from 10.2.3 to 10.2.4 (#1815)\n\nBumps [copy-webpack-plugin](https://github.com/webpack-contrib/copy-webpack-plugin) from 10.2.3 to 10.2.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/releases\">copy-webpack-plugin's releases</a>.</em></p>\n<blockquote>\n<h2>v10.2.4</h2>\n<h3><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.3...v10.2.4\">10.2.4</a> (2022-01-31)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/666\">#666</a>) (<a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a1c2308511a4cccb92a22cb395b6eb66dc1c776b\">a1c2308</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/CHANGELOG.md\">copy-webpack-plugin's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.3...v10.2.4\">10.2.4</a> (2022-01-31)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/666\">#666</a>) (<a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a1c2308511a4cccb92a22cb395b6eb66dc1c776b\">a1c2308</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/18b1ea5c502e1221e7a3a030591694401379706d\"><code>18b1ea5</code></a> chore(release): 10.2.4</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a1c2308511a4cccb92a22cb395b6eb66dc1c776b\"><code>a1c2308</code></a> fix: types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/666\">#666</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.3...v10.2.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=copy-webpack-plugin&package-manager=npm_and_yarn&previous-version=10.2.3&new-version=10.2.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T10:19:24Z",
          "tree_id": "d9e76511cff4bbc63872d4891e533b01371819f0",
          "url": "https://github.com/boa-dev/boa/commit/23208d81345e823b260a47ae7c777f817fd88905"
        },
        "date": 1643885781409,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4421,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14212,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16518,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9427,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10149,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10817,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6510,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8560,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8298,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10293,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12184,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13552,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143363,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7667,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11117,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5737,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11363,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14510,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14111,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5738,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29311,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25830,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 658,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1296,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1469,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 986,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 990,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1179,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1044,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1044,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1180,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1153,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 822,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1174,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2803,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1073,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1319,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 893,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 645,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 701,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1038,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 402,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2264,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2214,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4934,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43900,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2711717,
            "range": "± 4375",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6183,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6391,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6815,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9805,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9821,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12987,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13041,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10273,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3093232,
            "range": "± 7216",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1304830,
            "range": "± 4071",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6103,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7190,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5253,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5420,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6881,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8812,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1994,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1464225,
            "range": "± 10010",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1350978,
            "range": "± 7974",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "fdd23b154b1c5fb5d58d2fdd196a4ce6842aa3c1",
          "message": "Bump webpack-dev-server from 4.7.3 to 4.7.4 (#1816)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.7.3 to 4.7.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.4</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.3...v4.7.4\">4.7.4</a> (2022-02-02)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add <code>@​types/express</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4226\">#4226</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/e55f728d3b5262884aa80daf9b021198b4bc65a9\">e55f728</a>)</li>\n<li>negative descriptions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4216\">#4216</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fd854c07c2a4654f479bdbad1b717d9406ce15c6\">fd854c0</a>)</li>\n<li>types for the <code>proxy</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4173\">#4173</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/efec2f5bfb5ff4b99258b12317aa0d922836738e\">efec2f5</a>)</li>\n<li>use CLI specific description for <code>--open-app-name</code> and <code>--web-socket-server</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4215\">#4215</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/329679a434219adc43f2d73c2ceeda14787dc64d\">329679a</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.3...v4.7.4\">4.7.4</a> (2022-02-02)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add <code>@​types/express</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4226\">#4226</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/e55f728d3b5262884aa80daf9b021198b4bc65a9\">e55f728</a>)</li>\n<li>negative descriptions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4216\">#4216</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fd854c07c2a4654f479bdbad1b717d9406ce15c6\">fd854c0</a>)</li>\n<li>types for the <code>proxy</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4173\">#4173</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/efec2f5bfb5ff4b99258b12317aa0d922836738e\">efec2f5</a>)</li>\n<li>use CLI specific description for <code>--open-app-name</code> and <code>--web-socket-server</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4215\">#4215</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/329679a434219adc43f2d73c2ceeda14787dc64d\">329679a</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/92c602a7dde861badfc4758510af596f6a14e9a0\"><code>92c602a</code></a> chore(release): 4.7.4</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/fd854c07c2a4654f479bdbad1b717d9406ce15c6\"><code>fd854c0</code></a> fix: negative descriptions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4216\">#4216</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/986479369ca7b609f4f0438cbd2a0c4222f8a077\"><code>9864793</code></a> chore: update deps (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4237\">#4237</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e55f728d3b5262884aa80daf9b021198b4bc65a9\"><code>e55f728</code></a> fix: add <code>@​types/express</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4226\">#4226</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/ad1d14c2bd173246cbcc6b29e013c8bcabd35c89\"><code>ad1d14c</code></a> ci: fix for windows (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4229\">#4229</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/b9e11ba90a35ec543140fbb3b50684ccfa122f5c\"><code>b9e11ba</code></a> chore(deps-dev): bump lint-staged</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e6eae3e3f721e27e477dc7ba58046cdf7f77615d\"><code>e6eae3e</code></a> chore(deps-dev): bump puppeteer</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/0131cc191993d44a2bfec3f72290642c6de55d8d\"><code>0131cc1</code></a> chore(deps): bump http-proxy-middleware</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/bd3fce8bdc77f16e8c95ca70fe82a04aeb74508e\"><code>bd3fce8</code></a> chore(deps-dev): bump <code>@​babel/core</code></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/72e01c09c5694898381bc0cb9ed246ccf3b51d38\"><code>72e01c0</code></a> chore(deps-dev): bump webpack-cli</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.3...v4.7.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.7.3&new-version=4.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T12:27:11Z",
          "tree_id": "37f347014d924590e1eef4acb860731c22d087c4",
          "url": "https://github.com/boa-dev/boa/commit/fdd23b154b1c5fb5d58d2fdd196a4ce6842aa3c1"
        },
        "date": 1643893131422,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4409,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14177,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16449,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9463,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10147,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10827,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6532,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8601,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8263,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10278,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12267,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13537,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144512,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7665,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11160,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5737,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11312,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14521,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14189,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5721,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29182,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25748,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 673,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1298,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1485,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 965,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 980,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1180,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1046,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1041,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1144,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 855,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1176,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2808,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1066,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1339,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 885,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 647,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 687,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1033,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 402,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2275,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2223,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5012,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43746,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2708171,
            "range": "± 2231",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6123,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6397,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6768,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9779,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9759,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12870,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12961,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10313,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3078804,
            "range": "± 8091",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1307568,
            "range": "± 4257",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6096,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7177,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5235,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5379,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6939,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8717,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1981,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1460894,
            "range": "± 7194",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1356230,
            "range": "± 7491",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6777eb42868c2cb4bc18aa5c6b8093d44e55a30b",
          "message": "Bump css-loader from 6.5.1 to 6.6.0 (#1817)\n\nBumps [css-loader](https://github.com/webpack-contrib/css-loader) from 6.5.1 to 6.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/releases\">css-loader's releases</a>.</em></p>\n<blockquote>\n<h2>v6.6.0</h2>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.5.1...v6.6.0\">6.6.0</a> (2022-02-02)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>hashStrategy</code> option (<a href=\"https://github.com/webpack-contrib/css-loader/commit/ca4abce74d01bc13959e30a4dbbd1ca3a0516d72\">ca4abce</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md\">css-loader's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.5.1...v6.6.0\">6.6.0</a> (2022-02-02)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>hashStrategy</code> option (<a href=\"https://github.com/webpack-contrib/css-loader/commit/ca4abce74d01bc13959e30a4dbbd1ca3a0516d72\">ca4abce</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/5d6be099c3dbd099b38bbfe1ae04c64b29fa7944\"><code>5d6be09</code></a> chore(release): v6.6.0</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/ca4abce74d01bc13959e30a4dbbd1ca3a0516d72\"><code>ca4abce</code></a> feat: added the <code>hashStrategy</code> option</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/32403943d68dad5cab07b3af0dff62bf350db489\"><code>3240394</code></a> ci: fix (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1413\">#1413</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/c78fe789efb39d2c8375d141d8ed8adc7e1ab6af\"><code>c78fe78</code></a> ci: remove install NPM steps (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1411\">#1411</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/cbe3898876605c73d1854f23ac2497df8e9611c5\"><code>cbe3898</code></a> docs: reword sentence (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1407\">#1407</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/5167ce9634408ba2340fa20836ba3b43a93afc3d\"><code>5167ce9</code></a> chore: update lint staged config (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1405\">#1405</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/8ffd14eb4471a1e4a0780f58aeba7b30727b9830\"><code>8ffd14e</code></a> chore: update dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1404\">#1404</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/db4d65229b2bcf1f97d096accedd813effed6fc2\"><code>db4d652</code></a> chore: update node version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1403\">#1403</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/0df1ae95e16e925e5214719786184a36363cefea\"><code>0df1ae9</code></a> fix: expand lint-staged, use eslint cache (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1399\">#1399</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/5eb7b80b72bf1cce9d788fcc309766c71400c0e1\"><code>5eb7b80</code></a> test: fix (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1400\">#1400</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.5.1...v6.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=6.5.1&new-version=6.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T12:52:34Z",
          "tree_id": "7c225157f6502a0ce2d950714fc72f81c32cb48f",
          "url": "https://github.com/boa-dev/boa/commit/6777eb42868c2cb4bc18aa5c6b8093d44e55a30b"
        },
        "date": 1643894802760,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 406,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4734,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15780,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18431,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10435,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11157,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11854,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7109,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9477,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9041,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11331,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13615,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15065,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 168249,
            "range": "± 332",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8415,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12474,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6232,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12652,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16342,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15935,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6369,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32602,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28615,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 776,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1558,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1765,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1160,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1170,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1398,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1249,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1259,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1369,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1372,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 987,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1402,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3354,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1295,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1607,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1078,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 755,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 799,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1226,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 480,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2644,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2622,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5934,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52508,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3244277,
            "range": "± 5197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7378,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7687,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8180,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11760,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11808,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15327,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15399,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12377,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3685309,
            "range": "± 66769",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1567171,
            "range": "± 7141",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7292,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8598,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6299,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6485,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8213,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10492,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2383,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1756685,
            "range": "± 15594",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1627017,
            "range": "± 9277",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "0dfe6ec8b28fe0a321d7e80b58243c07b517e01a",
          "message": "Bump webpack from 5.67.0 to 5.68.0 (#1814)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.67.0 to 5.68.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.68.0</h2>\n<h1>Features</h1>\n<ul>\n<li>allow to disable compile time evaluation of import.meta.url</li>\n<li>add <code>__webpack_module__</code> and <code>__webpack_module__.id</code> to the api</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix handling of errors thrown in async modules</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/f593d98453e7920bf65f24bf051cd67b5704b59d\"><code>f593d98</code></a> 5.68.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/6f3735c54850960047cea1ece8194363b2401f29\"><code>6f3735c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15279\">#15279</a> from taranek/docs/array-helpers-docs</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/04039ca99c9a5575ecb041796c6a0858d7be591d\"><code>04039ca</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15284\">#15284</a> from webpack/feature/<strong>webpack_module</strong></li>\n<li><a href=\"https://github.com/webpack/webpack/commit/d7a87ab5bc3c6333dffb49af24990e7672643fcd\"><code>d7a87ab</code></a> change <strong>webpack_module_id</strong> to <strong>webpack_module</strong>.id</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/612de998f186a9bb2fe8769a91678df689a0541e\"><code>612de99</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15282\">#15282</a> from webpack/feature/<strong>webpack_module</strong></li>\n<li><a href=\"https://github.com/webpack/webpack/commit/a962d2ceddc387354a4c4bc927f92e338babfd2c\"><code>a962d2c</code></a> add <strong>webpack_module</strong> and <strong>webpack_module_id</strong> to the api</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/5a3760e6d47af6c2a9e70f2e08b7a0d02e6f78a5\"><code>5a3760e</code></a> docs(util): added jsdoc annotations for ArrayHelpers.js</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/46e8639a6a1f5288e2f43229f39fc21aecb3c5e8\"><code>46e8639</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15246\">#15246</a> from pavelsavara/import_meta_url</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/1e73ca79c4e01ab55e6e25f7991306050907ec66\"><code>1e73ca7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15266\">#15266</a> from webpack/bugfix/throwing-in-async-modules</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/232403c5e8fcfd733e4fff7f829aac6e51b5fb2a\"><code>232403c</code></a> fix discussions</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.67.0...v5.68.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.67.0&new-version=5.68.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T19:59:30Z",
          "tree_id": "d331724832e87b0e46d94ef5973eef90749d7fe9",
          "url": "https://github.com/boa-dev/boa/commit/0dfe6ec8b28fe0a321d7e80b58243c07b517e01a"
        },
        "date": 1643920464762,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 416,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4815,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15829,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18489,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10500,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11148,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11983,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7148,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9430,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9080,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11267,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13689,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15046,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165538,
            "range": "± 2401",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8395,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12211,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6225,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12497,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15840,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15622,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6363,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32375,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28337,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 801,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1548,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1771,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1135,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1162,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1370,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1222,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1229,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1353,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1367,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1000,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3282,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1261,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1588,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1062,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 760,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 784,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1217,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 493,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2607,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2559,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5876,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50787,
            "range": "± 779",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3179704,
            "range": "± 39176",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7330,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7633,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8009,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11384,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11460,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15279,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15094,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12353,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3678154,
            "range": "± 30616",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1536300,
            "range": "± 18276",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7251,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8597,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6235,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6477,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8223,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10497,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2384,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1739618,
            "range": "± 23608",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1627341,
            "range": "± 13702",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "3d21e8370125296aec3e2139879f9af74ed26eb8",
          "message": "Fixed the GitHub actions badge (#1813)\n\nThis uses the official GitHub actions badge.",
          "timestamp": "2022-02-04T05:35:33Z",
          "tree_id": "a502a6c8ccbdb29ae326c875787a35c1240ed5ed",
          "url": "https://github.com/boa-dev/boa/commit/3d21e8370125296aec3e2139879f9af74ed26eb8"
        },
        "date": 1643954875432,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 343,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4403,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14148,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16448,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9398,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10092,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10813,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6516,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8632,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8280,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10390,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12294,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13641,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143177,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7687,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11189,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5751,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11349,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14514,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14169,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5723,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29416,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25835,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 660,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1285,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1489,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 966,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 993,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1153,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1043,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1046,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1157,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 821,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1172,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2799,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1068,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1331,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 889,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 690,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1034,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 402,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2261,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2223,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4939,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43692,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2736378,
            "range": "± 3334",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6176,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6393,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6826,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9805,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9813,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12912,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12892,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10280,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3075511,
            "range": "± 6853",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1306677,
            "range": "± 6555",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6122,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7206,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5288,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5392,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6945,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8751,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1992,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1467522,
            "range": "± 7835",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1358584,
            "range": "± 10203",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "b34d581db50bdef70e6598f96bcf04c19b618341",
          "message": "Bump monaco-editor from 0.31.1 to 0.32.0 (#1818)\n\nBumps [monaco-editor](https://github.com/microsoft/monaco-editor) from 0.31.1 to 0.32.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/microsoft/monaco-editor/blob/main/CHANGELOG.md\">monaco-editor's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.32.0] (03.02.2022)</h2>\n<h3>Breaking Changes</h3>\n<ul>\n<li>The binary format for <code>IEncodedLineTokens</code> has changed to support strikethrough text.</li>\n<li><code>IDiffEditor.getDomNode()</code> has been renamed to <code>IDiffEditor.getContainerDomNode()</code>.</li>\n<li><code>InlayHint.text</code> has been replaced by <code>InlayHint.label</code> and <code>InlayHintsProvider.provideInlayHints</code> now returns an <code>InlayHintList</code>.</li>\n</ul>\n<h3>Thank you</h3>\n<p>Contributions to <code>monaco-editor</code>:</p>\n<ul>\n<li><a href=\"https://github.com/blutorange\"><code>@​blutorange (Andre Wachsmuth)</code></a>: Implements <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2383\">#2383</a> Add syntax modes for FreeMarker template language [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2847\">#2847</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2847\">microsoft/monaco-editor#2847</a>)</li>\n<li><a href=\"https://github.com/forensicmike\"><code>@​forensicmike (forensicmike1)</code></a>: Add &quot;cd monaco-editor&quot; to the step by step commandline instructions for cloning and running the samples [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2894\">#2894</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2894\">microsoft/monaco-editor#2894</a>)</li>\n<li><a href=\"https://github.com/juan-carlos-diaz\"><code>@​juan-carlos-diaz</code></a>: Fix <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2851\">#2851</a> Highlight correctly the attributes and identifiers (with dashes) for Shell language [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2871\">#2871</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2871\">microsoft/monaco-editor#2871</a>)</li>\n<li><a href=\"https://github.com/MasterOdin\"><code>@​MasterOdin (Matthew Peveler)</code></a>: Only run publish workflow on main monaco-editor repo [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2926\">#2926</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2926\">microsoft/monaco-editor#2926</a>)</li>\n<li><a href=\"https://github.com/philipturner\"><code>@​philipturner (Philip Turner)</code></a>\n<ul>\n<li>Update Swift language specification to version 5.5 [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2855\">#2855</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2855\">microsoft/monaco-editor#2855</a>)</li>\n<li>Add <a href=\"https://github.com/preconcurrency\"><code>@​preconcurrency</code></a> to Swift declaration attributes [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2924\">#2924</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2924\">microsoft/monaco-editor#2924</a>)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rcjsuen\"><code>@​rcjsuen (Remy Suen)</code></a>: Support hyphenated HTML tags in Markdown syntax [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2864\">#2864</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2864\">microsoft/monaco-editor#2864</a>)</li>\n<li><a href=\"https://github.com/resistdesign\"><code>@​resistdesign (Ryan Graff)</code></a>: doc: (samples) Simplify Browser ESM Parcel build [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2832\">#2832</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2832\">microsoft/monaco-editor#2832</a>)</li>\n<li><a href=\"https://github.com/ValeraS\"><code>@​ValeraS (Valeriy)</code></a>\n<ul>\n<li>fix(monaco-editor-webpack-plugin): load monaco-editor with webpack 4 [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2818\">#2818</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2818\">microsoft/monaco-editor#2818</a>)</li>\n<li>tune(monaco-editor-webpack-plugin): expose plugin options type [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2853\">#2853</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2853\">microsoft/monaco-editor#2853</a>)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ZusorCode\"><code>@​ZusorCode (Tobias Messner)</code></a>: Add .cjs extension for javascript files [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2929\">#2929</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2929\">microsoft/monaco-editor#2929</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/microsoft/monaco-editor/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=monaco-editor&package-manager=npm_and_yarn&previous-version=0.31.1&new-version=0.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-04T10:22:04Z",
          "tree_id": "dba8374de5401f0efc0233d26a72a80a89f8b11b",
          "url": "https://github.com/boa-dev/boa/commit/b34d581db50bdef70e6598f96bcf04c19b618341"
        },
        "date": 1643971998176,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 340,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4435,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14162,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16510,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9413,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10113,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10840,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6519,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8596,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8290,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10332,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12239,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13513,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143105,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7656,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11148,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5742,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11418,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14450,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14140,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5774,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29406,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25767,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 649,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1287,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1487,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 974,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 996,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1068,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1045,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1146,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1183,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 825,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1168,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2815,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1059,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1328,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 877,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 644,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 686,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1027,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 408,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2238,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2229,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4922,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43727,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2744123,
            "range": "± 4967",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6188,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6358,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6785,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9852,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9791,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12959,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13040,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10378,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3100935,
            "range": "± 6479",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1304391,
            "range": "± 3820",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6117,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7171,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5233,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5404,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6873,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8702,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1983,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1465782,
            "range": "± 11969",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1359525,
            "range": "± 7579",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "4a11ca1773837a2a6f04bf41f4238f1753dabc26",
          "message": "Fixed #1768 (#1820)\n\nThis Pull Request fixes/closes #1768.\r\n\r\nIt adds one extra peeked token in the buffered lexer, since it didn't take into account that the stream might end just after the last peeked token. The panic was only happening in debug mode, but still, this was wrong.",
          "timestamp": "2022-02-07T21:15:47Z",
          "tree_id": "8875c821d273951d251896d41673926495742e4d",
          "url": "https://github.com/boa-dev/boa/commit/4a11ca1773837a2a6f04bf41f4238f1753dabc26"
        },
        "date": 1644270666856,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 334,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4464,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14066,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16374,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9389,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10013,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10758,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6504,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8557,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8222,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10263,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12177,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13569,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144017,
            "range": "± 213",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7686,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11126,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5734,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11279,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14473,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14180,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5766,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29518,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25823,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1274,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1471,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 962,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 982,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1162,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1041,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1034,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1149,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1150,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 816,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1160,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2859,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1055,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1282,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 882,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 653,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 695,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1040,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 401,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2176,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2174,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5104,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43879,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2763261,
            "range": "± 5925",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6287,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6538,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7002,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9660,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9689,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12810,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12772,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10400,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3223718,
            "range": "± 6688",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1344776,
            "range": "± 4034",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6290,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7357,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5350,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5370,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6811,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8834,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1951,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1476816,
            "range": "± 8520",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1371636,
            "range": "± 7038",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "5759447250b684460b2e24e28988c53bf0694936",
          "message": "Reduced the size of AST nodes (#1821)\n\nThis PR boxes the `Try` and `TaggedTemplate` nodes reducing the size of the `Node` structure from 88 to 56 bytes. This should improve performance in most cases, by adding another indirection with code with `try` and templates.",
          "timestamp": "2022-02-07T23:13:58Z",
          "tree_id": "b913738ed7969166047c390d515f52774b6c6ed3",
          "url": "https://github.com/boa-dev/boa/commit/5759447250b684460b2e24e28988c53bf0694936"
        },
        "date": 1644277828575,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 412,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4893,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16240,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18763,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10751,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11476,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12259,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7362,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9770,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9388,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11709,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13805,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15606,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 166899,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8694,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12688,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6428,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12794,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16564,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16213,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6377,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33276,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29005,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 795,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1593,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1832,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1193,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1203,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1410,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1267,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1263,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1422,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1413,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1015,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1459,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3748,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1311,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1603,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1073,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 787,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 821,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1251,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 493,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2707,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2688,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6108,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53880,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3381429,
            "range": "± 7644",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7599,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7997,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8525,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12403,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12373,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16208,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16208,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12841,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 4012094,
            "range": "± 13018",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1698912,
            "range": "± 5928",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7588,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8925,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6523,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6619,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8538,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10620,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2444,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1831172,
            "range": "± 19257",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1705758,
            "range": "± 12677",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7779c1a6f1f5d467c3307ab0cff1aa412a990db5",
          "message": "Bump boa-dev/criterion-compare-action from 3.0.2 to 3.1.0 (#1827)\n\nBumps [boa-dev/criterion-compare-action](https://github.com/boa-dev/criterion-compare-action) from 3.0.2 to 3.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/boa-dev/criterion-compare-action/releases\">boa-dev/criterion-compare-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.0</h2>\n<p>Added the possibility to add feature flags for a benchmark (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/pull/32\">boa-dev/criterion-compare-action#32</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/36f48c2715c33235cb9f906673331399efb84b17\"><code>36f48c2</code></a> Bumped version number</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/4a46bfae1de3fe3af2d546ec5cf4283bc134b1ec\"><code>4a46bfa</code></a> Add the possibility to add feature flags for a benchmark (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/32\">#32</a>)</li>\n<li>See full diff in <a href=\"https://github.com/boa-dev/criterion-compare-action/compare/v3.0.2...v3.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=boa-dev/criterion-compare-action&package-manager=github_actions&previous-version=3.0.2&new-version=3.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-08T15:19:03Z",
          "tree_id": "68966e0f60e8f2bbbce43e6d424c89f4302cfd04",
          "url": "https://github.com/boa-dev/boa/commit/7779c1a6f1f5d467c3307ab0cff1aa412a990db5"
        },
        "date": 1644338583122,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 395,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4567,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15383,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17715,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10277,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10985,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11649,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6953,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9218,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8883,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11058,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13172,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14693,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159081,
            "range": "± 917",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8314,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12180,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6146,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12098,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15739,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15368,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6309,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33416,
            "range": "± 1881",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28455,
            "range": "± 2628",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 814,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1590,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1814,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1146,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1176,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1459,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1215,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1286,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1362,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1364,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1039,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1404,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3747,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1249,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1545,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1049,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 761,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 797,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1280,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 468,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2727,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2562,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6359,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51976,
            "range": "± 1380",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3262189,
            "range": "± 3959",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7332,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8049,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8577,
            "range": "± 546",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11825,
            "range": "± 498",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12565,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15604,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15599,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12321,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3844159,
            "range": "± 10697",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1639291,
            "range": "± 6864",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7345,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8576,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6322,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6391,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8180,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10388,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2354,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1771033,
            "range": "± 20398",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1685291,
            "range": "± 116578",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7b2dc881a0262794183537973f8bc6da46567f20",
          "message": "Bump follow-redirects from 1.14.7 to 1.14.8 (#1833)\n\nBumps [follow-redirects](https://github.com/follow-redirects/follow-redirects) from 1.14.7 to 1.14.8.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/follow-redirects/follow-redirects/commit/3d81dc3237b4ffe8b722bb3d1c70a7866657166e\"><code>3d81dc3</code></a> Release version 1.14.8 of the npm package.</li>\n<li><a href=\"https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445\"><code>62e546a</code></a> Drop confidential headers across schemes.</li>\n<li>See full diff in <a href=\"https://github.com/follow-redirects/follow-redirects/compare/v1.14.7...v1.14.8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.14.7&new-version=1.14.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/boa-dev/boa/network/alerts).\n\n</details>",
          "timestamp": "2022-02-12T12:14:59Z",
          "tree_id": "b7872850dd326a8336bbec903853286ddae94c1f",
          "url": "https://github.com/boa-dev/boa/commit/7b2dc881a0262794183537973f8bc6da46567f20"
        },
        "date": 1644669904709,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 403,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4875,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16317,
            "range": "± 553",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18868,
            "range": "± 861",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11003,
            "range": "± 626",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11570,
            "range": "± 934",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12574,
            "range": "± 773",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7534,
            "range": "± 562",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9836,
            "range": "± 606",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9400,
            "range": "± 433",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11739,
            "range": "± 549",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14809,
            "range": "± 1195",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15518,
            "range": "± 648",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165307,
            "range": "± 10906",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8638,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12720,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6410,
            "range": "± 321",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13013,
            "range": "± 615",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16231,
            "range": "± 823",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16150,
            "range": "± 986",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6656,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33546,
            "range": "± 2055",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29155,
            "range": "± 1504",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 889,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1671,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2006,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1265,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1287,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1518,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1335,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1344,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1465,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1458,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1129,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1537,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3497,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1401,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1761,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1166,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 845,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 914,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1318,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 529,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2899,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2776,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6455,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54544,
            "range": "± 2255",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3693039,
            "range": "± 166403",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8217,
            "range": "± 514",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8369,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8733,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12037,
            "range": "± 774",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11711,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15886,
            "range": "± 660",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16132,
            "range": "± 592",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13129,
            "range": "± 470",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3857954,
            "range": "± 175456",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1665476,
            "range": "± 59024",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 8089,
            "range": "± 478",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9255,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6766,
            "range": "± 250",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6702,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8573,
            "range": "± 330",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10840,
            "range": "± 518",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2298,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1748354,
            "range": "± 58790",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1597562,
            "range": "± 62243",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "53ef07b1a6201c3c459563b6aa4dde53047637b6",
          "message": "Using the new formatting arguments from Rust 1.58 (#1834)\n\nIn [Rust 1.58](https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#captured-identifiers-in-format-strings), capturing of bindings were added to format strings. This makes things more clear, so I added this where possible.",
          "timestamp": "2022-02-13T12:06:27Z",
          "tree_id": "e0366cf5e481e9462e9e0c0c63e82a4e9231a534",
          "url": "https://github.com/boa-dev/boa/commit/53ef07b1a6201c3c459563b6aa4dde53047637b6"
        },
        "date": 1644755857592,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 331,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4249,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13866,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15971,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9264,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9933,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10677,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6398,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8444,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8138,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10139,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11938,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13322,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135338,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7427,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10824,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5576,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11201,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14149,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13957,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5487,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28623,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25067,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 632,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1266,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1486,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 947,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 974,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1159,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1037,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1033,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1138,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1133,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 826,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1167,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2825,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1038,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1283,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 875,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 647,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 693,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1039,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 399,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2151,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2121,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4871,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43592,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2769610,
            "range": "± 4131",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6079,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6338,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6748,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9810,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9899,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12937,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12889,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10541,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3133498,
            "range": "± 10314",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1344583,
            "range": "± 4176",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6031,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7129,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5165,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5299,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6805,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8609,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1459196,
            "range": "± 9872",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1349328,
            "range": "± 8494",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "djordje.lukic@docker.com",
            "name": "Djordje Lukic",
            "username": "rumpl"
          },
          "committer": {
            "email": "djordje.lukic@docker.com",
            "name": "Djordje Lukic",
            "username": "rumpl"
          },
          "distinct": false,
          "id": "7e772768e2644eaedaedf5f0a0794f7b16fd6d93",
          "message": "Give the arrow function its proper name (#1832)\n\nWith this change an arrow function name is correctly set to the name of the variable:\r\n\r\n```javascript\r\nconst myFunction = () => {};\r\nconsole.log(myFunction.name); // Prints \"myFunction\"\r\n```\r\n\r\n_Note:_ I'm still getting familiar with the codebase and am pretty new to Rust so I won't be offended if this isn't merged. I am actually surprised I had to make so many changes to give the right code the name it needed. Maybe there is a better way? I'm all ears :)",
          "timestamp": "2022-02-14T21:56:56Z",
          "tree_id": "5ab40eed6851745e2eea300ffaa9bcece2c9be67",
          "url": "https://github.com/boa-dev/boa/commit/7e772768e2644eaedaedf5f0a0794f7b16fd6d93"
        },
        "date": 1644877522411,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 342,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4320,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13726,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15923,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9251,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9924,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10673,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6342,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8394,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8033,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10039,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11834,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13179,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135947,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7525,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10901,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5636,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10987,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14065,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13813,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5523,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28552,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24843,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1295,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1443,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 961,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 996,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1150,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1013,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1029,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1150,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1149,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 809,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1181,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2759,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1053,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1309,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 874,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 695,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1049,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 386,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2182,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2183,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4885,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43475,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2763470,
            "range": "± 11784",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6107,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6347,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6788,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9426,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9365,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12403,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12409,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10482,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3097023,
            "range": "± 6027",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1340577,
            "range": "± 7380",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6085,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7164,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5143,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5345,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6860,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8623,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1973,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1479912,
            "range": "± 11156",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1364125,
            "range": "± 14496",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jevan.cnchan@gmail.com",
            "name": "Jevan Chan",
            "username": "jevancc"
          },
          "committer": {
            "email": "jevan.cnchan@gmail.com",
            "name": "Jevan Chan",
            "username": "jevancc"
          },
          "distinct": false,
          "id": "be26b10ea83b9ee55568e4d311e894dd510f30c4",
          "message": "Fix string.prototype methods and add static string methods (#1123)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes existing string prototype methods in #13 and adds static methods.\r\n\r\nIt changes the following:\r\n\r\n- Fix bugs in existing string prototype methods and improve readability (e.g. rename variables to match the names in spec)\r\n- Add static methods `String.raw`, `String.fromCharCode`, `String.fromCodePoint`\r\n- Fix broken unit tests\r\n\n\nCo-authored-by: RageKnify <RageKnify@gmail.com>",
          "timestamp": "2022-02-15T07:31:18Z",
          "tree_id": "5a0bcd8776820c15f49a8e96dd677cb2b7002f35",
          "url": "https://github.com/boa-dev/boa/commit/be26b10ea83b9ee55568e4d311e894dd510f30c4"
        },
        "date": 1644912009406,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4405,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13759,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16073,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9304,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10003,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10711,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6471,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8455,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8147,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10148,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11892,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13244,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135659,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7494,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10945,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5656,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11014,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14121,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13820,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5486,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28647,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25035,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 655,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1477,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 963,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 967,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1151,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1033,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1047,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1165,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1155,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 827,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1173,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2759,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1060,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1306,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 871,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 639,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 692,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1024,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 395,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2146,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2134,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4897,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43764,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2777601,
            "range": "± 12094",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6115,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6375,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6759,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9866,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9877,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12857,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12844,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10587,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3126965,
            "range": "± 4827",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1352973,
            "range": "± 7183",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6136,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7175,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5278,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5309,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6776,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8544,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1477760,
            "range": "± 8110",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1357500,
            "range": "± 7087",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6db813f05509f1d449353aa143acb0429761585e",
          "message": "Bump webpack from 5.68.0 to 5.69.0 (#1841)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.68.0 to 5.69.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.69.0</h2>\n<h1>Features</h1>\n<ul>\n<li>automatically switch to an ESM compatible environment when enabling ESM output mode</li>\n<li>handle multiple alternative directories (e. g. due to <code>resolve.alias</code> or <code>resolve.modules</code>) when creating an context module</li>\n<li>add <code>util/types</code> to node.js built-in modules</li>\n<li>add <code>__webpack_exports_info__.&lt;name&gt;.canMangle</code> api</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix bug in chunk graph generation which leads to modules being included in chunk desprite them being already included in parent chunks</li>\n<li>avoid writing more than 2GB at once during cache serialization (as workaround for node.js/libuv bug on MacOS)</li>\n<li>fix handling of whitespaces in semver ranges when using Module Federation</li>\n<li>avoid generating hashes which contain only numbers as they likely conflict with module ids</li>\n<li>fix resource name based placeholders for data uris</li>\n<li>fix cache serialization for context elements</li>\n<li>fix passing of <code>stage</code> option when instrumenting plugins for the ProfilingPlugin</li>\n<li>fix tracking of declarations in concatenated modules to avoid conflicts</li>\n<li>fix unstable mangling of exports</li>\n<li>fix handling of <code>#</code> in paths of loaders</li>\n<li>avoid unnecessary cache update when using <code>experiments.buildHttp</code></li>\n</ul>\n<h1>Contributing</h1>\n<ul>\n<li>update typescript and jest</li>\n</ul>\n<h1>Developer Experience</h1>\n<ul>\n<li>expose some additional typings for usage in webpack-cli</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/9d21401151b32abcefad0ffdb3238da91e2089ef\"><code>9d21401</code></a> 5.69.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/ba4e83c3a9430539e381c34022d629e78edc93c7\"><code>ba4e83c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15373\">#15373</a> from webpack/fix/issue-14907</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/7badefda017fa223617405942796d8831c52275f\"><code>7badefd</code></a> remove big assets case from allowlist</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/06c8b81531360b9d69a5d8cdd29b6561cf17ded1\"><code>06c8b81</code></a> Merge remote-tracking branch 'origin/main' into fix/issue-14907</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/4a53e9af65f2d965a59eed05be15445683b2580e\"><code>4a53e9a</code></a> limit writes to</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/18c3590b28fcaaa84b63f18968b09602e4a7e259\"><code>18c3590</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15315\">#15315</a> from webpack/fix/issue-13022</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/4edf949da3413b6be03a5a199ca58cc13384b1b8\"><code>4edf949</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15370\">#15370</a> from webpack/fix/partial-15366</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/02332b9c3dc1236918c2a9cbf510e6e622193df3\"><code>02332b9</code></a> Merge branch 'main' into fix/partial-15366</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/f52b8c572c3f83afcf7799b8121a9ab50787610d\"><code>f52b8c5</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/14757\">#14757</a> from webpack/fix-14755</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/896efde07d775043765a300961c8b932349254bb\"><code>896efde</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15367\">#15367</a> from webpack/fix/issues-15214</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.68.0...v5.69.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.68.0&new-version=5.69.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-16T10:38:02Z",
          "tree_id": "32878ba3ca74e4c98828df7d9ee4c83b678dfede",
          "url": "https://github.com/boa-dev/boa/commit/6db813f05509f1d449353aa143acb0429761585e"
        },
        "date": 1645009683916,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 401,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4657,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15666,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18027,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10229,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11003,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11684,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7050,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9312,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8928,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11070,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13238,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14751,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 161061,
            "range": "± 1307",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8221,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12138,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6193,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12341,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16005,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15724,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6129,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32124,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28040,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 758,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1509,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1705,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1148,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1151,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1368,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1231,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1238,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1370,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1382,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 964,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1394,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3282,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1246,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1540,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1060,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 749,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 793,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1209,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 462,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2562,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2547,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5823,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51987,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3282307,
            "range": "± 30793",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7385,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7719,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8123,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11698,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11599,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15194,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15247,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12335,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3729233,
            "range": "± 26977",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1595923,
            "range": "± 12364",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7358,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8584,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6275,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6336,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8008,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10243,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2348,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1757793,
            "range": "± 13406",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1603153,
            "range": "± 21827",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7716c53fa6689aeb2d3d9cfe2979af9240a14c9c",
          "message": "Bump rand from 0.8.4 to 0.8.5 (#1839)\n\nBumps [rand](https://github.com/rust-random/rand) from 0.8.4 to 0.8.5.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/rand/blob/master/CHANGELOG.md\">rand's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.8.5] - 2021-08-20</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Fix build on non-32/64-bit architectures (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1144\">#1144</a>)</li>\n<li>Fix &quot;min_const_gen&quot; feature for <code>no_std</code> (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1173\">#1173</a>)</li>\n<li>Check <code>libc::pthread_atfork</code> return value with panic on error (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1178\">#1178</a>)</li>\n<li>More robust reseeding in case <code>ReseedingRng</code> is used from a fork handler (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1178\">#1178</a>)</li>\n<li>Fix nightly: remove unused <code>slice_partition_at_index</code> feature (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1215\">#1215</a>)</li>\n<li>Fix nightly + <code>simd_support</code>: update <code>packed_simd</code> (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1216\">#1216</a>)</li>\n</ul>\n<h3>Rngs</h3>\n<ul>\n<li><code>StdRng</code>: Switch from HC128 to ChaCha12 on emscripten (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1142\">#1142</a>).\nWe now use ChaCha12 on all platforms.</li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n<li>Added docs about rand's use of const generics (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1150\">#1150</a>)</li>\n<li>Better random chars example (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1157\">#1157</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/rand/commit/937320cbfeebd4352a23086d9c6e68f067f74644\"><code>937320c</code></a> Update CHANGELOG for 0.8.5 (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1221\">#1221</a>)</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/2924af688d352b889322870d017356f12651866b\"><code>2924af6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1183\">#1183</a> from vks/fill-float-doc</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/dbbc1bf3176138c867f3d84c0c4d288119a5a84e\"><code>dbbc1bf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1218\">#1218</a> from Will-Low/master</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/9f20df04d88698c38515833d6db62d7eb50d8b80\"><code>9f20df0</code></a> Making distributions comparable by deriving PartialEq. Tests included</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/a407bdfa4563d0cfbf744049242926c8de079d3f\"><code>a407bdf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1216\">#1216</a> from rust-random/work5</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/d3ca11b0bcc1f42fe34ba4f90f99509b7eb4ff18\"><code>d3ca11b</code></a> Update to packed_simd_2 0.3.7</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/fa04c15d0bb5842fdbdbb73d7a53ead36f3fcf52\"><code>fa04c15</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1215\">#1215</a> from Lantern-chat/master</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/73f8ffd16379390e624ac53cd6882dd679dd9a6f\"><code>73f8ffd</code></a> Remove unused <code>slice_partition_at_index</code> feature</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/8f372500f05dfadcff6c35e773e81029ab7debad\"><code>8f37250</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1208\">#1208</a> from newpavlov/rand_distr/fix_no_std</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/9ef737ba5b814f6ab36cebafb59ad29885d68a05\"><code>9ef737b</code></a> update changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-random/rand/compare/0.8.4...0.8.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rand&package-manager=cargo&previous-version=0.8.4&new-version=0.8.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-16T10:46:46Z",
          "tree_id": "e8911e1d72c0eb7968ef8a62476898ce6951ea91",
          "url": "https://github.com/boa-dev/boa/commit/7716c53fa6689aeb2d3d9cfe2979af9240a14c9c"
        },
        "date": 1645010541222,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 334,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4324,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14003,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16357,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9435,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10014,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10845,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6529,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8564,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8229,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10162,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12148,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13508,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137455,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7600,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10934,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5692,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11168,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14203,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13996,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5743,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29010,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25405,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 639,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1286,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1456,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 967,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 988,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1171,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1036,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1037,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1167,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1159,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 818,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1172,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2749,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1060,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1148,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 774,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 587,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 613,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 917,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 397,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2166,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2140,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4886,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44490,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2784909,
            "range": "± 4778",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6145,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6420,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6965,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8487,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8429,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12641,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11178,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9188,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2883130,
            "range": "± 10114",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1228191,
            "range": "± 5047",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5412,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6342,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4625,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4966,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6505,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7989,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1792,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1321881,
            "range": "± 11726",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1226501,
            "range": "± 9672",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "committer": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "distinct": false,
          "id": "826adb200945e06a5fd79b4dba433578103356da",
          "message": "Rework RegExp struct to include bitflags field (#1837)\n\nThis Pull Request fixes/closes #1819.\r\n\r\nIt changes the following:\r\n\r\n- Move the bitflags from `boa/src/syntax/lexer/regex.rs` to `boa/src/builtins/regexp/mod.rs`\r\n- Replace the booleans in the RegExp struct to include the bitflags struct\r\n- Update match expressions to make use of the bitflags struct\r\n\n\nCo-authored-by: Aäron Munsters <45006406+aaronmunsters@users.noreply.github.com>",
          "timestamp": "2022-02-16T13:02:55Z",
          "tree_id": "0b21b8b405a0633bae1da138598b8a089044a32b",
          "url": "https://github.com/boa-dev/boa/commit/826adb200945e06a5fd79b4dba433578103356da"
        },
        "date": 1645018431058,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 389,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4442,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14838,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17561,
            "range": "± 351",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10067,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10344,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11334,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6758,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9047,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8507,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10720,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12506,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14327,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151390,
            "range": "± 3421",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8163,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11686,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5924,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11860,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15406,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15049,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5878,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30154,
            "range": "± 621",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27170,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 730,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1477,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1676,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1118,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1127,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1316,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1202,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1190,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1341,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1339,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 946,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1374,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3276,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1257,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1507,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1032,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 735,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 780,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1194,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 449,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2523,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2460,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6094,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51810,
            "range": "± 1252",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3323311,
            "range": "± 197973",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7205,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7372,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8035,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10904,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10865,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14368,
            "range": "± 377",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14531,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12176,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3857049,
            "range": "± 55249",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1607141,
            "range": "± 31328",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7028,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8325,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6157,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6551,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8663,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10772,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2360,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1776729,
            "range": "± 36901",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1654133,
            "range": "± 61892",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "51537badc3c481d03313f52dbbf3ffc510b09267",
          "message": "Ignore wastefull `RegExp` tests (#1840)\n\nWith the implementation of `String.fromCodePoint` in #1123 some `RegExp` tests are now running for a long time. These tests check every unicode codepoint for all regexp property escape/character classes.\r\n\r\nThis not only makes the developer experience significantly worse, but also wastes cpu resources for the benefit of \"completeness\". I think these tests are completely useless. Ironically the unicode tables in the tests are generated - from the same data, that the unicode tables in the regex engine are also generated.\r\n\r\n262 suite runtime:\r\nBefore: ~03:30 https://github.com/boa-dev/boa/runs/5191567446?check_suite_focus=true\r\nAfter: ~31:00 https://github.com/boa-dev/boa/runs/5196405437?check_suite_focus=true",
          "timestamp": "2022-02-16T15:49:37Z",
          "tree_id": "7d0c49e0d18ce5aa23ef2de847e1e3e5ddd379b2",
          "url": "https://github.com/boa-dev/boa/commit/51537badc3c481d03313f52dbbf3ffc510b09267"
        },
        "date": 1645028413101,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4503,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14581,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17029,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9651,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10286,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11178,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6678,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8757,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8516,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10539,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12306,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13943,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138158,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7998,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11497,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5929,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11538,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14755,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14644,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5688,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30177,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26479,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 650,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1291,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1471,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 962,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 976,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1164,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1022,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1048,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1138,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1138,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 828,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1162,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2744,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1073,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1297,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 890,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 649,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 694,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1034,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 392,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2181,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2119,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4844,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44265,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2694478,
            "range": "± 2867",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6075,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6291,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6758,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9484,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9580,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12721,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12711,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10406,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3265573,
            "range": "± 5965",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1390045,
            "range": "± 8048",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6060,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7078,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5205,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5702,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7216,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8942,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2002,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1497501,
            "range": "± 20662",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1386347,
            "range": "± 9436",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3d9c8b229d3b3802fd8fcd7f65e9a9d26c94aae4",
          "message": "Bump serde_json from 1.0.78 to 1.0.79 (#1838)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.78 to 1.0.79.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.79</h2>\n<ul>\n<li>Allow <code>RawValue</code> deserialization to propagate <code>\\u</code> escapes for unmatched surrogates, which can later by deserialized to Vec&lt;u8&gt; (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/830\">#830</a>, thanks <a href=\"https://github.com/lucacasonato\"><code>@​lucacasonato</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/7025523603fe604d11b92ccd4ca314e343d3ae50\"><code>7025523</code></a> Release 1.0.79</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/7e56a406e5e3b2166e6c77a32136d7751093226d\"><code>7e56a40</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/830\">#830</a> from lucacasonato/support_lone_surrogates_in_raw_value</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/977975ee650829a1f3c232cd5f641a7011bdce1d\"><code>977975e</code></a> Ignore buggy ptr_arg clippy lint</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/aa78d6ca4e26bca42156aa7185d35c637c38b644\"><code>aa78d6c</code></a> Resolve needless_borrow clippy lint</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/json/compare/v1.0.78...v1.0.79\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.78&new-version=1.0.79)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-17T16:32:20Z",
          "tree_id": "1f81af8c8f511450ac5ee550ae88c72180292761",
          "url": "https://github.com/boa-dev/boa/commit/3d9c8b229d3b3802fd8fcd7f65e9a9d26c94aae4"
        },
        "date": 1645117670097,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 352,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3795,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12147,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14017,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9241,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8722,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9376,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6321,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7268,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7042,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8728,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10495,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11659,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 122246,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6564,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9459,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5574,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9655,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12375,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12175,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4881,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25080,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22039,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 565,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1134,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1288,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 857,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 869,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1028,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 911,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 910,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1021,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1016,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 725,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1041,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2660,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 943,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1148,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 788,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 576,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 621,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 912,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 352,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 1951,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 1917,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4351,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38370,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2437939,
            "range": "± 5581",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5473,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5653,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6016,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8275,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8445,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11090,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11106,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9162,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3118298,
            "range": "± 9449",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1327044,
            "range": "± 4185",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5361,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7047,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4632,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4953,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6327,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8943,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1771,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1285118,
            "range": "± 7928",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1190767,
            "range": "± 18002",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "748465d17b16287901d8540a8ae3fe6a0b69d365",
          "message": "Unwrap removal (#1842)\n\nThis removes all the calls to  `unwrap()` in the codebase, which made me found a couple of places where it wasn't needed, and could be improved. I also noticed we don't have dependabot updates for the test262 submodule and the interner dependencies, so I added those.\r\n\r\nI added lints so that no new unwraps are added.",
          "timestamp": "2022-02-17T17:44:21Z",
          "tree_id": "16e32dd9f1b2314fb016ba8a996224d047550e7b",
          "url": "https://github.com/boa-dev/boa/commit/748465d17b16287901d8540a8ae3fe6a0b69d365"
        },
        "date": 1645121758626,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 326,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4443,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14136,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16435,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9560,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10168,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10907,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6561,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8639,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8297,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10364,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12152,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13593,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138913,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7855,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11340,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5847,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11326,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14376,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14186,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5635,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29083,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25404,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 644,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1262,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1464,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 956,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 961,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1143,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1020,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1026,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1137,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1128,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 804,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1141,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2729,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1055,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1282,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 885,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 638,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 690,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1028,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 385,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2144,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2148,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5020,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43937,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2747310,
            "range": "± 6125",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6203,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6429,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6813,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9804,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9728,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12981,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13076,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10272,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3208683,
            "range": "± 4627",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1367921,
            "range": "± 4124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6150,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7165,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5224,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5330,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6812,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8719,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1999,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1454623,
            "range": "± 7442",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1343348,
            "range": "± 11287",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4a33d20c7156ba5f6d6d99cea41fa3e959afbdf3",
          "message": "Bump webpack from 5.69.0 to 5.69.1 (#1843)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.69.0 to 5.69.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.69.1</h2>\n<h1>Revert</h1>\n<ul>\n<li>revert &quot;handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module&quot;</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/dfdc8b133d3d49371251e29efeefb9d31b982c9e\"><code>dfdc8b1</code></a> 5.69.1</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/dd53923cd004cca233d6f4f3fe455308ce0f8cb3\"><code>dd53923</code></a> Revert &quot;Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15332\">#15332</a> from webpack/fix/context-resolve-issue-11335&quot;</li>\n<li>See full diff in <a href=\"https://github.com/webpack/webpack/compare/v5.69.0...v5.69.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.69.0&new-version=5.69.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-17T20:59:05Z",
          "tree_id": "ed458efc0c5610583668ed4d0a6ac54d59d3b7a2",
          "url": "https://github.com/boa-dev/boa/commit/4a33d20c7156ba5f6d6d99cea41fa3e959afbdf3"
        },
        "date": 1645133423332,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4490,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14965,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17233,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9986,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10647,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11578,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6729,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8940,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8443,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10711,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12592,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14123,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 157292,
            "range": "± 2443",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8116,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11848,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5956,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11645,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15107,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14875,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5882,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31051,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26700,
            "range": "± 423",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 739,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1448,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1695,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1126,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1135,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1375,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1239,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1182,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1344,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1322,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 950,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1400,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3288,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1237,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1525,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1038,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 757,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 791,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1198,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 468,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2548,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2516,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6026,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52585,
            "range": "± 639",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3258844,
            "range": "± 23937",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7467,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7772,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8157,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11666,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11574,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15339,
            "range": "± 225",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15184,
            "range": "± 294",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12148,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3807287,
            "range": "± 61419",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1611542,
            "range": "± 28269",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7253,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8620,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6215,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6376,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8305,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10428,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2397,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1754031,
            "range": "± 13418",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1620593,
            "range": "± 12482",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "e80028355217e498008c0b9b27f8be5b0d737bab",
          "message": "Bump benchmark-action/github-action-benchmark from 1.12.0 to 1.13.0 (#1845)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.12.0 to 1.13.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.13.0</h2>\n<p>Feat: Updated urls to support GHES (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/104\">#104</a>)\nFeat: Add support for BenchmarkDotNet (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/109\">#109</a>)\nChore: Bump node-fetch from 2.6.6 to 2.6.7 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/107\">#107</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.13.0\">v1.13.0</a> - 17 Feb 2022</h1>\n<ul>\n<li><strong>Feat:</strong> Updated urls to support GHES (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/104\">#104</a>)</li>\n<li><strong>Feat:</strong> Add support for BenchmarkDotNet (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/109\">#109</a>)</li>\n<li><strong>Chore</strong> Bump node-fetch from 2.6.6 to 2.6.7 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/107\">#107</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/3d3bca03e83647895ef4f911fa57de3c7a391aaf\"><code>3d3bca0</code></a> v1.13.0</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.12.0...v1.13.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.12.0&new-version=1.13.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-18T19:45:46Z",
          "tree_id": "012c9fbf1b6cc53095c17c4e280622195707688e",
          "url": "https://github.com/boa-dev/boa/commit/e80028355217e498008c0b9b27f8be5b0d737bab"
        },
        "date": 1645215672979,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 391,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4742,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15722,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18052,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10366,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10961,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11782,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6983,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9392,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8913,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11209,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13221,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14869,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 156955,
            "range": "± 3302",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8498,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11881,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6237,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12068,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15310,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15305,
            "range": "± 365",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6188,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31368,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27732,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 784,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1487,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1705,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1128,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1146,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1367,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1228,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1214,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1361,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1341,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 945,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1338,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3208,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1244,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1505,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 994,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 733,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 775,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1195,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 473,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2532,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2476,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5955,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52047,
            "range": "± 889",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3178544,
            "range": "± 58912",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7408,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7822,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8072,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11386,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11584,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15204,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15382,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12205,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3773288,
            "range": "± 110842",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1595667,
            "range": "± 31542",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7192,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8533,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6281,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6364,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8232,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10327,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2336,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1709198,
            "range": "± 29746",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1604879,
            "range": "± 28508",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "29cd909f88d9bcab59eedda95639756a45235d70",
          "message": "Refactor the environment for runtime performance (#1829)\n\nThis is an attempt to refactor the environments to be more performant at runtime. The idea is, to shift the dynamic hashmap environment lookups from runtime to compile time.\r\n\r\nCurrently the environments hold hashmaps that contain binding identifiers, values and additional information that is needed to identify some errors. Because bindings in outer environments are accessible from inner environments, this can lead to a traversal through all environments (in the worst case to the global environment).\r\n\r\nThis change to the environment structure pushes most of the work that is needed to access bindings to the compile time. At compile time, environments and bindings in the environments are being assigned indices. These indices are then stored instead of the `Sym` that is currently used to access bindings. At runtime, the indices are used to access bindings in a fixed size `Vec` per environment. This brings multiple benefits:\r\n - No hashmap access needed at runtime\r\n - The number of bindings per environment is known at compile time. Environments only need a single allocation, as their size is constant.\r\n - Potential for optimizations with `unsafe` https://doc.rust-lang.org/std/vec/struct.Vec.html#method.get_unchecked\r\n\r\nAdditionally, this changes the global object to have it's bindings directly stored on the `Realm`. This should reduce some overhead from access trough gc objects and makes some optimizations for the global object possible.\r\n\r\nThe benchmarks look not that great on the first sight. But if you look closer, I think it is apparent, that this is a positive change. The difference is most apparent on Mini and Clean as they are longer (still not near any real life js but less specific that most other benchmarks):\r\n\r\n| Test | Base         | PR               | % |\r\n|------|--------------|------------------|---|\r\n| Clean js (Compiler) | **1929.1±5.37ns** | 4.1±0.02µs | **+112.53%** |\r\n| Clean js (Execution) | 1487.4±7.50µs | **987.3±3.78µs** | **-33.62%** |\r\n\r\nThe compile time is up in all benchmarks, as expected. The percentage is huge, but if we look at the real numbers, we can see that this is an issue of orders of magnitude. While compile is up `112.53%`, the real change is `~+2µs`. Execution is only down `33.62%`, but the real time changed by `~-500µs`.\n\nCo-authored-by: Iban Eguia <razican@protonmail.ch>",
          "timestamp": "2022-02-19T18:45:08Z",
          "tree_id": "64f787fe6eb9f5647fe26cacff5e7b08d55c7641",
          "url": "https://github.com/boa-dev/boa/commit/29cd909f88d9bcab59eedda95639756a45235d70"
        },
        "date": 1645298220591,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 228,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3750,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12267,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14137,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8152,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8687,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9294,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5558,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7458,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7092,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8812,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10491,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11922,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 128270,
            "range": "± 1656",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6677,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9908,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5092,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9820,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12574,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12441,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5052,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25965,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22665,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 730,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1602,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1920,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1176,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1151,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1334,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1157,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1146,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1365,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1340,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1055,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1522,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3040,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1397,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1746,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1106,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 866,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 903,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1201,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 403,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2852,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2752,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4296,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37025,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2412479,
            "range": "± 1560",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5575,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5804,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6211,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8610,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8554,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11331,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11338,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9357,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2813613,
            "range": "± 3963",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1207246,
            "range": "± 5268",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4913,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5351,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4452,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3783,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4890,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6479,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1892,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 960347,
            "range": "± 4043",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 885926,
            "range": "± 3857",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "30553356+y21@users.noreply.github.com",
            "name": "Timo",
            "username": "y21"
          },
          "committer": {
            "email": "30553356+y21@users.noreply.github.com",
            "name": "Timo",
            "username": "y21"
          },
          "distinct": false,
          "id": "fabbf15dd3cd76495b3bd2ada9323becbcfe5832",
          "message": "Handle allocation errors (#1850)\n\nFixes #1847 by wrapping the `std::alloc::alloc()` call in `try_alloc()`, which checks that the returned pointer is non-null and handles allocation errors that way. It will now abort the process instead of executing UB in the error path",
          "timestamp": "2022-02-20T15:36:07Z",
          "tree_id": "12c7eefb4974383e04ffb79adfa40fb9460fd037",
          "url": "https://github.com/boa-dev/boa/commit/fabbf15dd3cd76495b3bd2ada9323becbcfe5832"
        },
        "date": 1645373206173,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 272,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4313,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13605,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15800,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9052,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9700,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10454,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6254,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8222,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7954,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9940,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11765,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13107,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 119967,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6466,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9395,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4879,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9681,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12316,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12154,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4842,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24929,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21943,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 730,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1614,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1916,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1159,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1163,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1352,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1136,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1154,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1344,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1346,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1053,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1493,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2954,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1364,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1777,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1082,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 863,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 902,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1215,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 405,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2853,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2776,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4235,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38134,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2412740,
            "range": "± 3174",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5511,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5813,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6157,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8124,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8084,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10821,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10839,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9161,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2850786,
            "range": "± 4386",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1204333,
            "range": "± 4275",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4844,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5389,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4368,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3844,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4917,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6680,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1796,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 980943,
            "range": "± 3653",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 909147,
            "range": "± 3648",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "46f96d4bea3e2f16c07db5e6cb51785bc6e321d1",
          "message": "Fix wasm use outside browsers (#1846)\n\nThis Pull Request fixes/closes #1670.\r\n\r\nIt changes the following:\r\n\r\n- Removes the \"js\" feature by default from getrandom for wasm (still there for boa_wasm)\r\n- Updates dependencies\r\n\r\nNote that this change was introduced in #1521, after #1475. We must make sure that the issue doesn't come back.",
          "timestamp": "2022-02-20T21:54:15Z",
          "tree_id": "8ed27d0402c3f2fe02888efdf3f6fb4c6e969eaf",
          "url": "https://github.com/boa-dev/boa/commit/46f96d4bea3e2f16c07db5e6cb51785bc6e321d1"
        },
        "date": 1645396444024,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 351,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4416,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14703,
            "range": "± 343",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17084,
            "range": "± 506",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9459,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10354,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10942,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6456,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8882,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8536,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10719,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12398,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13292,
            "range": "± 724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142021,
            "range": "± 6084",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7494,
            "range": "± 416",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10848,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5318,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11587,
            "range": "± 431",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14782,
            "range": "± 582",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14601,
            "range": "± 640",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5848,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30075,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26968,
            "range": "± 829",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 932,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1991,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2419,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1479,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1534,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1687,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1490,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1482,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1795,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1723,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1338,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1945,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3620,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1746,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2255,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1378,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1089,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1427,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 542,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3571,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3609,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5395,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46573,
            "range": "± 1647",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3075501,
            "range": "± 86123",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7136,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7429,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8036,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11225,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11428,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14470,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14081,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11855,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3655615,
            "range": "± 97635",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1553194,
            "range": "± 72335",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6360,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6862,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5334,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4738,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6132,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8205,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2270,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1259056,
            "range": "± 27430",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1171689,
            "range": "± 14628",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "1d6e14763bb3fb780828ad9f265c7c60285b36d2",
          "message": "Refactor mapped `Arguments` object (#1849)\n\nThis refactors the representation of the `[[ParameterMap]]` internal slot on the `Arguments` exotic object to be faster at runtime.\r\n\r\nPreviously `[[ParameterMap]]` was a `JsObject` like the spec describes. This can be pretty slow a runtime, because the argument getters and setters must be represented as function objects on the `[[ParameterMap]]` object. In addition to the time spend on creation and calling of those functions, every getter/setter needs a cloned gc reference to the function environment to access the bindings. This adds to the gc overhead.\r\n\r\nThe spec states that the `[[ParameterMap]]` internal slot doesn't have to be a `JsObject`. See NOTE 3 here: https://tc39.es/ecma262/#sec-arguments-exotic-objects\r\nLeveraging this freedom, we can use a more optimized representation, that avoids any `JsObject` usage and only needs one clone of the function environment.",
          "timestamp": "2022-02-21T11:52:01Z",
          "tree_id": "a91ee338143160be89d43cddbf8229291c2764f4",
          "url": "https://github.com/boa-dev/boa/commit/1d6e14763bb3fb780828ad9f265c7c60285b36d2"
        },
        "date": 1645446302988,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4241,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13516,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15857,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9026,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9706,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10378,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6318,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8316,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8007,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9974,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11791,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13060,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135810,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7331,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10652,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5528,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11018,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14038,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13762,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5429,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28406,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24870,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 813,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1814,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2168,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1291,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1313,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1502,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1322,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1301,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1592,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1566,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1190,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1734,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3590,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1529,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2008,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1196,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 989,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1065,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1388,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 467,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3223,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3121,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4502,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41898,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1775831,
            "range": "± 2917",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6125,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6347,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6722,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9583,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9541,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12515,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12539,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10274,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3113604,
            "range": "± 4382",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1341924,
            "range": "± 2250",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5325,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5838,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4787,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4377,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5646,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7363,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1991,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1073986,
            "range": "± 6903",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 992559,
            "range": "± 6544",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "1d2851465ff908bc29b1f62feb00eb1497b05fd1",
          "message": "Add assertion to check that a break label is identified at compile-time (#1852)\n\nThis PR changes the following:\r\n\r\n- Adds a check at compile time for the existence of a break label (this should be a syntax error in the future; refactor from panics to results in compile should be a separate PR)\r\n- Adds a test for break label existence in boa/tests\r\n\r\n262 misses some fairly important JS parity issues and not performing this check eagerly can lead to other more severe issues during VM execution.",
          "timestamp": "2022-02-21T15:50:29Z",
          "tree_id": "74b8e101b427b2eb6066cca3e56064d186e346a1",
          "url": "https://github.com/boa-dev/boa/commit/1d2851465ff908bc29b1f62feb00eb1497b05fd1"
        },
        "date": 1645460421749,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 272,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4559,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14709,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16952,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9723,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10407,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11140,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6724,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8917,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8548,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10709,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12548,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14079,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145749,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8001,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11696,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5985,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11897,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15033,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14767,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5665,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30587,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26515,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 865,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1830,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2200,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1293,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1322,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1521,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1344,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1316,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1528,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1542,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1180,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1721,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3414,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1550,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2036,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1207,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 982,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1027,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 466,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3259,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3173,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4494,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42287,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1786690,
            "range": "± 11285",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6016,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6287,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6716,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8970,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9015,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11943,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12095,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10229,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3025401,
            "range": "± 4807",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1324411,
            "range": "± 3571",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5257,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5806,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4726,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4438,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5668,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7479,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2018,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1078728,
            "range": "± 10589",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995676,
            "range": "± 5465",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "committer": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "distinct": false,
          "id": "517c6724c9d674bdb5b3781a1117662222c26f56",
          "message": "Correct reference error message (#1855)\n\nThis Pull Request fixes/closes the incorrect message thrown for the following code:\r\n\r\n```javascript\r\n\"use strict\";\r\nfoo = \"bar\";\r\n```\r\n\r\nWhich would throw the following before the change (incorrect):\r\n`Uncaught \"ReferenceError\": \"binding already exists: foo\"`\r\n\r\nAnd would throw the following after the change (correct):\r\n`Uncaught \"ReferenceError\": \"assignment to undeclared variable foo\"`",
          "timestamp": "2022-02-21T20:50:38Z",
          "tree_id": "034f6d49a8eb61f9351465499b4e3386b53e633f",
          "url": "https://github.com/boa-dev/boa/commit/517c6724c9d674bdb5b3781a1117662222c26f56"
        },
        "date": 1645478563841,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4267,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13687,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15799,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9158,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9775,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10633,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6235,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8259,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7931,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9941,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11790,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13325,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 136850,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7425,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10817,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5572,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10998,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13937,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13774,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5477,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28419,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24880,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 848,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1841,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2194,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1308,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1311,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1539,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1298,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1318,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1524,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1560,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1201,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1734,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3401,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1557,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2034,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1239,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 980,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1022,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1388,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3238,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3143,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4512,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42034,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1790149,
            "range": "± 3139",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6085,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6343,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6726,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8986,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8964,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12030,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12078,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10224,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3022934,
            "range": "± 4984",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1315861,
            "range": "± 4040",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5270,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5841,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4721,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4474,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5648,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7452,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2012,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1081938,
            "range": "± 5452",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1002552,
            "range": "± 12071",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "2c6acebe6cbf20356eae67840830fb78bd90ec74",
          "message": "Bump test262 from `281c781` to `18ce639` (#1857)\n\nBumps [test262](https://github.com/tc39/test262) from `281c781` to `18ce639`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/18ce639a4c4768de337fa30b83bbb6de02b0e1a5\"><code>18ce639</code></a> Port tests for PlainTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/1fe9bd3951b612aaa91342e3771bcbfef8c7affd\"><code>1fe9bd3</code></a> Add a basic test for PlainDateTime#toPlainTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/615a2eb9a16970ef200f93335cf34e41f8568b53\"><code>615a2eb</code></a> Fix tests for private reference with logical assignment</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ec39db5877853f6c8703156af2530730bfdf59d5\"><code>ec39db5</code></a> Test array grouping Symbol.unscopables values</li>\n<li><a href=\"https://github.com/tc39/test262/commit/1b1097dbf6e93fb17b5a8156736563370ad4700e\"><code>1b1097d</code></a> Add tests for compound assignment to private reference</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0b0fbdb04b2706c9a6fd83abe2b2ab2d38ba4c78\"><code>0b0fbdb</code></a> Fix path example in generated test instructions</li>\n<li><a href=\"https://github.com/tc39/test262/commit/08937278f1b5b6e9ac58885a47f84bfb7535a542\"><code>0893727</code></a> Add .case and .template files to .editorconfig</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0370240141c112379911a64983329ff6c6bc541a\"><code>0370240</code></a> Port tests for PlainTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8851f084b6c86a52101081d7d946faedca2e6c82\"><code>8851f08</code></a> Use ECMAScript 6</li>\n<li><a href=\"https://github.com/tc39/test262/commit/df873eed1a717bb59ac8b40f20cf23f19bafb429\"><code>df873ee</code></a> Port tests for PlainYearMonth#{add,subtract}.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/281c781ee4cb66a2e3ad6a26204a6d3f842947d6...18ce639a4c4768de337fa30b83bbb6de02b0e1a5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-21T23:09:45Z",
          "tree_id": "1a847778963476945998fe2304485a3ca650b4f5",
          "url": "https://github.com/boa-dev/boa/commit/2c6acebe6cbf20356eae67840830fb78bd90ec74"
        },
        "date": 1645486931541,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 310,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4482,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15014,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17177,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10006,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10445,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11247,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6788,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8949,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8618,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10807,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12848,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14234,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153632,
            "range": "± 3003",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8085,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12096,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5996,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11944,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15303,
            "range": "± 797",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15275,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6058,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30688,
            "range": "± 574",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27231,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 982,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2134,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2500,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1517,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1561,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1790,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1586,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1561,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1825,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1779,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1378,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1936,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3805,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1770,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2336,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1415,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1021,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1072,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1453,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 505,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3662,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3572,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5117,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49380,
            "range": "± 719",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2051938,
            "range": "± 38914",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6986,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7357,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7677,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10436,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10383,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13944,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13901,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11754,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3571600,
            "range": "± 53732",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1558575,
            "range": "± 23394",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6078,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6711,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5429,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5182,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6501,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8731,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2333,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1247142,
            "range": "± 22917",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1157556,
            "range": "± 19887",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "0a2c60a9aafae7d906021e051c5d623ce4716dc5",
          "message": "Fixed dependabot for submodule (#1856)\n\nThis Pull Request fixes dependabot updates for the Test262 submodule.",
          "timestamp": "2022-02-22T11:57:47Z",
          "tree_id": "1a847778963476945998fe2304485a3ca650b4f5",
          "url": "https://github.com/boa-dev/boa/commit/0a2c60a9aafae7d906021e051c5d623ce4716dc5"
        },
        "date": 1645532804069,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 263,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4255,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13723,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15869,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9261,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9966,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10620,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6341,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8363,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8062,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10016,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11845,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13225,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 136266,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7441,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10837,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5554,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11044,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14065,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13894,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5532,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28577,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25078,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 830,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1858,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2152,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1314,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1330,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1530,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1305,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1312,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1521,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1520,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1178,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1705,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3299,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1521,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2003,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1224,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 970,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1045,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1367,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 448,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3250,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3118,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4434,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42597,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1741298,
            "range": "± 5442",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6006,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6169,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6619,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8878,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9029,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11860,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11866,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10031,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3070118,
            "range": "± 3917",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339414,
            "range": "± 4594",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5157,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5698,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4611,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4402,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5633,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7247,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1081891,
            "range": "± 8617",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 994665,
            "range": "± 4262",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "8c92a8fa25c1339b639a5acc5c3133ae8df670a2",
          "message": "Added conversions from and to serde_json's Value type (#1851)\n\nThis Pull Request closes #1693.\r\n\r\nIt changes the following:\r\n\r\n- It adds a fallible conversion from `serde_json::Value` to `JsValue`, which requires a context.\r\n- It adds a fallible conversion from `JsValue` to `serde_json::Value`, which requires a context.\r\n- Added examples to the documentation of both methods.\r\n- Removed some duplicate and non-needed code that I found while doing this.\r\n\n\nCo-authored-by: RageKnify <RageKnify@gmail.com>",
          "timestamp": "2022-02-22T16:10:32Z",
          "tree_id": "3ee5df1b76113f9aca0c2e9049ccfd72572f0d26",
          "url": "https://github.com/boa-dev/boa/commit/8c92a8fa25c1339b639a5acc5c3133ae8df670a2"
        },
        "date": 1645548176026,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4612,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14605,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17081,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10068,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10776,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11564,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7072,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9165,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8932,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10901,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12910,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14258,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143561,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8083,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11598,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6137,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11603,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14963,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14578,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5713,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30468,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26425,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 875,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2018,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2372,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1370,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1397,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1669,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1332,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1363,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1575,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1587,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1276,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1862,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3429,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1634,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2144,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1277,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 990,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1059,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1442,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 442,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3504,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3448,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4423,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39286,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1751227,
            "range": "± 5173",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6167,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6192,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6641,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9155,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9181,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12345,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12451,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10618,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3048529,
            "range": "± 4764",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1334803,
            "range": "± 6024",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5478,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5946,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4788,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4327,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5579,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7467,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1803,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1051902,
            "range": "± 9003",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 967745,
            "range": "± 7531",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "8ffae9040084a45f7269746f8fd25291dcb078d9",
          "message": "Bump boa-dev/criterion-compare-action from 3.1.0 to 3.2.0 (#1862)\n\nBumps [boa-dev/criterion-compare-action](https://github.com/boa-dev/criterion-compare-action) from 3.1.0 to 3.2.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/boa-dev/criterion-compare-action/releases\">boa-dev/criterion-compare-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.0</h2>\n<p>This release adds support for the <code>--no-default-features</code> tag.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/24774f5bb90597caef8f6c68ae3f910307c9c7a6\"><code>24774f5</code></a> Updated release version (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/37\">#37</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/719795ca4a5b3fe89b9b2317b1e55b993b2f4acb\"><code>719795c</code></a> Bump <code>@​vercel/ncc</code> from 0.33.1 to 0.33.3 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/36\">#36</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/111210b1895f6d4835107623b842e0b36dc465b7\"><code>111210b</code></a> Added dependabot PRs (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/35\">#35</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/28c68fc49b7ab9ac105113ae491f0047b782728c\"><code>28c68fc</code></a> Add workflow to check if generated code is correct (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/34\">#34</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/b96223f167da8f78c37ee9a88e378f7eeba0d6d4\"><code>b96223f</code></a> Add <code>--no-default-features</code> option (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/33\">#33</a>)</li>\n<li>See full diff in <a href=\"https://github.com/boa-dev/criterion-compare-action/compare/v3.1.0...v3.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=boa-dev/criterion-compare-action&package-manager=github_actions&previous-version=3.1.0&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-23T09:41:45Z",
          "tree_id": "192987f58e0b90d10e53a20f8c3499add67cc129",
          "url": "https://github.com/boa-dev/boa/commit/8ffae9040084a45f7269746f8fd25291dcb078d9"
        },
        "date": 1645611067191,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 253,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4696,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14723,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16991,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10007,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10661,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11345,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7054,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8899,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8736,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10767,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12760,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14238,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143069,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8015,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11425,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5993,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11719,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15076,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14590,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5697,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30352,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26351,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 867,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1999,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2371,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1369,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1387,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1657,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1392,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1401,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1600,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1586,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1222,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1916,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3400,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2128,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1252,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1006,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1061,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1460,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 433,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3484,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3391,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4430,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39272,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1769676,
            "range": "± 5026",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6028,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6181,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6607,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9188,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9215,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12396,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12309,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10362,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3058130,
            "range": "± 23978",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1337634,
            "range": "± 7802",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5346,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5881,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4766,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4368,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5554,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7396,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1815,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1042103,
            "range": "± 6169",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 960666,
            "range": "± 4694",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d07945ddf36ecfcb05dc5f5a569efad45e0f6547",
          "message": "Bump getrandom from 0.2.4 to 0.2.5 (#1863)\n\nBumps [getrandom](https://github.com/rust-random/getrandom) from 0.2.4 to 0.2.5.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/getrandom/blob/master/CHANGELOG.md\">getrandom's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.2.5] - 2022-02-22</h2>\n<h3>Added</h3>\n<ul>\n<li>ESP-IDF targets (<code>*‑espidf</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/245\">#245</a></li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Webpack warning caused by dynamic require <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/234\">#234</a></li>\n<li>Error checking on iOS for <code>SecRandomCopyBytes</code> <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/244\">#244</a></li>\n</ul>\n<p><a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/234\">#234</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/234\">rust-random/getrandom#234</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/244\">#244</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/244\">rust-random/getrandom#244</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/245\">#245</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/245\">rust-random/getrandom#245</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/cd3a987b9b2070925f49aaffdf709fa6fbf276ab\"><code>cd3a987</code></a> Release v0.2.5 (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/247\">#247</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/cf02327ac9d93ef46435c86214abd708c540f7d8\"><code>cf02327</code></a> Enable support for espidf (esp32 family of microcontrollers) (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/245\">#245</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/e1a9c9e74068d29bb4158d7282e398591da69811\"><code>e1a9c9e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/246\">#246</a> from rust-random/cross_fix</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/f49f083412457057ad18e2bbb79306f00801d8cf\"><code>f49f083</code></a> fix cross tests</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/21e03e8056cf60881e62184e68c38ad5b1c250a0\"><code>21e03e8</code></a> ios: Fix Error checking for SecRandomCopyBytes (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/244\">#244</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/e6e7dd604899cb075f99aa7f8e9f6fef6a17098f\"><code>e6e7dd6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/234\">#234</a> from mjhanninen/fix-webpack-dynamic-require-error</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/8fad7c5ab4014ac755e6f95fb2bdeef0f674faa2\"><code>8fad7c5</code></a> js: Add comment explaining why we do this hack</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/8372c165afcda48aade40750943eefcf12a483f6\"><code>8372c16</code></a> Fix Webpack warning caused by dynamic require</li>\n<li>See full diff in <a href=\"https://github.com/rust-random/getrandom/compare/v0.2.4...v0.2.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=getrandom&package-manager=cargo&previous-version=0.2.4&new-version=0.2.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-23T10:23:57Z",
          "tree_id": "74a28d66e7cb1c43cabd0b2a2cfb35f652f8f7ac",
          "url": "https://github.com/boa-dev/boa/commit/d07945ddf36ecfcb05dc5f5a569efad45e0f6547"
        },
        "date": 1645613977327,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4209,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13566,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15807,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9060,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9707,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10412,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6221,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8310,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7934,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10007,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11696,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13053,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135244,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7341,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10649,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5475,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10921,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13935,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13692,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4702,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24175,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21104,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 693,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1605,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2218,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1119,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1100,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1299,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1095,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1104,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1327,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1281,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1006,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1728,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2843,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1296,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1688,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1037,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 816,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 881,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1154,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 370,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3242,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2661,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3796,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 35677,
            "range": "± 661",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1517427,
            "range": "± 21172",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5339,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5475,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5809,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7748,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8964,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12174,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10380,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8871,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2642343,
            "range": "± 28314",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1164855,
            "range": "± 18631",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5225,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4926,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4699,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3787,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4828,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7543,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1980,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 939400,
            "range": "± 12844",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 862569,
            "range": "± 12177",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "2c19c6a4b5adab95e7286bbc9a1a9d9a7ef7e62c",
          "message": "Correct pop_on_return behaviour (#1853)\n\nThis PR changes the following:\r\n\r\n- Updates the value of `pop_on_return` after a catch as to prevent VM stack corruption\r\n- Adds two test cases which demonstrate the issue and demonstrate that it has been fixed\r\n\r\nI am unsure if it is possible to abuse the patch provided; one would need to catch from within an array initialisation without calling into another frame (e.g., with a lambda), which I don't think is possible.",
          "timestamp": "2022-02-23T10:37:57Z",
          "tree_id": "25a31393a6d03af5a7873376cb70c05a49075fba",
          "url": "https://github.com/boa-dev/boa/commit/2c19c6a4b5adab95e7286bbc9a1a9d9a7ef7e62c"
        },
        "date": 1645614541285,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 260,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4183,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13477,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15702,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9023,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9707,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10471,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6252,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8215,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7931,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9901,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11723,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12965,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135369,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7360,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10628,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5436,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10910,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13860,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13605,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5470,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28127,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24686,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 839,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1896,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2283,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1344,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1342,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1542,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1332,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1320,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1559,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1579,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1219,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1819,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3321,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1595,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2093,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1273,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 960,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1039,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1381,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 441,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3302,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3217,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4681,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42864,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1854329,
            "range": "± 7705",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6431,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6620,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7031,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9248,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9248,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12563,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12606,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10852,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3118369,
            "range": "± 4199",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1392065,
            "range": "± 4445",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5494,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6030,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4929,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4819,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6082,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8019,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2021,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1132977,
            "range": "± 8189",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1039994,
            "range": "± 6153",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "9dda8d3eaef4a2d8e90a9ceb4857a3c7f2de084a",
          "message": "Toggleable `JsValue` internals displaying (#1865)\n\nThis PR makes `JsValue` (object) only display owned properties, cleans up object printing. This can be toggled with `value.display().internals(true)`\r\n\r\n`>> ({x: 1, y: \"\"})`\r\n_Before:_\r\n<details>\r\n<pre>\r\n{\r\n   x: 1,\r\n   y: \"\",\r\n__proto__: {\r\nhasOwnProperty: {\r\n      length: 1,\r\n        name: \"hasOwnProperty\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\npropertyIsEnumerable: {\r\n      length: 1,\r\n        name: \"propertyIsEnumerable\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\ntoString: {\r\n      length: 0,\r\n        name: \"toString\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\n valueOf: {\r\n      length: 0,\r\n        name: \"valueOf\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\nisPrototypeOf: {\r\n      length: 1,\r\n        name: \"isPrototypeOf\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\nconstructor: {\r\n      create: {\r\n          length: 2,\r\n            name: \"create\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\nsetPrototypeOf: {\r\n          length: 2,\r\n            name: \"setPrototypeOf\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetPrototypeOf: {\r\n          length: 1,\r\n            name: \"getPrototypeOf\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ndefineProperty: {\r\n          length: 3,\r\n            name: \"defineProperty\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ndefineProperties: {\r\n          length: 2,\r\n            name: \"defineProperties\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      assign: {\r\n          length: 2,\r\n            name: \"assign\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n          is: {\r\n          length: 2,\r\n            name: \"is\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n        keys: {\r\n          length: 1,\r\n            name: \"keys\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      values: {\r\n          length: 1,\r\n            name: \"values\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n     entries: {\r\n          length: 1,\r\n            name: \"entries\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n        seal: {\r\n          length: 1,\r\n            name: \"seal\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n    isSealed: {\r\n          length: 1,\r\n            name: \"isSealed\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      freeze: {\r\n          length: 1,\r\n            name: \"freeze\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n    isFrozen: {\r\n          length: 1,\r\n            name: \"isFrozen\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\npreventExtensions: {\r\n          length: 1,\r\n            name: \"preventExtensions\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\nisExtensible: {\r\n          length: 1,\r\n            name: \"isExtensible\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertyDescriptor: {\r\n          length: 2,\r\n            name: \"getOwnPropertyDescriptor\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertyDescriptors: {\r\n          length: 1,\r\n            name: \"getOwnPropertyDescriptors\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertyNames: {\r\n          length: 1,\r\n            name: \"getOwnPropertyNames\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertySymbols: {\r\n          length: 1,\r\n            name: \"getOwnPropertySymbols\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      hasOwn: {\r\n          length: 2,\r\n            name: \"hasOwn\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n fromEntries: {\r\n          length: 1,\r\n            name: \"fromEntries\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      length: 1,\r\n        name: \"Object\",\r\n   prototype: [Cycle],\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\n__proto__: null\r\n    }\r\n}\r\n</pre>\r\n</details>\r\n\r\n_After:_\r\n```text\r\n{\r\n   x: 1,\r\n   y: \"\"\r\n}\r\n```",
          "timestamp": "2022-02-23T19:34:53Z",
          "tree_id": "db61d9d0e40ed8c2b32200172d1a2630bfcf4385",
          "url": "https://github.com/boa-dev/boa/commit/9dda8d3eaef4a2d8e90a9ceb4857a3c7f2de084a"
        },
        "date": 1645647232770,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 316,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4496,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15448,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17504,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9936,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10511,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11470,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6907,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9108,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8631,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10844,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13055,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14485,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 156973,
            "range": "± 3290",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8050,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11835,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5950,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12062,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15687,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15182,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6069,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31100,
            "range": "± 637",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27028,
            "range": "± 619",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 963,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2144,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2481,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1526,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1558,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1763,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1522,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1536,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1773,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1796,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1373,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1964,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3891,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1770,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2309,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1382,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1022,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1090,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1454,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 503,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3682,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3592,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5121,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49852,
            "range": "± 900",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2054374,
            "range": "± 29943",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7028,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7253,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7759,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10449,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10454,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13731,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13908,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11799,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3604044,
            "range": "± 54419",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1580461,
            "range": "± 23871",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6038,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6741,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5507,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5247,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6649,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8508,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2370,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1266186,
            "range": "± 30786",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1158677,
            "range": "± 22706",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "b5678f0b0c65a685a13d833e23fc2021495a9749",
          "message": "Removing internal deprecated functions (#1854)\n\nThis Pull Request is related to #577 .\r\n\r\nIt changes the following:\r\n- Remove `JsValue::set_field`\r\n- Remove `JsValue::set_property`\r\n- Remove almost all uses of `JsValue::get_field`\r\n- Use `.get_v()` instead of `get_field` according to spec in `serialize_json_property`\r\n- Remove `Array::new_array()`\r\n- Remove `Array::add_to_array_object()`",
          "timestamp": "2022-02-26T19:54:07Z",
          "tree_id": "da70b0d6042f6ea6bdddc248f97387fde8d2118a",
          "url": "https://github.com/boa-dev/boa/commit/b5678f0b0c65a685a13d833e23fc2021495a9749"
        },
        "date": 1645907524920,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 323,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4550,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15046,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17417,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9814,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10711,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11160,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6863,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9051,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8768,
            "range": "± 734",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10865,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12765,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14252,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149311,
            "range": "± 4824",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8174,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12110,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5961,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11950,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15977,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15577,
            "range": "± 454",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5686,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31460,
            "range": "± 1411",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27083,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1029,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2267,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2619,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1604,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1614,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1849,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1601,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1625,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1869,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1856,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1455,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2086,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4598,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1889,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2427,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1510,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1091,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1158,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1574,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 593,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3954,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3847,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5211,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49143,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2040076,
            "range": "± 3013",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7037,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7313,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7887,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10440,
            "range": "± 244",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10549,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13957,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14105,
            "range": "± 435",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11371,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3817802,
            "range": "± 101679",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1660054,
            "range": "± 55239",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6128,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6783,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5605,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5226,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6785,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8859,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2298,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1281007,
            "range": "± 11916",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1198831,
            "range": "± 90237",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f7fab0744c43e90f9a46f88c0852035af8a5ff5d",
          "message": "Bump git2 from 0.13.25 to 0.14.0 (#1869)\n\nBumps [git2](https://github.com/rust-lang/git2-rs) from 0.13.25 to 0.14.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/30f013875ec69e6c794392a41e3d8f364ea8ec5b\"><code>30f0138</code></a> Bump versions</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/760330973895a2072afa6b0ffaadd137c9150c6b\"><code>7603309</code></a> Update libgit2 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/527\">#527</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d70b64599a080ea91f6052cb234a4a485f5dcdff\"><code>d70b645</code></a> Make all callbacks optional in libgit2-sys</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d34e49cc120a08557d85134064352925845105fa\"><code>d34e49c</code></a> Remove unnecessary parentheses. (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/526\">#526</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/08114526f83fb64c1620161891a0339da3929b15\"><code>0811452</code></a> Add Repository::fetchhead_to_annotated_commit (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/524\">#524</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/666aeab3491526004b1f458914001ca9801bcb70\"><code>666aeab</code></a> Bump version numbers of crates</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/ecd56b00fb83114cff54fcdaf103aad22e31c59f\"><code>ecd56b0</code></a> Tie Patch lifetime to its input buffers (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/523\">#523</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/9071a87bad3f4ff96ce491f871b0cb1e0ab2549f\"><code>9071a87</code></a> Add <code>Branch::get_mut()</code> (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/522\">#522</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/850c9b96d5659f40ee31d1b3d130a4806c91ff61\"><code>850c9b9</code></a> Update the libgit2 submodule to v0.99.0 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/520\">#520</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/147c5b4f026f8fa53a8a5d79dcbd59012a585a95\"><code>147c5b4</code></a> Add examples (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/519\">#519</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/git2-rs/compare/0.13.25...git2-curl-0.14.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=git2&package-manager=cargo&previous-version=0.13.25&new-version=0.14.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-26T21:43:12Z",
          "tree_id": "d0bbff9dd5eb9acdcbdc9b8c51b48631d621fd7e",
          "url": "https://github.com/boa-dev/boa/commit/f7fab0744c43e90f9a46f88c0852035af8a5ff5d"
        },
        "date": 1645913861182,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 269,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4260,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13347,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15649,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8940,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9626,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10235,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6226,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8218,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7877,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9813,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11478,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12901,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129500,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7320,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10581,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5440,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10908,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14145,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13836,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5170,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28182,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24564,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 858,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1870,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2223,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1323,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1325,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1553,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1326,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1358,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1566,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1574,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1212,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1778,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3811,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1574,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2042,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1240,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 998,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1074,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1439,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 480,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3311,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3211,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4331,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41085,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1712985,
            "range": "± 4451",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5877,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6096,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6565,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8841,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8793,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11880,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11816,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9483,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3129849,
            "range": "± 6213",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1370850,
            "range": "± 3913",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5114,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5717,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4577,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4374,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5598,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7296,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1907,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1069290,
            "range": "± 6220",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 984266,
            "range": "± 4480",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "60e22947065bb87b733af4d20c812571699ca6ed",
          "message": "Implement generator execution (#1790)\n\nThis Pull Request fixes/closes #1559.\r\n\r\nIt changes the following:\r\n\r\n- Implement GeneratorFunction Objects\r\n- Implement Generator Objects\r\n- Implement generator execution in vm\r\n- Create `FormalParameterList` to remove duplicate checks on function parameters \r\n- Refactor  `MethodDefinition` on object literals",
          "timestamp": "2022-02-27T00:09:31Z",
          "tree_id": "533ec4ad34c94c23bfd6f52f3978933a0a286260",
          "url": "https://github.com/boa-dev/boa/commit/60e22947065bb87b733af4d20c812571699ca6ed"
        },
        "date": 1645922224903,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4199,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12461,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15411,
            "range": "± 1075",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8399,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8985,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9690,
            "range": "± 605",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5840,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7609,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7495,
            "range": "± 481",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9120,
            "range": "± 563",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10855,
            "range": "± 686",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12131,
            "range": "± 746",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129208,
            "range": "± 7849",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6912,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10169,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5150,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10274,
            "range": "± 591",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13149,
            "range": "± 1037",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12529,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5008,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 26124,
            "range": "± 1572",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22479,
            "range": "± 1026",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 968,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2039,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2675,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1659,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1675,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1720,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1513,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1483,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1744,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1739,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1421,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2152,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3681,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1738,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2265,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1419,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1124,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1130,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1740,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 586,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3662,
            "range": "± 207",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3734,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6043,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44651,
            "range": "± 5321",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2392837,
            "range": "± 201897",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7812,
            "range": "± 451",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8182,
            "range": "± 2464",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 9332,
            "range": "± 1156",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10923,
            "range": "± 590",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11038,
            "range": "± 566",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14852,
            "range": "± 917",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15139,
            "range": "± 703",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11867,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3469034,
            "range": "± 138760",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1501075,
            "range": "± 78108",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6414,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6939,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5806,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5741,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7008,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9067,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2266,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1314538,
            "range": "± 76273",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1162962,
            "range": "± 68511",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "6b2ca309467af0531386e6cb0faf2f5eddf1ada2",
          "message": "Fix equality between objects and `undefined` or `null` (#1872)\n\nThis PR fixes equality between object and `null` or `undefined` (like `[] == null`), which was failing the test262 harness test [`compare-array-symbol.js`](https://github.com/tc39/test262/blob/18ce639a4c4768de337fa30b83bbb6de02b0e1a5/test/harness/compare-array-symbol.js).",
          "timestamp": "2022-02-27T17:01:28Z",
          "tree_id": "1a4b0d0b1ab6e58a99b826693c7843667d36651f",
          "url": "https://github.com/boa-dev/boa/commit/6b2ca309467af0531386e6cb0faf2f5eddf1ada2"
        },
        "date": 1645982989434,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 315,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4817,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15255,
            "range": "± 750",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18154,
            "range": "± 1126",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9957,
            "range": "± 520",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11170,
            "range": "± 885",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11655,
            "range": "± 612",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7142,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9290,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8834,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11230,
            "range": "± 393",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13226,
            "range": "± 980",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14661,
            "range": "± 678",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 157165,
            "range": "± 6340",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8366,
            "range": "± 287",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12253,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6428,
            "range": "± 367",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12018,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15918,
            "range": "± 709",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15741,
            "range": "± 651",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5966,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31558,
            "range": "± 1274",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27474,
            "range": "± 1150",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1195,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2512,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2803,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1718,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1781,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2027,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1783,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1776,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2049,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2038,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1640,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2212,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4628,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2065,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2622,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1626,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1256,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1330,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1747,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 641,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4347,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4156,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5527,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 48157,
            "range": "± 2635",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2144868,
            "range": "± 103976",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7545,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7680,
            "range": "± 359",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8025,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10697,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10741,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14773,
            "range": "± 613",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14494,
            "range": "± 531",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11410,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3540424,
            "range": "± 153720",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1542374,
            "range": "± 71896",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6234,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6828,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5836,
            "range": "± 447",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5575,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6810,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9456,
            "range": "± 892",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2329,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1247343,
            "range": "± 47112",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1108189,
            "range": "± 58134",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "ada4ca895fb3859025edeec3aad22d6b1036ebd5",
          "message": "Feature arrays with empty elements (#1870)\n\nThis PR adds support for arrays with empty elements e.g. `[\"\", false, , , ]`. Before we were filling the empty places with `undefined`, but this is wrong according to [spec](https://tc39.es/ecma262/#sec-runtime-semantics-arrayaccumulation) there shouldn't be undefined with a index at that place, instead only `length` is incremented. So `[,,,].length == 3` and operations like `[,,,,].indexOf(undefined) == -1`,  `[,,,,].lastIndexOf(undefined) == -1` etc.",
          "timestamp": "2022-02-27T17:08:52Z",
          "tree_id": "967ddba2f2c690161842389823d30d0d2be423ef",
          "url": "https://github.com/boa-dev/boa/commit/ada4ca895fb3859025edeec3aad22d6b1036ebd5"
        },
        "date": 1645983495085,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 349,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4371,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13867,
            "range": "± 347",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16467,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9170,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10166,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11254,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6528,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8451,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8743,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10640,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12276,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12743,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 126739,
            "range": "± 5895",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6864,
            "range": "± 301",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10337,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5211,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10626,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14627,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13978,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5002,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27974,
            "range": "± 1268",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 23865,
            "range": "± 1080",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 961,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2146,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2491,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1433,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1421,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1874,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1644,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1664,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1816,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1803,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1366,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2097,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4201,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1873,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2214,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1417,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1062,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1166,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1558,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 584,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3648,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3602,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4621,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50157,
            "range": "± 1051",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2005266,
            "range": "± 61601",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6938,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6606,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7134,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9771,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10020,
            "range": "± 570",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12901,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12878,
            "range": "± 517",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10220,
            "range": "± 487",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3329603,
            "range": "± 138000",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1486939,
            "range": "± 59719",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5551,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6560,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5383,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5051,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6473,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8810,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2309,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1301711,
            "range": "± 16457",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1187488,
            "range": "± 25251",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "1887b6aebba664072d0183394a9412eec86de121",
          "message": "Removing the panic in favour of an error result (#1874)\n\nThis Pull Request is related to #1873.\r\n\r\nIt changes the following:\r\n\r\n- Removes the panic in case a label is not found. I think this should be an early syntax error, but at least we shouldn't panic while we fix the issue with the labels.\r\n\r\nI think we should solve the issue with labeled statements for 0.15.",
          "timestamp": "2022-02-27T20:02:59Z",
          "tree_id": "fc7bdee150978283649b45d48389026cd7208a20",
          "url": "https://github.com/boa-dev/boa/commit/1887b6aebba664072d0183394a9412eec86de121"
        },
        "date": 1645993884474,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 269,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4309,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13654,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15954,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9017,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9813,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10354,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6369,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8321,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8109,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10011,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11659,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13197,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130030,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7418,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10740,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5538,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10918,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14185,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13796,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5186,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28357,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24661,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 900,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1932,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2253,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1390,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1388,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1572,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1367,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1372,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1583,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1591,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1270,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1826,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3662,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1604,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2082,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1282,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1091,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1454,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3348,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3242,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4407,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41666,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1764567,
            "range": "± 2197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6022,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6244,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6679,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9368,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9471,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12508,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12475,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9632,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3112580,
            "range": "± 24049",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1355420,
            "range": "± 3968",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5253,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5754,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4645,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4433,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5644,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7451,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1959,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1084928,
            "range": "± 7809",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 991350,
            "range": "± 36397",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "ec78e184f32032d80da704f6a72cae49f53cbabc",
          "message": "Removed reference counted pointers from `JsValue` variants (#1866)\n\nThis Pull Request fixes/closes #1864.\r\n\r\nIt changes the following:\r\n\r\n- Removed `JsBigInt` from `Const` nodes, using a boxed `BigInt` instead.\r\n- Modifies the `JsObject` variant so that it has a similar structure to other variants, where the internal structure is private.\r\n\r\nThe size of `JsValue` stays in 2 64-bit words (in a 64-bit system at least), and the size of `Const` also stays the same.\r\n\r\nI have noticed that we clone tokens too much in the parser, so I was thinking that we should implement a by-value getter for `kind()`. Something like `kind_unwrap()`.",
          "timestamp": "2022-02-27T20:11:38Z",
          "tree_id": "e91e2646fd7cc32c04929ea7b41c82797476a98e",
          "url": "https://github.com/boa-dev/boa/commit/ec78e184f32032d80da704f6a72cae49f53cbabc"
        },
        "date": 1645994740636,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4233,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13551,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15997,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9100,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9698,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10348,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6318,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8345,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8006,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9965,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11629,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13089,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129151,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7473,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10939,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5594,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11003,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14168,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13830,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5223,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28145,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24571,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 897,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1936,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2252,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1395,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1427,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1609,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1418,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1623,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1616,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1277,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1829,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3846,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1618,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2092,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1282,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1028,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1100,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1463,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 509,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3375,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3271,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4460,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42792,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1773217,
            "range": "± 28556",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6074,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6351,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6749,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8994,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9016,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12182,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12239,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9894,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3081764,
            "range": "± 5790",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1348746,
            "range": "± 3897",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5291,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5874,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4766,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4584,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5733,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7484,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1998,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1096405,
            "range": "± 10058",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1005648,
            "range": "± 9984",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "73bcd4264078673f736f6b2557e0e38105de1b44",
          "message": "Make `Object.getOwnPropertyDescriptors` spec compliant (#1876)\n\nIt changes the following:\r\n- Fix `Object.getOwnPropertyDescriptors()` to comply to spec",
          "timestamp": "2022-02-28T17:59:30Z",
          "tree_id": "19e3931b424c648a7a568ec06ad92b7ed8f1b169",
          "url": "https://github.com/boa-dev/boa/commit/73bcd4264078673f736f6b2557e0e38105de1b44"
        },
        "date": 1646072885635,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 268,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4222,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13661,
            "range": "± 1313",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15122,
            "range": "± 1109",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8870,
            "range": "± 619",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10458,
            "range": "± 999",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11347,
            "range": "± 1111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5907,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8136,
            "range": "± 679",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7771,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9830,
            "range": "± 758",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11036,
            "range": "± 640",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12424,
            "range": "± 692",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137558,
            "range": "± 9976",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7110,
            "range": "± 498",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10739,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5338,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12891,
            "range": "± 988",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13562,
            "range": "± 1054",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14854,
            "range": "± 895",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5332,
            "range": "± 357",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34736,
            "range": "± 1568",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30487,
            "range": "± 1100",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1206,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2411,
            "range": "± 394",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3013,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1714,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1804,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1960,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1772,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1799,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1981,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1990,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1585,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2253,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4542,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2049,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2623,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1670,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1237,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1344,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1877,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 667,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4281,
            "range": "± 344",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4256,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5621,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50526,
            "range": "± 2080",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2143498,
            "range": "± 91613",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7465,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7597,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8478,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10855,
            "range": "± 548",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11023,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14691,
            "range": "± 574",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15440,
            "range": "± 884",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11620,
            "range": "± 491",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3558527,
            "range": "± 161418",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1534937,
            "range": "± 64840",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6526,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6946,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5694,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5368,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6730,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8801,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2323,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1218251,
            "range": "± 57886",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1032928,
            "range": "± 81091",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "4292c193faa25efa656b96a60c7926abed43eee0",
          "message": "Implement `Object.prototype.toLocaleString()` (#1875)\n\nIt changes the following:\r\n- Implement `Object.prototype.toLocaleString()`",
          "timestamp": "2022-02-28T21:10:56Z",
          "tree_id": "2b1699e6de2b14a1249b1dd2b85a544658a92449",
          "url": "https://github.com/boa-dev/boa/commit/4292c193faa25efa656b96a60c7926abed43eee0"
        },
        "date": 1646084623545,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 316,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4324,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14968,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17359,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9775,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10493,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11046,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6758,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8746,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8315,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10152,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12449,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14169,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148268,
            "range": "± 1955",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7972,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11956,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5961,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11579,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14862,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14665,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5492,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30971,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25678,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1033,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2260,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2555,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1655,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1586,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1893,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1646,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1642,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1902,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1909,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1498,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2075,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4507,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1944,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2458,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1535,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1101,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1166,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1602,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 610,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3859,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3765,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5290,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50831,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2043889,
            "range": "± 29373",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7169,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7204,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7774,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10534,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10552,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13971,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14254,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11075,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3553908,
            "range": "± 55806",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1581852,
            "range": "± 24262",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6074,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6838,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5515,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5298,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6666,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8564,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2267,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1281109,
            "range": "± 23291",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1170745,
            "range": "± 24907",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d7ed2fe5c91ccd15eca73a4bdebcffa50e4c6042",
          "message": "Bump git2 from 0.14.0 to 0.14.1 (#1878)\n\nBumps [git2](https://github.com/rust-lang/git2-rs) from 0.14.0 to 0.14.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d7757f170d098517a24a76a7982da3f897c0255b\"><code>d7757f1</code></a> Bump versions</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/a56acdc68af15153f04aad40b1eacdf74f744ef5\"><code>a56acdc</code></a> Fix dangling pointer in format_email.</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/f6e90a79f6521427a5067c1ca7a1c519bcbaebb6\"><code>f6e90a7</code></a> Add support for zlib-ng</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/c2a26133731d152f67a4fb11b35c4e139441e60c\"><code>c2a2613</code></a> Use cc 1.0.43 or later (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/608\">#608</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/97a855443f5678b6f71db59cfaf03b857ec38fac\"><code>97a8554</code></a> Make the calls to <code>crate::init()</code> consistent (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/604\">#604</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/a9d86f47021886147d46e2a8d9248f94edc45321\"><code>a9d86f4</code></a> Add bindings for <code>git_index_version()</code> and <code>git_index_set_version()</code> (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/597\">#597</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/892dc1a9a1c9b724533fa4802f7581b4b6b630da\"><code>892dc1a</code></a> Bump versions</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/e245130e5ae243059d0582b023a0649ece9cb647\"><code>e245130</code></a> Re-update libgit2 to master branch</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/c19cc75de917447825d18bba8d8d9f81bda07162\"><code>c19cc75</code></a> Depend on latest libgit2-sys</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/f89075b297679ec1c450993675c15b47a4478480\"><code>f89075b</code></a> Bump versions</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/git2-rs/compare/git2-curl-0.14.0...git2-curl-0.14.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=git2&package-manager=cargo&previous-version=0.14.0&new-version=0.14.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-01T12:10:37Z",
          "tree_id": "9080bc64c0e729abc0f1654523fb94f5a841d27b",
          "url": "https://github.com/boa-dev/boa/commit/d7ed2fe5c91ccd15eca73a4bdebcffa50e4c6042"
        },
        "date": 1646138799952,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5200,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15728,
            "range": "± 796",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18431,
            "range": "± 941",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10703,
            "range": "± 563",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11512,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11998,
            "range": "± 696",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7302,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9612,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9464,
            "range": "± 600",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11488,
            "range": "± 723",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13533,
            "range": "± 1198",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15153,
            "range": "± 961",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 158712,
            "range": "± 8736",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8800,
            "range": "± 477",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12633,
            "range": "± 894",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6381,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12879,
            "range": "± 1117",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16536,
            "range": "± 1189",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16879,
            "range": "± 794",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6364,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33156,
            "range": "± 2277",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29159,
            "range": "± 2076",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1241,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2509,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2964,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1796,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1797,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2099,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1856,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1810,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2039,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2078,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1691,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2349,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4649,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2104,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2718,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1744,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1306,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1353,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1796,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 685,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4359,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4237,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5839,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51842,
            "range": "± 2868",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2276727,
            "range": "± 139838",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7888,
            "range": "± 525",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7980,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8931,
            "range": "± 947",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11841,
            "range": "± 914",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11708,
            "range": "± 1357",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15762,
            "range": "± 1049",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15846,
            "range": "± 813",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12119,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3642272,
            "range": "± 205073",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1601249,
            "range": "± 176230",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6668,
            "range": "± 540",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7654,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6038,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5745,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7509,
            "range": "± 687",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9324,
            "range": "± 656",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2308,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1296171,
            "range": "± 71577",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1203337,
            "range": "± 70040",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "3fe7d0909601de31260bf7672d0c3a2f832e8189",
          "message": "Make `Error` and `%NativeError%` spec compliant (#1879)\n\nThis PR makes `Error` and `%NativeError%` spec compliant.\r\n\r\nIt changes the following:\r\n- Adds cause argument object.\r\n- Makes `message` non-enumerable.",
          "timestamp": "2022-03-01T18:15:56Z",
          "tree_id": "d2cb84298b3d92cc6842e9640847e6aad3b9fefa",
          "url": "https://github.com/boa-dev/boa/commit/3fe7d0909601de31260bf7672d0c3a2f832e8189"
        },
        "date": 1646160652695,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4235,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13365,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15762,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8967,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9620,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10269,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6301,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8234,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7936,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9813,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11582,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12965,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129482,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7287,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10585,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5469,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10902,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14064,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13715,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5245,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28055,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24404,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 929,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1928,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2254,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1366,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1405,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1583,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1398,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1394,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1622,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1629,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1263,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1836,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3915,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1611,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2093,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1259,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1023,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1087,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1453,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 509,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3351,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3218,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4491,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41638,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1724283,
            "range": "± 1742",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5989,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6319,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6805,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9445,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9443,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12469,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12614,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9775,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3146507,
            "range": "± 5223",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1380491,
            "range": "± 3751",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5237,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5746,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4667,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4480,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5742,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7610,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1912,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1080686,
            "range": "± 7342",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 996451,
            "range": "± 5257",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "6e3f93e632ebf69b3306ac59bf635d70711bee8b",
          "message": "Fix `Number.prototype.toString` when passing `undefined` as radix (#1877)\n\nThis PR fixes the bug when passing `undefined` as radix in `Number.prototype.toString()` which was throwing a range error, instead of setting the radix to `10`\r\n\r\n[spec](https://tc39.es/ecma262/#sec-number.prototype.tostring):\r\n> **Note**\r\n>\r\n> The optional radix should be an [integral Number](https://tc39.es/ecma262/#integral-number) value in the inclusive range 2𝔽 to 36𝔽. If radix is undefined then 10𝔽 is used as the value of radix.",
          "timestamp": "2022-03-01T19:30:42Z",
          "tree_id": "a8b858cad0ac92ac4eee29ec0f8a0174b1ec3be9",
          "url": "https://github.com/boa-dev/boa/commit/6e3f93e632ebf69b3306ac59bf635d70711bee8b"
        },
        "date": 1646164855864,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4203,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13443,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15775,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8941,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9593,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10267,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6256,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8165,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7908,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9828,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11532,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13006,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129021,
            "range": "± 297",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7322,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10578,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5438,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10780,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14031,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13719,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5223,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27972,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24458,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 903,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1943,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2260,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1407,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1434,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1642,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1420,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1426,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1617,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1629,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1271,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1824,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3940,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1619,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2118,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1315,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1034,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1119,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1477,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3403,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3274,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4415,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42543,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1750970,
            "range": "± 2032",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6000,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6340,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6723,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8943,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8970,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12064,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12014,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9692,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3147817,
            "range": "± 4122",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1384851,
            "range": "± 3594",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5253,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5734,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4690,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4519,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5763,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7524,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2000,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1097789,
            "range": "± 14818",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1010735,
            "range": "± 8160",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "936006+jasonwilliams@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b2d3720b29738894cb55e670aee2e55ca3553070",
          "message": "Update release.yml\n\nThe casing needs updating on the Internal label",
          "timestamp": "2022-03-01T22:10:07Z",
          "tree_id": "71625a3adf85dbc6dd27da66f9dc7e121043bda3",
          "url": "https://github.com/boa-dev/boa/commit/b2d3720b29738894cb55e670aee2e55ca3553070"
        },
        "date": 1646173904335,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 311,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4334,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14159,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16865,
            "range": "± 846",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9695,
            "range": "± 399",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10123,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10658,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6496,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8524,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8366,
            "range": "± 507",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10246,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11997,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13945,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144724,
            "range": "± 7511",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7749,
            "range": "± 587",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11176,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5773,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11426,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14915,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14544,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5729,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29582,
            "range": "± 568",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26008,
            "range": "± 493",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1047,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2204,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2507,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1595,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1588,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1895,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1599,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1613,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1847,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1856,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1456,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2054,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4553,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1855,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2397,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1459,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1062,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1140,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1558,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 583,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3768,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3756,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5109,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49490,
            "range": "± 732",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2005787,
            "range": "± 31869",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6873,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7169,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7641,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10147,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10507,
            "range": "± 656",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13497,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13465,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11039,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3635255,
            "range": "± 67099",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1580734,
            "range": "± 24291",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5970,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6528,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5355,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5212,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6553,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8618,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2283,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1254327,
            "range": "± 21796",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1158019,
            "range": "± 19193",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "408e49e460e6b9f34208f55f901db244c5476e36",
          "message": "Cleanup vm stack on function return (#1880)\n\nThis cleans up the vm stack on a function return. This is needed because when errors are thrown, there may be still values on the stack that cannot be cleaned up via regular control flow. The change should have little performance impact, because the `Vec::truncate` function does not alter the capacity of the vector.",
          "timestamp": "2022-03-01T22:55:09Z",
          "tree_id": "341ef29d2888728891decfd8d2ab44b8c0974e9f",
          "url": "https://github.com/boa-dev/boa/commit/408e49e460e6b9f34208f55f901db244c5476e36"
        },
        "date": 1646177414655,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 300,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4163,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13802,
            "range": "± 802",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16271,
            "range": "± 935",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9100,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9745,
            "range": "± 591",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10525,
            "range": "± 506",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6038,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8029,
            "range": "± 514",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7790,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10004,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12414,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13656,
            "range": "± 464",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146216,
            "range": "± 3765",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7267,
            "range": "± 479",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11162,
            "range": "± 842",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5404,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11484,
            "range": "± 509",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13996,
            "range": "± 952",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13733,
            "range": "± 863",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5612,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29529,
            "range": "± 1252",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25409,
            "range": "± 1452",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 999,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2122,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2411,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1522,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1469,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1831,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1568,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1537,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1788,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1701,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1451,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1985,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4484,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1857,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2336,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1412,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1044,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1121,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1496,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 570,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3908,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3697,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4821,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46166,
            "range": "± 2812",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1991836,
            "range": "± 93291",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6870,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6804,
            "range": "± 389",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7421,
            "range": "± 383",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10388,
            "range": "± 564",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10317,
            "range": "± 570",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13256,
            "range": "± 759",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13919,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10737,
            "range": "± 464",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3491321,
            "range": "± 242503",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1464080,
            "range": "± 77952",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5565,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6375,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5043,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5058,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6195,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8696,
            "range": "± 344",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2186,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1219247,
            "range": "± 75712",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1179277,
            "range": "± 39866",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "3c59905a1b73c75ee987ebeb02cc5545cd9504c2",
          "message": "`%NativeError%.[[prototype]]` should be `Error` constructor (#1883)\n\nBefore the `%NativeError%` objects (like `TypeError`, `ReferenceError`, etc) `[[prototype]]` field was set to `Function.prototype` but this is wrong it should be the `Error` constructor object itself.\r\n\r\nThis makes the  `%NativeError%`s 100% spec compliant :)\r\n(except `AggregateError` because its not implemented)",
          "timestamp": "2022-03-02T00:34:15Z",
          "tree_id": "3e213aaaa27ecaf511260c3f12fa037076160c02",
          "url": "https://github.com/boa-dev/boa/commit/3c59905a1b73c75ee987ebeb02cc5545cd9504c2"
        },
        "date": 1646183282947,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 271,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4223,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13360,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15541,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8854,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9506,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10147,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6221,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8075,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7915,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9715,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11382,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12883,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129747,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7364,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10693,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5522,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10733,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13760,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13529,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5194,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27931,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24435,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 902,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1939,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2272,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1395,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1415,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1382,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1643,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1615,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1257,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1794,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3875,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2064,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1099,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1460,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3352,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3211,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4430,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42181,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1768322,
            "range": "± 4575",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6081,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6452,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6756,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9013,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8946,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12199,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12205,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9665,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3095044,
            "range": "± 3961",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1357729,
            "range": "± 2793",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5290,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5886,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4710,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4515,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5830,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7878,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2007,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1100210,
            "range": "± 8615",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1013619,
            "range": "± 5491",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "7248ed1005519c08a54203b5803c68a1aa7e0f88",
          "message": "Make `StringToNumber` spec compliant (#1881)\n\nThis PR enables `StringToNumber()` to parse binary, octal and hexadecimal numbers.",
          "timestamp": "2022-03-02T00:48:19Z",
          "tree_id": "cad05d5796d2765e3bb72dea3f63e067d6d30af4",
          "url": "https://github.com/boa-dev/boa/commit/7248ed1005519c08a54203b5803c68a1aa7e0f88"
        },
        "date": 1646184279559,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 330,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4514,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15538,
            "range": "± 696",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18563,
            "range": "± 944",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10254,
            "range": "± 485",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11091,
            "range": "± 704",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11215,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6870,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9409,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8977,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11308,
            "range": "± 1368",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13393,
            "range": "± 665",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15094,
            "range": "± 790",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 158258,
            "range": "± 7890",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8534,
            "range": "± 630",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12554,
            "range": "± 654",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6179,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12449,
            "range": "± 632",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16637,
            "range": "± 1148",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16459,
            "range": "± 1132",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5858,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32611,
            "range": "± 1946",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28483,
            "range": "± 1475",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1141,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2450,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2779,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1722,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1767,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1888,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1671,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1652,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1902,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2046,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1575,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2272,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4948,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2039,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2711,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1613,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1135,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1215,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1722,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 628,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4121,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3991,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5749,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50222,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2067054,
            "range": "± 2562",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7818,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8192,
            "range": "± 1014",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8840,
            "range": "± 1495",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11809,
            "range": "± 985",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11835,
            "range": "± 528",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15884,
            "range": "± 1446",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16170,
            "range": "± 879",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12187,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 4033899,
            "range": "± 181347",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1777017,
            "range": "± 78778",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6817,
            "range": "± 820",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7360,
            "range": "± 552",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5917,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5642,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7184,
            "range": "± 599",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9755,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2463,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1411525,
            "range": "± 76849",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1290812,
            "range": "± 57152",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "fd889fd5d0dea8e139826a1b4cff06d610d1aeeb",
          "message": "Fix `PropertyKey` to `JsValue` conversion (#1886)\n\nWe store string `PropertyKey`s with two enums `String` and `Index` for performance reasons, but the spec does not differentiate between string and index property keys so before conversion to `JsValue` we have to convert to a string.\r\n\r\nThis was failing tests like `Reflect.ownKeys([true, \"\", 1])` because it was returning (integer numbers) `[1, 2, 3]` instead of `['1', '2', '3']`",
          "timestamp": "2022-03-02T11:24:13Z",
          "tree_id": "be1ab49fc1563b8102c7ad5fcf5243062f4b0479",
          "url": "https://github.com/boa-dev/boa/commit/fd889fd5d0dea8e139826a1b4cff06d610d1aeeb"
        },
        "date": 1646221888703,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4699,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14546,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16822,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9808,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10517,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11171,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6861,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8918,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8524,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10580,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12531,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14010,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138358,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7994,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11304,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6011,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11689,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15055,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14724,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5441,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30140,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26050,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 942,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2084,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2437,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1446,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1476,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1700,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1442,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1473,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1712,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1694,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1319,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1958,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3734,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1661,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2189,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1318,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1045,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1128,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1526,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 486,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3584,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3454,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4606,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38087,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1783301,
            "range": "± 3349",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6313,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6567,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6945,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9611,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9576,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12942,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12885,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10291,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2986838,
            "range": "± 7394",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1323652,
            "range": "± 4548",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5550,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6080,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5047,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4674,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5840,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8274,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1740,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1072872,
            "range": "± 5326",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995823,
            "range": "± 10468",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "00a19005e46a91eb95a2dd75b41a8f7a13df7684",
          "message": "Remove `toInteger` and document the `string` builtin (#1884)\n\nThe ECMAScript 2022 specification removes the `toInteger` method, and replaces it with `toIntegerOrInfinity`, which is arguably better for us since the `JsValue::toInteger` returns an `f64`, which is pretty confusing at times.\r\n\r\nThis pull request removes the `JsValue::to_integer` method, replaces all its calls by `JsValue::to_integer_or_infinity` or others per the spec and documents several methods from the `string` builtin.",
          "timestamp": "2022-03-02T22:07:23Z",
          "tree_id": "a6e0a0ab443889a7c154f0705b69ab620cd84e01",
          "url": "https://github.com/boa-dev/boa/commit/00a19005e46a91eb95a2dd75b41a8f7a13df7684"
        },
        "date": 1646260484504,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4548,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14351,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16825,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9680,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10305,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10987,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6692,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8679,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8328,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10351,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12297,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13825,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138371,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7937,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11427,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5956,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11366,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14687,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14429,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5541,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29854,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25798,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 931,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2112,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2418,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1448,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1472,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1726,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1448,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1477,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1683,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1649,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1275,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1983,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3699,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1694,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2218,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1369,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1052,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1113,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1490,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 486,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3677,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3540,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4708,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39099,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1765551,
            "range": "± 1643",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6078,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6502,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6876,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9410,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9406,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12651,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12642,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10160,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3098984,
            "range": "± 4688",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1354664,
            "range": "± 3535",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5356,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6008,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4905,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4636,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6082,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8127,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1785,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1070611,
            "range": "± 9009",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 985947,
            "range": "± 3554",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "a9a82a73819093f3a1dc595ed4ae28859cf3114d",
          "message": "Make iterator spec complaint (#1889)\n\nThis PR is also related to #577 \r\n\r\nChanges:\r\n- Implements `IteratorValue` (`IteratorResult::value()`)\r\n- Implements `IteratorComplete` (`IteratorResult::complete()`)\r\n- Implements `IteratorStep` (`IteratorRecord::step()`)\r\n- Makes  `IteratorNext` (`IteratorRecord::next()`) spec compliant\r\n- Deprecates/removes `JsValue::get_field()`.",
          "timestamp": "2022-03-03T02:12:20Z",
          "tree_id": "f46e0e8653d6e1c4ccb73c85c3bbdef32f5c198f",
          "url": "https://github.com/boa-dev/boa/commit/a9a82a73819093f3a1dc595ed4ae28859cf3114d"
        },
        "date": 1646275402931,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4257,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13323,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15751,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8990,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9629,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10298,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6271,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8203,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7928,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9799,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11499,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12991,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129763,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7261,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10535,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5427,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10985,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14197,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13828,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5205,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28112,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24624,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1896,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2218,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1349,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1359,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1596,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1389,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1364,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1583,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1572,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1236,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1807,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3905,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1618,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2051,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1015,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1096,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1445,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3369,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3233,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4432,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41945,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1748065,
            "range": "± 1529",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5983,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6290,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6710,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9444,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9423,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12609,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12759,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9720,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3228149,
            "range": "± 4274",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1399523,
            "range": "± 9536",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5290,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5753,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4693,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4582,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5884,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7392,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1964,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1096686,
            "range": "± 9949",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1009443,
            "range": "± 5227",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "fb8c5cfa341f1e670b4bd059d071df3f64e8b33c",
          "message": "Bump actions/checkout from 2.4.0 to 3 (#1885)\n\nBumps [actions/checkout](https://github.com/actions/checkout) from 2.4.0 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Update default runtime to node16</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n<h2>v2 (beta)</h2>\n<ul>\n<li>Improved fetch performance\n<ul>\n<li>The default behavior now fetches only the SHA being checked-out</li>\n</ul>\n</li>\n<li>Script authenticated git commands\n<ul>\n<li>Persists <code>with.token</code> in the local git config</li>\n<li>Enables your scripts to run authenticated git commands</li>\n<li>Post-job cleanup removes the token</li>\n<li>Coming soon: Opt out by setting <code>with.persist-credentials</code> to <code>false</code></li>\n</ul>\n</li>\n<li>Creates a local branch\n<ul>\n<li>No longer detached HEAD when checking out a branch</li>\n<li>A local branch is created with the corresponding upstream branch set</li>\n</ul>\n</li>\n<li>Improved layout</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/a12a3943b4bdde767164f792f33f40b04645d846\"><code>a12a394</code></a> update readme for v3 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/708\">#708</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8f9e05e482293f862823fcca12d9eddfb3723131\"><code>8f9e05e</code></a> Update to node 16 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/689\">#689</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/230611dbd0eb52da1e1f4f7bc8bb0c3a339fc8b7\"><code>230611d</code></a> Change secret name for PAT to not start with GITHUB_ (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/623\">#623</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2.4.0...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2.4.0&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-03T07:20:20Z",
          "tree_id": "53d92dc554be0577222adb74d0baaf129ced8af5",
          "url": "https://github.com/boa-dev/boa/commit/fb8c5cfa341f1e670b4bd059d071df3f64e8b33c"
        },
        "date": 1646293680761,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4845,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14528,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17077,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9893,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10625,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11303,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6948,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8988,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8637,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10751,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12676,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14092,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 139821,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8099,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11614,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6064,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11829,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15894,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15641,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5533,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30357,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26454,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 928,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2110,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2401,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1433,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1441,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1698,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1444,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1440,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1645,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1670,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1293,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1977,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3740,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1681,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2171,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1322,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1059,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1108,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1480,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 496,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3665,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3563,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4540,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38880,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1756780,
            "range": "± 2312",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6063,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6303,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6694,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9387,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9474,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12595,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12688,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10274,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3099533,
            "range": "± 7801",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1355467,
            "range": "± 4076",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5332,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5845,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4793,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4567,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5917,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8138,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1736,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1063793,
            "range": "± 5564",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 982352,
            "range": "± 5303",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "4c3058b6bfcda706df71a05776fd869df7bca218",
          "message": "Implement `AggregateError` (#1888)\n\nIt changes the following:\r\n- Implement `AggregateError` global object",
          "timestamp": "2022-03-03T20:49:31Z",
          "tree_id": "f0bbf7e2d3e12e6aa636b7445e8a6417a6e862ea",
          "url": "https://github.com/boa-dev/boa/commit/4c3058b6bfcda706df71a05776fd869df7bca218"
        },
        "date": 1646342633590,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4228,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13423,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15801,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8951,
            "range": "± 367",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9632,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10346,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6224,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7172,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7893,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9767,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11512,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12982,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129329,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7311,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10645,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5457,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10912,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13797,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13508,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5182,
            "range": "± 234",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27934,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24363,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 895,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1937,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2269,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1350,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1369,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1587,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1386,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1371,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1595,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1591,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1255,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1811,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3867,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1611,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2089,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1300,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1031,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1090,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1445,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 525,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3360,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3228,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4449,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42725,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1756173,
            "range": "± 9441",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6060,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6273,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6744,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9363,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9386,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12582,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12545,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9801,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3106440,
            "range": "± 4393",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1363007,
            "range": "± 5445",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5194,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5090,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4117,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3926,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5030,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7366,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2003,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1084778,
            "range": "± 6232",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 999448,
            "range": "± 10331",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "60b74e1f5165bfa7c32fb8af1bfc55b0b5431c91",
          "message": "Bump once_cell from 1.9.0 to 1.10.0 (#1893)\n\nBumps [once_cell](https://github.com/matklad/once_cell) from 1.9.0 to 1.10.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/matklad/once_cell/blob/master/CHANGELOG.md\">once_cell's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>1.11</h2>\n<ul>\n<li>Add <code>OnceCell::with_value</code> to create initialized <code>OnceCell</code> at compile time.</li>\n<li>Improve <code>Clone</code> implementation for <code>OnceCell</code>.</li>\n</ul>\n<h2>1.10</h2>\n<ul>\n<li>upgrade <code>parking_lot</code> to <code>0.12.0</code> (note that this bumps MSRV with <code>parking_lot</code> feature enabled to <code>1.49.0</code>).</li>\n</ul>\n<h2>1.9</h2>\n<ul>\n<li>Added an <code>atomic-polyfill</code> optional dependency to compile <code>race</code> on platforms without atomics</li>\n</ul>\n<h2>1.8.0</h2>\n<ul>\n<li>Add <code>try_insert</code> API -- a version of <code>set</code> that returns a reference.</li>\n</ul>\n<h2>1.7.2</h2>\n<ul>\n<li>Improve code size when using parking_lot feature.</li>\n</ul>\n<h2>1.7.1</h2>\n<ul>\n<li>Fix <code>race::OnceBox&lt;T&gt;</code> to also impl <code>Default</code> even if <code>T</code> doesn't impl <code>Default</code>.</li>\n</ul>\n<h2>1.7.0</h2>\n<ul>\n<li>Hide the <code>race</code> module behind (default) <code>race</code> feature.\nTurns out that adding <code>race</code> by default was a breaking change on some platforms without atomics.\nIn this release, we make the module opt-out.\nTechnically, this is a breaking change for those who use <code>race</code> with <code>no_default_features</code>.\nGiven that the <code>race</code> module itself only several days old, the breakage is deemed acceptable.</li>\n</ul>\n<h2>1.6.0</h2>\n<ul>\n<li>Add <code>Lazy::into_value</code></li>\n<li>Stabilize <code>once_cell::race</code> module for &quot;first one wins&quot; no_std-compatible initialization flavor.</li>\n<li>Migrate from deprecated <code>compare_and_swap</code> to <code>compare_exchange</code>.</li>\n</ul>\n<h2>1.5.2</h2>\n<ul>\n<li><code>OnceBox</code> API uses <code>Box&lt;T&gt;</code>.\nThis a breaking change to unstable API.</li>\n</ul>\n<h2>1.5.1</h2>\n<ul>\n<li>MSRV is increased to <code>1.36.0</code>.</li>\n<li>document <code>once_cell::race</code> module.</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c3a3ede16dc5c11df6be06fabd842795504e74b7\"><code>c3a3ede</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/174\">#174</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c3f11bb8bc7f9b688b80a8c46d0a25515f7e222f\"><code>c3f11bb</code></a> Bump version and add a changelog entry for parking_lot upgrade.</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/8737ec3713283154a55ad73c384583bab7c5ad4e\"><code>8737ec3</code></a> Upgrade parking_lot.</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/64ef4a0f3289b7e6891e6fc0cd7da1c7dd0193e0\"><code>64ef4a0</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/172\">#172</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/99cc25cb9302e80984ff14197aa63aa1addecd50\"><code>99cc25c</code></a> Switch badge to GitHub Actions and remove outdated file references</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/68b2d767038b3e43187b60519b9cb172ea961264\"><code>68b2d76</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/169\">#169</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/abd4c788df17f604abedd8e59bfdad67cf139b30\"><code>abd4c78</code></a> Fix typo</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/dd8ff8aeff46609ecf849e8685e32fd0660825a7\"><code>dd8ff8a</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/168\">#168</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/7a5fca7b5439f4020784c04e673e55ef550c78e4\"><code>7a5fca7</code></a> doc: fix a typo</li>\n<li>See full diff in <a href=\"https://github.com/matklad/once_cell/compare/v1.9.0...v1.10.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=once_cell&package-manager=cargo&previous-version=1.9.0&new-version=1.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-04T12:39:45Z",
          "tree_id": "efb7f8d2bc2f981215df8c2ba8f3d7eeb255ba85",
          "url": "https://github.com/boa-dev/boa/commit/60b74e1f5165bfa7c32fb8af1bfc55b0b5431c91"
        },
        "date": 1646399543231,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 240,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3773,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12075,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14182,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7990,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8690,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9214,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5643,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7481,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7126,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10236,
            "range": "± 810",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10385,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11725,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 113998,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6621,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9501,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4892,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9974,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12785,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14029,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4605,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25300,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22149,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 784,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1695,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1985,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1253,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1456,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1461,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1202,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1218,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1415,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1412,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1093,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1606,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3406,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1637,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1825,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1133,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 897,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 963,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1264,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 443,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2934,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2836,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3866,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37611,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1522657,
            "range": "± 13377",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5330,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5568,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5914,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8255,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8256,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11007,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12524,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9719,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2634378,
            "range": "± 5666",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1147995,
            "range": "± 5396",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4596,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5084,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4101,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3949,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5067,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6515,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1734,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 948562,
            "range": "± 4670",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 872910,
            "range": "± 3563",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3ec6f633db719aaec980b450c2390c72ee6250e1",
          "message": "Bump webpack from 5.69.1 to 5.70.0 (#1892)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.69.1 to 5.70.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.70.0</h2>\n<h1>Features</h1>\n<ul>\n<li>update node.js version constraints for ESM support</li>\n<li>add <code>baseUri</code> to <code>entry</code> options to configure a static base uri (the base of <code>new URL()</code>)</li>\n<li>alphabetically sort exports in namespace objects when possible</li>\n<li>add <code>__webpack_exports_info__.name.canMangle</code></li>\n<li>add proxy support to <code>experiments.buildHttp</code></li>\n<li><code>import.meta.webpackContext</code> as ESM alternative to <code>require.context</code></li>\n<li>handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix problem when assigning <code>global</code> to a variable</li>\n<li>fix crash when using <code>experiments.outputModule</code> and <code>loaderContext.importModule</code> with multiple chunks</li>\n<li>avoid generating progress output before the compilation has started (ProgressPlugin)</li>\n<li>fix handling of non-static-ESM dependencies with using TLA and HMR in the same module</li>\n<li>include the asset module filename in hashing</li>\n<li><code>output.clean</code> will keep HMR assets for at least 10s to allow HMR to access them even when compilation is faster then the browser</li>\n</ul>\n<h1>Performance</h1>\n<ul>\n<li>fix asset caching when using the BannerPlugin</li>\n</ul>\n<h1>Developer Experience</h1>\n<ul>\n<li>improve typings</li>\n</ul>\n<h1>Contributing</h1>\n<ul>\n<li>capture caching errors when running the test suite</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/5a26b7c4a923c42022ca97fe9cbf46907a20d6d8\"><code>5a26b7c</code></a> 5.70.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/870fcadfd01beec431e598968f237b59350e475a\"><code>870fcad</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15423\">#15423</a> from webpack/fix/issue-15409</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/cbfea7605da4e40c1c4207778e253a8f0a595d38\"><code>cbfea76</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15463\">#15463</a> from webpack/fix/add-missing-option</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/f51e099a2d6f3c6e3d80336c4fbf0a22e64ad1dc\"><code>f51e099</code></a> add parserOptions.importMetaContext option</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/75383c93d2ab04e1ae7b54822292fee0ceafb67b\"><code>75383c9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15454\">#15454</a> from webpack/fix/issue-15447</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b53fe2f630c5dfb5852df9212666ad0a37f5d40f\"><code>b53fe2f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15446\">#15446</a> from webpack/feature/import-meta-webpack-context</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/0fe44700f74e6e29316bbb93dba9489245d78966\"><code>0fe4470</code></a> up enhanced-resolve version</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/12ecab44fccef88e8f00e52e030d2ce395d4cf36\"><code>12ecab4</code></a> use cache in BannerPlugin</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/d3c5d357ccbcef22abdcd88bb06d51637ddd9fdb\"><code>d3c5d35</code></a> add ImportMetaContextPlugin</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b89f397e3cc7ec411fdb7ba68e742933669426b1\"><code>b89f397</code></a> handle more options</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.69.1...v5.70.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.69.1&new-version=5.70.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-04T12:52:27Z",
          "tree_id": "ecc613ebd4d87ec053f5fcd0379dd2c92a50b3f1",
          "url": "https://github.com/boa-dev/boa/commit/3ec6f633db719aaec980b450c2390c72ee6250e1"
        },
        "date": 1646400437576,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 289,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4277,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13603,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16006,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9070,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9786,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10351,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6456,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8428,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8099,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10049,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11756,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13273,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129342,
            "range": "± 845",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7487,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10924,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5632,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11073,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12600,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13890,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4646,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25363,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22250,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 789,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1682,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1977,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1251,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1266,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1430,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1200,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1200,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1620,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1433,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1125,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1573,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3428,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1406,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1835,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1130,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 897,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 957,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1267,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 439,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2922,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2811,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3852,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37345,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1517553,
            "range": "± 3811",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5319,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5557,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5974,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8197,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8245,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10957,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10932,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8557,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2646469,
            "range": "± 8993",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1148633,
            "range": "± 4694",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4586,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5101,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4642,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4028,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5192,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6603,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1725,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 953536,
            "range": "± 4016",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 876311,
            "range": "± 4084",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "9c2b1114c47867307f36e2131b6bbf438c9d61f2",
          "message": "Implement `Number.parseInt` and `Number.parseFloat` (#1894)\n\nThis PR add `Number.parseInt` and `Number.parseFloat` which according to spec are clones of the global objects `parseInt` and `parseFloat`.\r\n\r\nIt also fixes the last failing test of  the `NativeError` feature with this we get 100% spec complaint `NativeError`s :tada: \r\n\r\nIt changes the following:\r\n- Add `Number.parseInt()`\r\n- Add `Number.parseFloat()`\r\n- Fix length of `AggregateError`\r\n- Fix length of `Reflect.setPrototypeOf`",
          "timestamp": "2022-03-04T17:24:49Z",
          "tree_id": "5a8d2eac849941d3f6bb5965f8216fdfb1d701e2",
          "url": "https://github.com/boa-dev/boa/commit/9c2b1114c47867307f36e2131b6bbf438c9d61f2"
        },
        "date": 1646416674510,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 332,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4542,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15170,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17789,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10060,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10737,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11350,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6901,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9099,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8796,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10940,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12926,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14514,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 150015,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8160,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11948,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6024,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12227,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16033,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15683,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5782,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31561,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27355,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1085,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2296,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2652,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1699,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1714,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1931,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1684,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1682,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1992,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2011,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1534,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2138,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4682,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1970,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2534,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1559,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1127,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1179,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1610,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 613,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3941,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3805,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5263,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51131,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2048634,
            "range": "± 2891",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7271,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7574,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8029,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10642,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10655,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14216,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14292,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11550,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3594978,
            "range": "± 6962",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1576697,
            "range": "± 6085",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6260,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6946,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5590,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5432,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6857,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8871,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2354,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1294788,
            "range": "± 7396",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1195031,
            "range": "± 7423",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "3b53fec412ceaefc30fdfae6576c1b88ae037a9b",
          "message": "Extract `Intrinsics` struct from `Context` and cleanup names (#1890)\n\nBuilding up to #186, this PR extracts an `Intrinsics` struct from `Context`, facilitating a lot the extraction of a `Realm` struct.\r\nAlso, it adapts the `BuiltIn` trait to be useful for builtins that don't expose a global property on initialization (`Generator`, `TypedArray`, etc.)\r\n\r\nIt changes the following:\r\n\r\n- Creates an `Intrinsics` struct and refactors `Context` to transfer its intrinsic related fields to `Intrinsics`.\r\n- Renames some methods and parameters to better describe their functionality.\r\n- Makes `BuiltIn::init` return `Option<JsValue>` to skip global property initialization if the builtin initialization returns `None`",
          "timestamp": "2022-03-04T23:50:31Z",
          "tree_id": "30eaecae1224836b84b35d20ed710e3e77bd23f2",
          "url": "https://github.com/boa-dev/boa/commit/3b53fec412ceaefc30fdfae6576c1b88ae037a9b"
        },
        "date": 1646440008620,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 350,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5119,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16345,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19028,
            "range": "± 557",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10928,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11602,
            "range": "± 392",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12424,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7594,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10103,
            "range": "± 354",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9658,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11942,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14277,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15639,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 176222,
            "range": "± 5810",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8978,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13039,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6643,
            "range": "± 262",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13276,
            "range": "± 439",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17012,
            "range": "± 860",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16675,
            "range": "± 353",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6501,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34140,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30130,
            "range": "± 839",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1271,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2663,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3103,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1890,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1914,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2204,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1887,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1917,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2192,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2198,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1758,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2473,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4831,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2254,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2875,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1713,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1339,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1429,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1885,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 670,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4440,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4276,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5781,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53807,
            "range": "± 1858",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2239023,
            "range": "± 72344",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7943,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7848,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7992,
            "range": "± 375",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10315,
            "range": "± 520",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10433,
            "range": "± 492",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13970,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14369,
            "range": "± 541",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11629,
            "range": "± 657",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3464331,
            "range": "± 126724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1480466,
            "range": "± 71012",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5982,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6538,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5480,
            "range": "± 216",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5107,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6569,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8997,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2179,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1196585,
            "range": "± 62962",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1071925,
            "range": "± 41562",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "7fa37b50bcc67c960754c2fdb51d572c620290b9",
          "message": "Fix unreachable panics in compile_access (#1861)\n\nThis PR changes the following:\r\n\r\n- More elegantly handles illegal access statements in compile_access\r\n- Adds a slew of previously unhandled illegal access test cases\r\n\r\n### Caveats\r\n\r\nIt is very, very likely that you will want to simply restrict unary and assignment operations in the AST. However, this prevents crashes in the meantime with a error that is just slightly less detailed than if it were implemented in AST.",
          "timestamp": "2022-03-06T00:50:11Z",
          "tree_id": "e158ef453553ba34ba5b9fd72378793387a573ce",
          "url": "https://github.com/boa-dev/boa/commit/7fa37b50bcc67c960754c2fdb51d572c620290b9"
        },
        "date": 1646529586558,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 345,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4769,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15875,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18447,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10459,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11397,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12007,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7235,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9525,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9129,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11424,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13498,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15170,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159356,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8519,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12579,
            "range": "± 513",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6312,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12739,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16675,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16305,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6076,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32667,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28481,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1123,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2436,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2769,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1741,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1757,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1999,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1779,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1768,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2032,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2048,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1595,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2223,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4782,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2036,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2649,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1629,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1168,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1245,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1676,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 661,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4152,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4005,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5568,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53441,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2194877,
            "range": "± 3107",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7581,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7890,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8379,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11681,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11904,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15714,
            "range": "± 610",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15570,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12067,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 4041081,
            "range": "± 29603",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1730570,
            "range": "± 4245",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6525,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7231,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5803,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5635,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7196,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9269,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2516,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1379906,
            "range": "± 7159",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1262120,
            "range": "± 10168",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "cc755db485dba977c87c981e768b2694dec8d6e9",
          "message": "Continue panic fixes (#1896)\n\nThis PR changes the following:\r\n\r\n- Fixes the panics induced by incorrect continues.\r\n- Adds tests which demonstrate the various panics induced.\r\n- Actually rustfmts correctly?",
          "timestamp": "2022-03-06T21:54:31Z",
          "tree_id": "ba960f1c0810f75695d2deea13aaf57847ec8ed8",
          "url": "https://github.com/boa-dev/boa/commit/cc755db485dba977c87c981e768b2694dec8d6e9"
        },
        "date": 1646605325902,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 248,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3813,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12020,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15821,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9134,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9864,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9366,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6334,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7410,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7184,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10101,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10285,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13269,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 115768,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7477,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10818,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5573,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11007,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14199,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14103,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5187,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28162,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21684,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 805,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1715,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1993,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1230,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1231,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1426,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1231,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1236,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1436,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1417,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1115,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1599,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3318,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1651,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1847,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1137,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 918,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1471,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 451,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3386,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3265,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3879,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42805,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1558904,
            "range": "± 3395",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5341,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5561,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5932,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8261,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8241,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10968,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10996,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8564,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2859082,
            "range": "± 3923",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1221819,
            "range": "± 5783",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4599,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5060,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4094,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3943,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5050,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6611,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1760,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 973893,
            "range": "± 4388",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 895512,
            "range": "± 5982",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a49b57beb71c7997694ebdb06d9afb17ea479d22",
          "message": "Bump css-loader from 6.6.0 to 6.7.0 (#1904)\n\nBumps [css-loader](https://github.com/webpack-contrib/css-loader) from 6.6.0 to 6.7.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/releases\">css-loader's releases</a>.</em></p>\n<blockquote>\n<h2>v6.7.0</h2>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.6.0...v6.7.0\">6.7.0</a> (2022-03-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>re-export defaultGetLocalIdent (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1423\">#1423</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/207cf36d541423f12a8d6680b21530c52a2f07d5\">207cf36</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md\">css-loader's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.6.0...v6.7.0\">6.7.0</a> (2022-03-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>re-export defaultGetLocalIdent (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1423\">#1423</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/207cf36d541423f12a8d6680b21530c52a2f07d5\">207cf36</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/84b552ad8b2704c4ff38f8301ffdc364a6714541\"><code>84b552a</code></a> chore(release): 6.7.0</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/207cf36d541423f12a8d6680b21530c52a2f07d5\"><code>207cf36</code></a> feat: re-export defaultGetLocalIdent (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1423\">#1423</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/f0e20e63fb627f9e30bd730204f72af8e8986d11\"><code>f0e20e6</code></a> chore: upgrade dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1425\">#1425</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/4dede5553f981dc87931de996b47f7036a883e5d\"><code>4dede55</code></a> docs(readme): added types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1418\">#1418</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/e16ba4d15cd168f1a330f10b728869fe87dd9375\"><code>e16ba4d</code></a> chore(deps): bump nanoid from 3.1.30 to 3.2.0 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1412\">#1412</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/76ad29f38e99763d080ea1c85ebf2c89fd310755\"><code>76ad29f</code></a> docs: add yarn and pnpm installation commands (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1417\">#1417</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/67bb937e1054bba22812d83afaa5a2d30567a696\"><code>67bb937</code></a> chore: upgrade dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1416\">#1416</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.6.0...v6.7.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=6.6.0&new-version=6.7.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-07T12:54:15Z",
          "tree_id": "78d5abf2b3dcdb59f8d2aa6d22f3faa10c84fe0f",
          "url": "https://github.com/boa-dev/boa/commit/a49b57beb71c7997694ebdb06d9afb17ea479d22"
        },
        "date": 1646659522627,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 282,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3797,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11901,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15770,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9006,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8592,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9116,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5594,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7362,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7077,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9996,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11631,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13013,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 115380,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6469,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10665,
            "range": "± 544",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5507,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9756,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12601,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12297,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4594,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24802,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21729,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 932,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1943,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1212,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1243,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1411,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1375,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1223,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1432,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1434,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1117,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1610,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3313,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1425,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1854,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1124,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 912,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1300,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 450,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3382,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3255,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3915,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42928,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1750143,
            "range": "± 3388",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5310,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5556,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5944,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8212,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8203,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10822,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10870,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8631,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2856997,
            "range": "± 3351",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1220790,
            "range": "± 5342",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4617,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5063,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4084,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4034,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5080,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6781,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1757,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 973683,
            "range": "± 3949",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 895686,
            "range": "± 5971",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6378204052d8df44c02f978b550c37a02f270621",
          "message": "Bump test262 from `18ce639` to `f7fb969` (#1905)\n\nBumps [test262](https://github.com/tc39/test262) from `18ce639` to `f7fb969`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/f7fb969cc4934bbc5aa29a378d59325eaa84f475\"><code>f7fb969</code></a> Add tests for T time designator prefix not allowing space</li>\n<li><a href=\"https://github.com/tc39/test262/commit/131c396b6af8184a21bbe3fbfe5ea35152956f1e\"><code>131c396</code></a> Remove number test (yields a different error, not an exception)</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8ff1e510b99d8398b00b1c779a72206cb86e4f38\"><code>8ff1e51</code></a> Add a couple more types</li>\n<li><a href=\"https://github.com/tc39/test262/commit/9c6e3aff38ecce54fc945536e6b712a93145e0a9\"><code>9c6e3af</code></a> Move to more sensible location</li>\n<li><a href=\"https://github.com/tc39/test262/commit/10f9a692957319c3b0bbd5fa06b83a4a56fb1173\"><code>10f9a69</code></a> Move test to a more sensible location</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ecd24faa82961e0cc6c8420501b7e60193043e04\"><code>ecd24fa</code></a> Fix buggy error message</li>\n<li><a href=\"https://github.com/tc39/test262/commit/918cefcd09578cfe2afa914040f174fe6ac6d055\"><code>918cefc</code></a> Check <code>formatRange</code> on many pairs of invalid arguments</li>\n<li><a href=\"https://github.com/tc39/test262/commit/2f592de0aa7c0ea0e38e5d4f39acbb01a537c23e\"><code>2f592de</code></a> Port tests for PlainTime.</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/18ce639a4c4768de337fa30b83bbb6de02b0e1a5...f7fb969cc4934bbc5aa29a378d59325eaa84f475\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-07T12:39:59Z",
          "tree_id": "732e11bd9535fc309306143222edd8acc5837646",
          "url": "https://github.com/boa-dev/boa/commit/6378204052d8df44c02f978b550c37a02f270621"
        },
        "date": 1646659057826,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 281,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4517,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13992,
            "range": "± 1125",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16196,
            "range": "± 1315",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9722,
            "range": "± 1545",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10843,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10597,
            "range": "± 818",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6419,
            "range": "± 496",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8437,
            "range": "± 600",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7865,
            "range": "± 520",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9646,
            "range": "± 578",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12027,
            "range": "± 1135",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12770,
            "range": "± 825",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138019,
            "range": "± 8511",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7941,
            "range": "± 890",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10905,
            "range": "± 1045",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5389,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10889,
            "range": "± 844",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15302,
            "range": "± 1248",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14937,
            "range": "± 1321",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5415,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29335,
            "range": "± 2827",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25961,
            "range": "± 1511",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1074,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2197,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2567,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1532,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1560,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1722,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1561,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1519,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1762,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1755,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1431,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1976,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3838,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1921,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2331,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1460,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1114,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1194,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1740,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 565,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3804,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3668,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4889,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45071,
            "range": "± 3080",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1920456,
            "range": "± 140641",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6553,
            "range": "± 365",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6812,
            "range": "± 517",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7669,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9459,
            "range": "± 949",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9585,
            "range": "± 669",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13043,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13286,
            "range": "± 894",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10122,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3081691,
            "range": "± 174466",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1347855,
            "range": "± 76710",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5613,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6104,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4966,
            "range": "± 301",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4842,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6129,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7750,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1969,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1106279,
            "range": "± 113787",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 982964,
            "range": "± 56692",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "2a6ea9dad6de9b6c8c346178fd558ef6e1e1eba8",
          "message": "Deny const declarations without initializer inside for loops (#1903)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes/closes #1897.\r\n\r\nIt changes the following:\r\n\r\n- Rejects uninitialized const declarations inside the init value of a for loop statement.\r\n- Adds test for the case.",
          "timestamp": "2022-03-07T16:11:51Z",
          "tree_id": "df5ac4bb11781ac23c12b839b5e5fab312f61b3c",
          "url": "https://github.com/boa-dev/boa/commit/2a6ea9dad6de9b6c8c346178fd558ef6e1e1eba8"
        },
        "date": 1646671755279,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4896,
            "range": "± 215",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16265,
            "range": "± 1074",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18895,
            "range": "± 1206",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10993,
            "range": "± 529",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11491,
            "range": "± 660",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12064,
            "range": "± 782",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7250,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9746,
            "range": "± 537",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9542,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11798,
            "range": "± 538",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13864,
            "range": "± 716",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15706,
            "range": "± 805",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 168759,
            "range": "± 10364",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8684,
            "range": "± 711",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12959,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6586,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13098,
            "range": "± 742",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16347,
            "range": "± 850",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16010,
            "range": "± 829",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6223,
            "range": "± 320",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33402,
            "range": "± 1774",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30017,
            "range": "± 1399",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1216,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2569,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3038,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1824,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1932,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2098,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1832,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1816,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2066,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2168,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1737,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2337,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4589,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2181,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2751,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1733,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1344,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1415,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1864,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 659,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4443,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4187,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5967,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53456,
            "range": "± 2161",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2276795,
            "range": "± 93220",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7833,
            "range": "± 387",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8185,
            "range": "± 412",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8418,
            "range": "± 380",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11154,
            "range": "± 552",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11744,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15775,
            "range": "± 959",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15777,
            "range": "± 741",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12136,
            "range": "± 690",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3599314,
            "range": "± 169161",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1570414,
            "range": "± 60893",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6753,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7340,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5948,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5583,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7136,
            "range": "± 293",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9394,
            "range": "± 482",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2456,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1330457,
            "range": "± 76456",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1194032,
            "range": "± 66412",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "9f9e36c9105426976594db8b8b9ef55cf2336be3",
          "message": "Fix try/catch/finally related bugs and add tests (#1901)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes some bugs related to try blocks:\r\n\r\n- Fixes a panic when a finally block contained variable declarations. (Thanks to @VTCAKAVSMoACE for the report!)\r\n- Fixes a bug where try blocks in the last position of a statement list didn't return its inner last value as the result of the evaluation.\r\n- Add tests for both cases and two other common cases.\r\n- Extract and cleanup some code.",
          "timestamp": "2022-03-07T17:13:39Z",
          "tree_id": "c93f8d05f0f5ff34cb5f5c30c19b6fba40b9e932",
          "url": "https://github.com/boa-dev/boa/commit/9f9e36c9105426976594db8b8b9ef55cf2336be3"
        },
        "date": 1646675324959,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4269,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13351,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15761,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8967,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9616,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10273,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6276,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8174,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8015,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9842,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11675,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12866,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130618,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7315,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10689,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5489,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10854,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13935,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13694,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5194,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27863,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24433,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1917,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2244,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1384,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1398,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1586,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1373,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1380,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1606,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1599,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1234,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1777,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3740,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1590,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2078,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1135,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 893,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1087,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1274,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 445,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3346,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3205,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4391,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41736,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1715451,
            "range": "± 3164",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5999,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6266,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6664,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8875,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8941,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12143,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12070,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9670,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3220052,
            "range": "± 5953",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1385533,
            "range": "± 5560",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5184,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5695,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4636,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4455,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5739,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7539,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1930,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1089399,
            "range": "± 7762",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1005263,
            "range": "± 6527",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "6ff36fb2a3ebfa28bbd4077281c1353876b0ff0f",
          "message": "Implement destructing assignments for assignment expressions (#1895)\n\nIt changes the following:\r\n\r\n- Implement destructing assignments for assignment expressions",
          "timestamp": "2022-03-07T19:47:11Z",
          "tree_id": "92dc8d366f8527ba62abd0e6e531042aa186d914",
          "url": "https://github.com/boa-dev/boa/commit/6ff36fb2a3ebfa28bbd4077281c1353876b0ff0f"
        },
        "date": 1646684256129,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 326,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5046,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16579,
            "range": "± 943",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20207,
            "range": "± 1301",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11299,
            "range": "± 683",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11917,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12769,
            "range": "± 661",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7561,
            "range": "± 544",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10239,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9812,
            "range": "± 308",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12279,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14470,
            "range": "± 649",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16121,
            "range": "± 1351",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 177564,
            "range": "± 7141",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9096,
            "range": "± 715",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13052,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6843,
            "range": "± 307",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13152,
            "range": "± 1708",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17115,
            "range": "± 928",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16793,
            "range": "± 979",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6455,
            "range": "± 933",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34611,
            "range": "± 2494",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30108,
            "range": "± 918",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1196,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2524,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2963,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1787,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1799,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2082,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1795,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1825,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2107,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2111,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1636,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2323,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4631,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2150,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2722,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1677,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1287,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1352,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1822,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 640,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4360,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4284,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5804,
            "range": "± 216",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51036,
            "range": "± 1337",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2296071,
            "range": "± 124998",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7741,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8048,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8444,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11535,
            "range": "± 848",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11547,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15341,
            "range": "± 496",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15690,
            "range": "± 929",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12117,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3686441,
            "range": "± 160625",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1584849,
            "range": "± 25114",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6748,
            "range": "± 678",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7388,
            "range": "± 335",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5965,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5507,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7307,
            "range": "± 567",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9326,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2340,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1296209,
            "range": "± 50577",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1169113,
            "range": "± 33265",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "66966290+elasmojs@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "elasmojs"
          },
          "committer": {
            "email": "66966290+elasmojs@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "elasmojs"
          },
          "distinct": false,
          "id": "44b5617d8d7a3a1c2ddb38a8659d60885b51822a",
          "message": "Added boa examples (#1161)\n\nAdded boa examples as per issue #446\r\nOvertaken https://github.com/boa-dev/boa/pull/634\r\n\r\nSomehow screwed that branch up by rebasing it and losing access\r\npings @elasmojs \r\n\r\nThis Pull Request fixes/closes #446 .\r\n\n\nCo-authored-by: Jason Williams <jase.williams@gmail.com>\nCo-authored-by: Iban Eguia (Razican) <razican@protonmail.ch>\nCo-authored-by: jasonwilliams <jase.williams@gmail.com>\nCo-authored-by: jedel1043 <jedel0124@gmail.com>",
          "timestamp": "2022-03-08T01:09:46Z",
          "tree_id": "d88a256917bc28f5ebf832da6edd461bf68cb529",
          "url": "https://github.com/boa-dev/boa/commit/44b5617d8d7a3a1c2ddb38a8659d60885b51822a"
        },
        "date": 1646703874479,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 238,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4255,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11885,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14010,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7975,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8544,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9156,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5608,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7273,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7099,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8745,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10344,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11603,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 116509,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6548,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9557,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4885,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9699,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12399,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12122,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4644,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25015,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21780,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 816,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1703,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2011,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1234,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1246,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1413,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1238,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1236,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1619,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1635,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1273,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4006,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1444,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1868,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1162,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 908,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 967,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1284,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 466,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2949,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2859,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3967,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37617,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1760017,
            "range": "± 3481",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5353,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5611,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5965,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7963,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7959,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10587,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10620,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8644,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2848739,
            "range": "± 3883",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1229263,
            "range": "± 4556",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4655,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5147,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4201,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4506,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5079,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6617,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1936,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1096445,
            "range": "± 11245",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1012284,
            "range": "± 7194",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "7f90829f88c6b184bf8275fb389ce666d2347b2f",
          "message": "Compile StatementList after parse passes on negative tests (#1906)\n\nThis fixes an issue with 262 negative tests, that should produce a syntax errors. Currently we only parse the test code is such cases. If the parsing does not return an error, we do not compile the code further. This caused some panics. Most of them are fixed by now, the last ones will be fixed with #1860.",
          "timestamp": "2022-03-08T16:01:53Z",
          "tree_id": "0a70f69dd5cf0d7912f0e5d2b68f19cb9cd0c820",
          "url": "https://github.com/boa-dev/boa/commit/7f90829f88c6b184bf8275fb389ce666d2347b2f"
        },
        "date": 1646757479179,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 342,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5242,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16700,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20686,
            "range": "± 962",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11254,
            "range": "± 706",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11846,
            "range": "± 836",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12829,
            "range": "± 595",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7932,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10428,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9981,
            "range": "± 554",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12642,
            "range": "± 682",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14559,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17008,
            "range": "± 742",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 179868,
            "range": "± 19237",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9167,
            "range": "± 777",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13427,
            "range": "± 751",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6831,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13747,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17372,
            "range": "± 895",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17003,
            "range": "± 597",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6741,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36376,
            "range": "± 2319",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31896,
            "range": "± 2021",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1318,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2714,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3124,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1909,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1912,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2185,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1917,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2013,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2135,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2174,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1755,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2388,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4858,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2257,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2970,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1784,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1381,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1435,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1900,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 683,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4517,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4450,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6063,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54212,
            "range": "± 2291",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2356188,
            "range": "± 101844",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8048,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8444,
            "range": "± 688",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8904,
            "range": "± 370",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12063,
            "range": "± 758",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12426,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16306,
            "range": "± 1264",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15959,
            "range": "± 730",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12496,
            "range": "± 515",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3911562,
            "range": "± 173831",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1610255,
            "range": "± 77670",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6861,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7820,
            "range": "± 387",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6691,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6035,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7617,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10029,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2492,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1407003,
            "range": "± 46105",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1251582,
            "range": "± 74622",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "92dbba6c5d4b0d5e7f2e9d6efb09fc733ee83184",
          "message": "Prevent breaks without loop or switch from causing panics (#1860)\n\nThis PR changes the following:\r\n\r\n- Replaces a panic with a syntax error when a break is used outside of a loop or switch\r\n- Adds a test for that",
          "timestamp": "2022-03-08T18:17:15Z",
          "tree_id": "b35dc6b9ebfe70c2e0d98a131a3b895f3ef55f09",
          "url": "https://github.com/boa-dev/boa/commit/92dbba6c5d4b0d5e7f2e9d6efb09fc733ee83184"
        },
        "date": 1646765091599,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 252,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4593,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14420,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16799,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9732,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10376,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11116,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6777,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8812,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8541,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10653,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12584,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14042,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143384,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7997,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11517,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6064,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11299,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14485,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14163,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5544,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30201,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26143,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 941,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2106,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2420,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1460,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1465,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1725,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1456,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1455,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1701,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1703,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1321,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1959,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3652,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1679,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2255,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1323,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1052,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1127,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1499,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 494,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3632,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3538,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4841,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39954,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1865950,
            "range": "± 15802",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6086,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6377,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6750,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9356,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9384,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12611,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12719,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10267,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3119701,
            "range": "± 6173",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1368292,
            "range": "± 12849",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5420,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6164,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4841,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4939,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6461,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7863,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1755,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1074063,
            "range": "± 13325",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 993000,
            "range": "± 16764",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f7920cdca8cff0d7c822fc3241913703e7773bdb",
          "message": "Bump regex from 1.5.4 to 1.5.5 (#1915)\n\nBumps [regex](https://github.com/rust-lang/regex) from 1.5.4 to 1.5.5.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-lang/regex/blob/master/CHANGELOG.md\">regex's changelog</a>.</em></p>\n<blockquote>\n<h1>1.5.5 (2022-03-08)</h1>\n<p>This releases fixes a security bug in the regex compiler. This bug permits a\nvector for a denial-of-service attack in cases where the regex being compiled\nis untrusted. There are no known problems where the regex is itself trusted,\nincluding in cases of untrusted haystacks.</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8\">SECURITY #GHSA-m5pq-gvj9-9vr8</a>:\nFixes a bug in the regex compiler where empty sub-expressions subverted the\nexisting mitigations in place to enforce a size limit on compiled regexes.\nThe Rust Security Response WG published an advisory about this:\n<a href=\"https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw\">https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/regex/commit/d130381b150756ba7e5940efdc6ebdf47f4febc0\"><code>d130381</code></a> 1.5.5</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e\"><code>ae70b41</code></a> security: fix denial-of-service bug in compiler</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/b92ffd5471018419ec48dbdef32757424439f065\"><code>b92ffd5</code></a> cargo: use SPDX license format</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/f6e52dafdee305d16d6778e7bfe935bd9a6ae38b\"><code>f6e52da</code></a> syntax: fix 'unused' warnings</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/5197f21287344d2994f9cf06758a3ea30f5a26c3\"><code>5197f21</code></a> fuzz: do not use inherits in Cargo.toml</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/3662851482327e3642940981298150c93718de3c\"><code>3662851</code></a> doc: fix typo</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/63ee6699a27b294774af0154862e5cc35b495ee6\"><code>63ee669</code></a> syntax/doc: fix 'their' typo</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/d6bc7a4c3b58e1d618024aaededa722df32fa6e8\"><code>d6bc7a4</code></a> readme: remove broken badge</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/bd7466034f8cccc3b0918201d1eb099cc8be3c56\"><code>bd74660</code></a> fuzz: try to fix build issue</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/bd0a14231b8848669e0d257ba55526f62756c749\"><code>bd0a142</code></a> readme: fix badges</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/regex/compare/1.5.4...1.5.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=regex&package-manager=cargo&previous-version=1.5.4&new-version=1.5.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-09T16:26:05Z",
          "tree_id": "ef2110f2509ef0bc24325aa87d51feea86de1cc8",
          "url": "https://github.com/boa-dev/boa/commit/f7920cdca8cff0d7c822fc3241913703e7773bdb"
        },
        "date": 1646845285978,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4298,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13505,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15897,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9052,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9763,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10380,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6318,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8303,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8070,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9946,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11645,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13266,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130712,
            "range": "± 1174",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7397,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10674,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5531,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11075,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14176,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13853,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5235,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28301,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24758,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 916,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1961,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2285,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1390,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1432,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1631,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1404,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1411,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1634,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1644,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1280,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1839,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4003,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1630,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2133,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1296,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1091,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1469,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3370,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3269,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4460,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42956,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1776548,
            "range": "± 3524",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6053,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6299,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6721,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9369,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9412,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12471,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12578,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9713,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3179289,
            "range": "± 5669",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1378120,
            "range": "± 8362",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5277,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5811,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4707,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4475,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5733,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7476,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1955,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1095156,
            "range": "± 13066",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1008745,
            "range": "± 20623",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "51ae856c838ea95a20b96878f18b454b9517f9b5",
          "message": "Bump css-loader from 6.7.0 to 6.7.1 (#1914)\n\nBumps [css-loader](https://github.com/webpack-contrib/css-loader) from 6.7.0 to 6.7.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/releases\">css-loader's releases</a>.</em></p>\n<blockquote>\n<h2>v6.7.1</h2>\n<h3><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.7.0...v6.7.1\">6.7.1</a> (2022-03-08)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>defaultGetLocalIdent export (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1427\">#1427</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/74dac1e428569236d386ff4e0f971e35c334087a\">74dac1e</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md\">css-loader's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.7.0...v6.7.1\">6.7.1</a> (2022-03-08)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>defaultGetLocalIdent export (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1427\">#1427</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/74dac1e428569236d386ff4e0f971e35c334087a\">74dac1e</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/830fe2ce372d5761ec01a000c626672ca8ef1658\"><code>830fe2c</code></a> chore(release): 6.7.1</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/74dac1e428569236d386ff4e0f971e35c334087a\"><code>74dac1e</code></a> fix: defaultGetLocalIdent export (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1427\">#1427</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.7.0...v6.7.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=6.7.0&new-version=6.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-09T16:40:34Z",
          "tree_id": "95ad7850356b1237a74c42f5cca5089b6ce18c6d",
          "url": "https://github.com/boa-dev/boa/commit/51ae856c838ea95a20b96878f18b454b9517f9b5"
        },
        "date": 1646846019331,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 290,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4692,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15170,
            "range": "± 581",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18265,
            "range": "± 1239",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10215,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11128,
            "range": "± 771",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11705,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7832,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9825,
            "range": "± 749",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9717,
            "range": "± 823",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11442,
            "range": "± 1017",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14149,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16435,
            "range": "± 853",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 167029,
            "range": "± 8270",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8547,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12422,
            "range": "± 887",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6675,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12882,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16613,
            "range": "± 1324",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15478,
            "range": "± 616",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5788,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34342,
            "range": "± 2476",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27512,
            "range": "± 994",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1096,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2232,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2660,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1588,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1700,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1938,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1786,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1640,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1870,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1904,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1486,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2084,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4170,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1898,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2421,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1498,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1203,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1227,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1662,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 666,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4144,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3783,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5092,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 47867,
            "range": "± 2921",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2066310,
            "range": "± 133395",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7197,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7476,
            "range": "± 1277",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8037,
            "range": "± 287",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10626,
            "range": "± 949",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10536,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14118,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14274,
            "range": "± 484",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11022,
            "range": "± 568",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3657189,
            "range": "± 202976",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1432469,
            "range": "± 83881",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5941,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6526,
            "range": "± 320",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5382,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5052,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6355,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8458,
            "range": "± 511",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2100,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1172159,
            "range": "± 54214",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1057345,
            "range": "± 63564",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "a44be7073b678afd2ce0472108b6315ea4b81574",
          "message": "Fix postfix increment and decrement return values (#1913)\n\nThis fixes a bug with the postfix increment and decrement. Before those operators would return the left-hand-side value, but the spec specifies they should return ToNumeric(left-had-side value).",
          "timestamp": "2022-03-09T19:26:46Z",
          "tree_id": "5acd9e59cfbab9e8a863126106a92b91a02e9d7c",
          "url": "https://github.com/boa-dev/boa/commit/a44be7073b678afd2ce0472108b6315ea4b81574"
        },
        "date": 1646855830927,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5122,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15753,
            "range": "± 555",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19485,
            "range": "± 836",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11099,
            "range": "± 356",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12049,
            "range": "± 355",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12977,
            "range": "± 477",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7691,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10128,
            "range": "± 1038",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9850,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12397,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14693,
            "range": "± 451",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16415,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 173380,
            "range": "± 7340",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9415,
            "range": "± 365",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13445,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6865,
            "range": "± 490",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13829,
            "range": "± 419",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17952,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17252,
            "range": "± 760",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6456,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35673,
            "range": "± 1202",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30568,
            "range": "± 1367",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1227,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2584,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2960,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1811,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1916,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2156,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1903,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1860,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2165,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2197,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1740,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2429,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4776,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2191,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2891,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1801,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1369,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1369,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1820,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 671,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4381,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4276,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5659,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52758,
            "range": "± 2324",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2302386,
            "range": "± 75478",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8025,
            "range": "± 323",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8213,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8642,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11821,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11948,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16080,
            "range": "± 819",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15999,
            "range": "± 368",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12768,
            "range": "± 389",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3941037,
            "range": "± 168177",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1670749,
            "range": "± 66715",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6511,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7226,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6100,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5715,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7082,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9641,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2367,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1325733,
            "range": "± 51621",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1153491,
            "range": "± 41138",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "51f75d8ccbdd35a0918b5d5e413c9988dda751cd",
          "message": "Update `yarn.lock` and add `build:prod` command (#1910)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request makes it easier to build the Boa playground in production mode, with a new `build:prod` command.",
          "timestamp": "2022-03-10T09:30:47Z",
          "tree_id": "696ed7b2beb7dc797dc85bf39f9b1ea5c62fee29",
          "url": "https://github.com/boa-dev/boa/commit/51f75d8ccbdd35a0918b5d5e413c9988dda751cd"
        },
        "date": 1646906590698,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4309,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13453,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15866,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9029,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9795,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10354,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6392,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8320,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8050,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9903,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11756,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13292,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130955,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7373,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10647,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5523,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11132,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14282,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13985,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5250,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28440,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24820,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 900,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1926,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2253,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1371,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1399,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1606,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1385,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1409,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1632,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1597,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1253,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1806,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3834,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1642,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2115,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1087,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1463,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 494,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3367,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4404,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42104,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1767767,
            "range": "± 5747",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6066,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6306,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6674,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8941,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8990,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12037,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12082,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9679,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3074337,
            "range": "± 6380",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1359931,
            "range": "± 5952",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5260,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5759,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4685,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4476,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5706,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7536,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1928,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1079761,
            "range": "± 6130",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 991590,
            "range": "± 6460",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "09bfabb0b0204b0534d4616927d869d0221a3edd",
          "message": "Bump git2 from 0.14.1 to 0.14.2 (#1919)\n\nBumps [git2](https://github.com/rust-lang/git2-rs) from 0.14.1 to 0.14.2.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/0443adb5388b2a529c042256e7716c36dc567220\"><code>0443adb</code></a> Bump libgit2-sys to 0.13.2 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/820\">#820</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/871788d261f60b3b319f1d0d8a450b1cfc70c667\"><code>871788d</code></a> Add binding for git_odb_exists_ext (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/818\">#818</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d703dd940f1302227a9efb6672dbdbf34f4cb0bc\"><code>d703dd9</code></a> Update to 1.4.2 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/815\">#815</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/8c6a26bd74f2a16c49a8187127152ff3c3b53276\"><code>8c6a26b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/814\">#814</a> from weihanglo/git2-curl-0.15.0</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/ce54dacf986e4ce309f1d982987621f496c40c62\"><code>ce54dac</code></a> Bump version of git2-curl</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/64d849b8436a6b77a2636693a7523b5cac9cd993\"><code>64d849b</code></a> Update to 1.4.1 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/811\">#811</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/af6fc41c2918c07d2c898c5630b552c2525c9951\"><code>af6fc41</code></a> Bump libgit2 in version probe and readme (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/808\">#808</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/509fe5832ea35f6a670333da9e98ba5571419318\"><code>509fe58</code></a> Bump libgit2 to 1.4.0 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/806\">#806</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/58ed9c32e1dff518c0d408f1fc08b543f35b1bd7\"><code>58ed9c3</code></a> <code>libgit2-sys</code>: use <code>src</code> instead <code>.git</code> as vendored indicator (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/801\">#801</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/ae02afdbf0a8ab352aad9f18c726a70a1e7ecf0b\"><code>ae02afd</code></a> Harmonize commitish and committish in docstrings (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/799\">#799</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/git2-rs/compare/git2-curl-0.14.1...0.14.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=git2&package-manager=cargo&previous-version=0.14.1&new-version=0.14.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-11T12:30:44Z",
          "tree_id": "ca2929b0a1203130194025cc497f9008e4eb92ae",
          "url": "https://github.com/boa-dev/boa/commit/09bfabb0b0204b0534d4616927d869d0221a3edd"
        },
        "date": 1647004101081,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 327,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4470,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15019,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17434,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9914,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10595,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11310,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6798,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9083,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8661,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10863,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12704,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14581,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149219,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8143,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12095,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5991,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11889,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15552,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15352,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5716,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30946,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26932,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1124,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2341,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2691,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1657,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1677,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1916,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1710,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1673,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1978,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1967,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1540,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2145,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4685,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1980,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2519,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1568,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1132,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1188,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1628,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 618,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4029,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3926,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5421,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50992,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2132374,
            "range": "± 16883",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7259,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7503,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8018,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11266,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11258,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14650,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14614,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11564,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3680226,
            "range": "± 24012",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1610862,
            "range": "± 13269",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6259,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6947,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5636,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5347,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6970,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8900,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2382,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1283437,
            "range": "± 6646",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1173903,
            "range": "± 6168",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "128f8366801e37fc4a7bec8e34cf196c2a96819b",
          "message": "Added funding information to the repository (#1871)\n\nThis will add the \"Sponsor\" button to the repository, which will redirect to the OpenCollective platform.",
          "timestamp": "2022-03-12T15:39:56Z",
          "tree_id": "6604e13145d45380bac87113a87ff5a56a64324e",
          "url": "https://github.com/boa-dev/boa/commit/128f8366801e37fc4a7bec8e34cf196c2a96819b"
        },
        "date": 1647101261519,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 240,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3699,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11751,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13740,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7889,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9562,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10242,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6155,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8133,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 6986,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8692,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10113,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11416,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129475,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6405,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9376,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5395,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10778,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13859,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13571,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4604,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24494,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21484,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 823,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1755,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2010,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1237,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1430,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1647,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1450,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1433,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1476,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1647,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1320,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1853,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3504,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1446,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2170,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1309,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1050,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 983,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1306,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 452,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3039,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2917,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3972,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37309,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1587084,
            "range": "± 4197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5280,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5506,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5872,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8321,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9430,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12431,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12512,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8545,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2703206,
            "range": "± 18203",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1185046,
            "range": "± 5066",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5221,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5765,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4173,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4488,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5764,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7371,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1979,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 942782,
            "range": "± 4413",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 865624,
            "range": "± 4151",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "nikodem@rabulinski.com",
            "name": "Nikodem Rabuliński",
            "username": "nrabulinski"
          },
          "committer": {
            "email": "nikodem@rabulinski.com",
            "name": "Nikodem Rabuliński",
            "username": "nrabulinski"
          },
          "distinct": false,
          "id": "9eb6a78abc86fcfd6d57d8cec906e771d87b489a",
          "message": "Implement Array.from (#1831)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes/closes #1784.\r\n\r\nThere're still a few tests failing, notably:\r\n- `iter-set-elem-prop-non-writable` - we don't have generator functions implemented\r\n- `calling-from-valid-1-noStrict`, `iter-map-fn-this-non-strict` - `thisArg` in non-strict mode, when undefined, should be inherited (that's what I'm guessing, I haven't confirmed this, but strict counterparts do pass with `thisArg` being `undefined`)\r\n- `source-array-boundary`, `elements-deleted-after` - ~~Not sure yet, still investigating, but they also include thisArg, so perhaps function calling has an underlying issue?~~ Failing because `this` on the top level evaluates to an empty object instead of containing everything from the top scope\n\nCo-authored-by: HalidOdat <halidodat@gmail.com>",
          "timestamp": "2022-03-12T19:33:16Z",
          "tree_id": "1057a11a7deb160dccc248f4bc01dbc062bbd903",
          "url": "https://github.com/boa-dev/boa/commit/9eb6a78abc86fcfd6d57d8cec906e771d87b489a"
        },
        "date": 1647115238759,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 274,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4222,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13334,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15604,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8835,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9458,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10179,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6197,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8126,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7842,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9813,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11399,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12956,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129138,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7403,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10816,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5487,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10849,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13878,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13659,
            "range": "± 532",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5207,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27965,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24332,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 909,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1943,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2268,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1369,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1414,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1609,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1398,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1402,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1637,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1628,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1266,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1830,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3936,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1622,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2083,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1264,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1045,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1103,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1469,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 492,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3431,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3273,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4573,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41035,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1726685,
            "range": "± 4162",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5997,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6310,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6667,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8821,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8809,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11992,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11993,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9654,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3049233,
            "range": "± 4006",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1334977,
            "range": "± 4054",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5258,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5803,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4727,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4432,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5641,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7549,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1916,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1059688,
            "range": "± 8504",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 973868,
            "range": "± 4062",
            "unit": "ns/iter"
          }
        ]
      }
    ]
  }
}