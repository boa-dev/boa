window.BENCHMARK_DATA = {
  "lastUpdate": 1658419341184,
  "repoUrl": "https://github.com/boa-dev/boa",
  "entries": {
    "Boa Benchmarks": [
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "distinct": false,
          "id": "13b29ecd682f323a1221d227428f61f0985e36cf",
          "message": "auto generate release notes based on labels (#1756)\n\nThis should help with the process of making the changelogs on releases.\r\nhttps://docs.github.com/en/repositories/releasing-projects-on-github/automatically-generated-release-notes",
          "timestamp": "2021-12-22T03:44:12Z",
          "tree_id": "29b98305f878614e9e841023f80d18a8e59bea57",
          "url": "https://github.com/boa-dev/boa/commit/13b29ecd682f323a1221d227428f61f0985e36cf"
        },
        "date": 1640146523986,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 344.35,
            "range": "± 0.060",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4.2025,
            "range": "± 0.003",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 18.12,
            "range": "± 0.010",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.2572,
            "range": "± 0.001",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 871.69,
            "range": "± 1.130",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 9.4953,
            "range": "± 0.035",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 4.8046,
            "range": "± 0.004",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 674.58,
            "range": "± 0.900",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 622.27,
            "range": "± 3.430",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 13.23,
            "range": "± 0.008",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31.376,
            "range": "± 0.011",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27.555,
            "range": "± 0.083",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "baa272c9bbc38ee3d38ce20c890986f739af13e1",
          "message": "Bump webpack-dev-server from 4.6.0 to 4.7.1 (#1759)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.6.0 to 4.7.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.1</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.0...v4.7.1\">4.7.1</a> (2021-12-22)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>removed <code>url</code> package, fixed compatibility with future webpack defaults (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4132\">#4132</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/4e5d8eae654ef382697722c6406dbc96207594aa\">4e5d8ea</a>)</li>\n</ul>\n<h2>v4.7.0</h2>\n<h2><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.6.0...v4.7.0\">4.7.0</a> (2021-12-21)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>setupMiddlewares</code> option and deprecated <code>onAfterSetupMiddleware</code> and <code>onBeforeSetupMiddleware</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4068\">#4068</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c13aa560651a3bb4c4a7b1b4363c04383596c7e9\">c13aa56</a>)</li>\n<li>added types (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8f02c3f3d6131fd37f58ef4d5cbe15578c94a6fd\">8f02c3f</a>)</li>\n<li>show deprecation warning for <code>cacert</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4115\">#4115</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c73ddfb934ec748e3dd34456d4293b933e9c6c99\">c73ddfb</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add description for <code>watchFiles</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4057\">#4057</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/75f381751e5377ae297c32f9fcdcd096ef28c5c2\">75f3817</a>)</li>\n<li>allow passing options for custom server (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4110\">#4110</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fc8bed95251f27a24c1441307c44782f3836edd6\">fc8bed9</a>)</li>\n<li>correct schema for <code>ClientLogging</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4084\">#4084</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/9b7ae7b5f4ac4a920b1ae3b47a8eb15d093cb369\">9b7ae7b</a>)</li>\n<li>mark <code>--open-app</code> deprecated in favor of <code>--open-app-name</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4091\">#4091</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/693c28a0499e431b09274b8b7ecce71adb292c8f\">693c28a</a>)</li>\n<li>show deprecation warning for both <code>https</code> and <code>http2</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4069\">#4069</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/d8d5d71c8ca495098e1ee30ebc72ffd657ad5ba0\">d8d5d71</a>)</li>\n<li>update <code>--web-socket-server</code> description (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4098\">#4098</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/65955e96cf7869dd4294699fd2a3878c2179c656\">65955e9</a>)</li>\n<li>update <code>listen</code> and <code>close</code> deprecation warning message (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4097\">#4097</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/b217a191d09a93e8dcc1fff2ee26e97857e096d3\">b217a19</a>)</li>\n<li>update descriptions of <code>https</code> and <code>server</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4094\">#4094</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f97c9e2df460ef9a84c8ab2016c6bce3c90d93ac\">f97c9e2</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.0...v4.7.1\">4.7.1</a> (2021-12-22)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>removed <code>url</code> package, fixed compatibility with future webpack defaults (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4132\">#4132</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/4e5d8eae654ef382697722c6406dbc96207594aa\">4e5d8ea</a>)</li>\n</ul>\n<h2><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.6.0...v4.7.0\">4.7.0</a> (2021-12-21)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>setupMiddlewares</code> option and deprecated <code>onAfterSetupMiddleware</code> and <code>onBeforeSetupMiddleware</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4068\">#4068</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c13aa560651a3bb4c4a7b1b4363c04383596c7e9\">c13aa56</a>)</li>\n<li>added types (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8f02c3f3d6131fd37f58ef4d5cbe15578c94a6fd\">8f02c3f</a>)</li>\n<li>show deprecation warning for <code>cacert</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4115\">#4115</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/c73ddfb934ec748e3dd34456d4293b933e9c6c99\">c73ddfb</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add description for <code>watchFiles</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4057\">#4057</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/75f381751e5377ae297c32f9fcdcd096ef28c5c2\">75f3817</a>)</li>\n<li>allow passing options for custom server (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4110\">#4110</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fc8bed95251f27a24c1441307c44782f3836edd6\">fc8bed9</a>)</li>\n<li>correct schema for <code>ClientLogging</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4084\">#4084</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/9b7ae7b5f4ac4a920b1ae3b47a8eb15d093cb369\">9b7ae7b</a>)</li>\n<li>mark <code>--open-app</code> deprecated in favor of <code>--open-app-name</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4091\">#4091</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/693c28a0499e431b09274b8b7ecce71adb292c8f\">693c28a</a>)</li>\n<li>show deprecation warning for both <code>https</code> and <code>http2</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4069\">#4069</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/d8d5d71c8ca495098e1ee30ebc72ffd657ad5ba0\">d8d5d71</a>)</li>\n<li>update <code>--web-socket-server</code> description (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4098\">#4098</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/65955e96cf7869dd4294699fd2a3878c2179c656\">65955e9</a>)</li>\n<li>update <code>listen</code> and <code>close</code> deprecation warning message (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4097\">#4097</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/b217a191d09a93e8dcc1fff2ee26e97857e096d3\">b217a19</a>)</li>\n<li>update descriptions of <code>https</code> and <code>server</code> options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4094\">#4094</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f97c9e2df460ef9a84c8ab2016c6bce3c90d93ac\">f97c9e2</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/afe49753b9f38679d200e88059bbe9a97e25e368\"><code>afe4975</code></a> chore(release): 4.1.7</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/4e5d8eae654ef382697722c6406dbc96207594aa\"><code>4e5d8ea</code></a> fix: droped <code>url</code> package (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4132\">#4132</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/b0c98f047e41116d947490e3adcdfaccaaf9afb5\"><code>b0c98f0</code></a> chore(release): 4.7.0</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/3138213401301ebf191b3b152a78529f5f5e412b\"><code>3138213</code></a> chore(deps): update (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4127\">#4127</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/8f02c3f3d6131fd37f58ef4d5cbe15578c94a6fd\"><code>8f02c3f</code></a> feat: added types</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f4fb15f14cd1c2b6bd3a536c4d25b3004f035a90\"><code>f4fb15f</code></a> fix: update description of <code>onAfterSetupMiddleware</code> and `onBeforeSetupMiddlew...</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/37b73d5f7d7e3cff12fed8aedfc981b3fb4d3de7\"><code>37b73d5</code></a> test: add e2e test for <code>WEBPACK_SERVE</code> env variable (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4125\">#4125</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f5a9d05f3888cd5c0bb9e974d48680710fdda6f7\"><code>f5a9d05</code></a> chore(deps-dev): bump eslint from 8.4.1 to 8.5.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4121\">#4121</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/c9b959fe15e5778a906d957f832a43384cd90b1b\"><code>c9b959f</code></a> chore(deps): bump ws from 8.3.0 to 8.4.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4124\">#4124</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/42208aab74c5b77382b8e8058e657e478ee62174\"><code>42208aa</code></a> chore(deps-dev): bump lint-staged from 12.1.2 to 12.1.3 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4122\">#4122</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.6.0...v4.7.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.6.0&new-version=4.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2021-12-23T15:11:48Z",
          "tree_id": "b0a4c4856db1f9c4faf3194476535f534bcabd79",
          "url": "https://github.com/boa-dev/boa/commit/baa272c9bbc38ee3d38ce20c890986f739af13e1"
        },
        "date": 1640274009314,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 344.16,
            "range": "± 0.050",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4.2468,
            "range": "± 0.001",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 18.269,
            "range": "± 0.008",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.2693,
            "range": "± 0.001",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 870.27,
            "range": "± 0.420",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 9.6632,
            "range": "± 0.006",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 4.1845,
            "range": "± 0.002",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 592.69,
            "range": "± 0.790",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 547.7,
            "range": "± 0.850",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 13.175,
            "range": "± 0.006",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28.224,
            "range": "± 0.016",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24.775,
            "range": "± 0.009",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "039c46ba7b3d6d672bfe7c6bc395677e1240874b",
          "message": "Removed a bunch of warnings and clippy errors (#1754)\n\nThis Pull Request fixes some warnings and clips errors. It conflicts with the VM/non-VM PR, so should probably go in first, so that this branch gets properly updated and we get the list of real warnings/errors there.",
          "timestamp": "2021-12-23T17:43:15Z",
          "tree_id": "a58638a3e680d9d3775df1ee7a317f4eeeb68ed7",
          "url": "https://github.com/boa-dev/boa/commit/039c46ba7b3d6d672bfe7c6bc395677e1240874b"
        },
        "date": 1640283483296,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 303.96,
            "range": "± 0.120",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3.7571,
            "range": "± 0.002",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 16.09,
            "range": "± 0.009",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.0001,
            "range": "± 0.002",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 768.75,
            "range": "± 0.420",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 8.4105,
            "range": "± 0.007",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 4.7539,
            "range": "± 0.005",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 672.31,
            "range": "± 0.900",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 618.61,
            "range": "± 1.020",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 13.149,
            "range": "± 0.009",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27.686,
            "range": "± 0.009",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24.281,
            "range": "± 0.016",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "949e481be88c48b833ef3daaa9995ade691f672c",
          "message": "Fix some broken links in the profiler documentation (#1762)\n\nThe `measureme` repo changed their file names for their READMEs, so the links were broken. This is now fixed.",
          "timestamp": "2021-12-24T13:05:27Z",
          "tree_id": "feb742e56b12ac5871e669d9e08e811b9f8c790b",
          "url": "https://github.com/boa-dev/boa/commit/949e481be88c48b833ef3daaa9995ade691f672c"
        },
        "date": 1640352839530,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 416.72,
            "range": "± 15.910",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5.5811,
            "range": "± 0.178",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 24.159,
            "range": "± 0.722",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3.1741,
            "range": "± 0.085",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 993.36,
            "range": "± -978.023",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11.801,
            "range": "± 0.358",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 6.1516,
            "range": "± 0.179",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 806.28,
            "range": "± 25.610",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 713.58,
            "range": "± 23.360",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 17.679,
            "range": "± 0.539",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37.76,
            "range": "± 1.274",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 33.18,
            "range": "± 0.648",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "0545f004248c26c4afaf1ca5d9dbe787f4064575",
          "message": "Updated test262 suite and dependencies (#1755)\n\nThis Pull Request updates the Test262 test suite with the latest tests, and updates both the JavaScript and Rust dependencies.",
          "timestamp": "2021-12-24T13:14:36Z",
          "tree_id": "06a9f5b506329571fd3a06976f7ed69ada5dad8c",
          "url": "https://github.com/boa-dev/boa/commit/0545f004248c26c4afaf1ca5d9dbe787f4064575"
        },
        "date": 1640353707148,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 421.71,
            "range": "± 6.010",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5.5901,
            "range": "± 0.192",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 23.487,
            "range": "± 0.644",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2.9769,
            "range": "± 0.080",
            "unit": "ms"
          },
          {
            "name": "Array pop (Execution)",
            "value": 991.5,
            "range": "± -978.116",
            "unit": "us"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12.228,
            "range": "± 0.384",
            "unit": "us"
          },
          {
            "name": "String copy (Execution)",
            "value": 6.1595,
            "range": "± 0.123",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 734.41,
            "range": "± 18.850",
            "unit": "us"
          },
          {
            "name": "Mini js (Execution)",
            "value": 691.43,
            "range": "± 24.170",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 18.261,
            "range": "± 0.477",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36.423,
            "range": "± 1.191",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31.451,
            "range": "± 0.729",
            "unit": "us"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "936006+jasonwilliams@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "dfb3df5bf2c920262a0250d4b924201e78373541",
          "message": "Start removing non-VM path (#1747)",
          "timestamp": "2021-12-25T18:56:36+01:00",
          "tree_id": "699f9b045c443fc5d27154b330f12abe1a5ef6c6",
          "url": "https://github.com/boa-dev/boa/commit/dfb3df5bf2c920262a0250d4b924201e78373541"
        },
        "date": 1640456211531,
        "tool": "criterion",
        "benches": [
          {
            "name": "Create Realm",
            "value": 394.74,
            "range": "± 2.930",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4.9877,
            "range": "± 0.025",
            "unit": "us"
          },
          {
            "name": "For loop (Parser)",
            "value": 16.572,
            "range": "± 0.114",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19.367,
            "range": "± 0.255",
            "unit": "us"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9.7897,
            "range": "± 0.041",
            "unit": "us"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12.194,
            "range": "± 0.063",
            "unit": "us"
          },
          {
            "name": "Array access (Parser)",
            "value": 14.792,
            "range": "± 0.240",
            "unit": "us"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15.992,
            "range": "± 0.101",
            "unit": "us"
          },
          {
            "name": "Array pop (Parser)",
            "value": 173.55,
            "range": "± 1.100",
            "unit": "us"
          },
          {
            "name": "String copy (Parser)",
            "value": 6.606,
            "range": "± 0.078",
            "unit": "us"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34.241,
            "range": "± 0.220",
            "unit": "us"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30.085,
            "range": "± 0.256",
            "unit": "us"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 962.94,
            "range": "± 3.630",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2.8776,
            "range": "± 0.028",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3.3503,
            "range": "± 0.015",
            "unit": "us"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1.9611,
            "range": "± 0.028",
            "unit": "us"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1.6459,
            "range": "± 0.030",
            "unit": "us"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8.3769,
            "range": "± 0.099",
            "unit": "us"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1.4448,
            "range": "± 0.027",
            "unit": "us"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6.182,
            "range": "± 0.126",
            "unit": "us"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5.8261,
            "range": "± 0.099",
            "unit": "us"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5.8707,
            "range": "± 0.092",
            "unit": "us"
          },
          {
            "name": "For loop (Execution)",
            "value": 49.969,
            "range": "± 0.792",
            "unit": "us"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3.0927,
            "range": "± 0.048",
            "unit": "ms"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13.883,
            "range": "± 0.232",
            "unit": "us"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1.5393,
            "range": "± 0.023",
            "unit": "ms"
          },
          {
            "name": "String copy (Execution)",
            "value": 6.1732,
            "range": "± 0.093",
            "unit": "us"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1.5995,
            "range": "± 0.021",
            "unit": "ms"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1.5253,
            "range": "± 0.025",
            "unit": "ms"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "50dda0ba7e4a12a044731e1f6b0363403620c551",
          "message": "Using upstream benchmark action (#1753)\n\n* Using upstream benchmark action\r\n\r\n* Updated benchmarks action",
          "timestamp": "2021-12-31T14:10:59+01:00",
          "tree_id": "46d1948f911af692d193904bfbff39a922df9712",
          "url": "https://github.com/boa-dev/boa/commit/50dda0ba7e4a12a044731e1f6b0363403620c551"
        },
        "date": 1640957402332,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4778,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15686,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18479,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10636,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11335,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12243,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7148,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9549,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9278,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11627,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13540,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15159,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159553,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8675,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12536,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6397,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12625,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15936,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15856,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6215,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33137,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28777,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 803,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2412,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2870,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1475,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1567,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1878,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1482,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1484,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1821,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1821,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1445,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2222,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7279,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1784,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2519,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1257,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1668,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2008,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2467,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 968,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5460,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5344,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5240,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45937,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2851316,
            "range": "± 3094",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6423,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6600,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7130,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10082,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10104,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13199,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13226,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10749,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3186127,
            "range": "± 5885",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1344167,
            "range": "± 5352",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6418,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7679,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5594,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5449,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6844,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8722,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2187,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1460586,
            "range": "± 13850",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1347274,
            "range": "± 10698",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "RageKnify@gmail.com",
            "name": "Joã Borges",
            "username": "RageKnify"
          },
          "committer": {
            "email": "RageKnify@gmail.com",
            "name": "Joã Borges",
            "username": "RageKnify"
          },
          "distinct": false,
          "id": "56cd7f38b89599c5d32841f4855f4c648142d17c",
          "message": "Fix bors hanging (#1767)\n\nThis Pull Request fixes the bors hanging we've had recently\r\nThe vm action had been removed but bors was still waiting for it\r\n\r\nIt changes the following:\r\n\r\n- Remove 'Tests on Linux with vm enabled' from the actions to be waited for",
          "timestamp": "2021-12-31T16:50:45Z",
          "tree_id": "129e18bda125f27020faf2a3e21e2d0b5f7fa2e3",
          "url": "https://github.com/boa-dev/boa/commit/56cd7f38b89599c5d32841f4855f4c648142d17c"
        },
        "date": 1640971185215,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 411,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5097,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17377,
            "range": "± 739",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20291,
            "range": "± 876",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11625,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12292,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13138,
            "range": "± 449",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7949,
            "range": "± 368",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10389,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10038,
            "range": "± 269",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12491,
            "range": "± 832",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14981,
            "range": "± 1027",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16626,
            "range": "± 1257",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 182359,
            "range": "± 6111",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9275,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13839,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6812,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13722,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17720,
            "range": "± 683",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17363,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6956,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36235,
            "range": "± 1548",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31771,
            "range": "± 621",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 967,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2974,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3419,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1796,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1920,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2286,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1815,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1810,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2208,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2198,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1749,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2722,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8866,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2161,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3082,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1532,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1980,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2409,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2947,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1185,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6737,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6442,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6555,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 56469,
            "range": "± 2141",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3453209,
            "range": "± 106194",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7897,
            "range": "± 609",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8250,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8517,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12436,
            "range": "± 738",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12479,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16166,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16095,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13145,
            "range": "± 293",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3948839,
            "range": "± 114445",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1635033,
            "range": "± 60447",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7932,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9501,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6929,
            "range": "± 364",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6670,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8347,
            "range": "± 463",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10646,
            "range": "± 480",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2675,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1784708,
            "range": "± 55408",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1643381,
            "range": "± 40050",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d831ff3dc599eb5fbf1d0e01a0120f530e184c17",
          "message": "Bump webpack-dev-server from 4.7.1 to 4.7.2 (#1766)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.7.1 to 4.7.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.2</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.1...v4.7.2\">4.7.2</a> (2021-12-29)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>apply <code>onAfterSetupMiddleware</code> after <code>setupMiddlewares</code> (as behavior earlier) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f6bc644bb81b966e030d8f8a54d5a99cd61ec8f2\">f6bc644</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.1...v4.7.2\">4.7.2</a> (2021-12-29)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>apply <code>onAfterSetupMiddleware</code> after <code>setupMiddlewares</code> (as behavior earlier) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f6bc644bb81b966e030d8f8a54d5a99cd61ec8f2\">f6bc644</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/75999bb9bb8803de633fcb037405f45a5bf7d029\"><code>75999bb</code></a> chore(release): 4.7.2</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/90a96f7bd8e5338f91ef8e4fd6c2ddc01e8174db\"><code>90a96f7</code></a> ci: fix (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4143\">#4143</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f6bc644bb81b966e030d8f8a54d5a99cd61ec8f2\"><code>f6bc644</code></a> fix: compatible with <code>onAfterSetupMiddleware</code></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/317e4b9d5c94212d2d481e7cea4ab3f40809cca6\"><code>317e4b9</code></a> docs: fix testing instructions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4133\">#4133</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/ff4550e498988d872f04d0fcebc27c1f946c2097\"><code>ff4550e</code></a> test: remove redundant test cases related to 3rd party code (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4131\">#4131</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/0dd1ee6dcff7245eb15b0ca980953e2154cf77a5\"><code>0dd1ee6</code></a> test: add e2e tests for <code>setupExitSignals</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4130\">#4130</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.1...v4.7.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.7.1&new-version=4.7.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-01T21:40:08Z",
          "tree_id": "0e10ef0c9d7125e1d1b0745ab649df181c8c36c6",
          "url": "https://github.com/boa-dev/boa/commit/d831ff3dc599eb5fbf1d0e01a0120f530e184c17"
        },
        "date": 1641074860057,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4616,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15190,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17604,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10229,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10924,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11790,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6888,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9311,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8893,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11182,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13082,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14635,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153926,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8283,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12075,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6138,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12053,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15338,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15256,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6095,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31784,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27780,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 804,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2392,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2817,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1470,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1577,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1874,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1479,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1481,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1811,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1810,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1441,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2237,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7276,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1779,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2508,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1253,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1667,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2004,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2448,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 968,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5465,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5288,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5252,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46412,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2840190,
            "range": "± 4559",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6441,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6662,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7120,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10074,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10121,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13080,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13161,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10800,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3194023,
            "range": "± 7899",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1345573,
            "range": "± 5338",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6378,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7666,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5553,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5434,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6803,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8649,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2181,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1462413,
            "range": "± 10014",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1348632,
            "range": "± 15442",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "89d91f5b10bae4c85c923d1a7683b8cbd48f701f",
          "message": "Bump benchmark-action/github-action-benchmark from 1.11.2 to 1.11.3 (#1769)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.11.2 to 1.11.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.11.3</h2>\n<p>Fix: fix trailing whitespace characters in cargo benchmarks (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/97\">#97</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.11.3\">v1.11.3</a> - 31 Dec 2021</h1>\n<ul>\n<li><strong>Fix:</strong> Fix trailing whitespace characters in cargo benchmarks (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/97\">#97</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/1c1a8fb0ca538ff5572ed02039d91a610726c19e\"><code>1c1a8fb</code></a> v1.11.3</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.11.2...v1.11.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.11.2&new-version=1.11.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-03T10:43:36Z",
          "tree_id": "1a62602b4a1462a602e8e0b3173db58b99ce0e61",
          "url": "https://github.com/boa-dev/boa/commit/89d91f5b10bae4c85c923d1a7683b8cbd48f701f"
        },
        "date": 1641208504045,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4777,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15573,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18322,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10580,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11305,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12182,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7237,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9600,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9324,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11588,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13448,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15019,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159461,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8624,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12555,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6353,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12502,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15931,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15814,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6163,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32867,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28523,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 803,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2453,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2821,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1486,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1581,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1891,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1506,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1511,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1819,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1818,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1454,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2251,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7293,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1788,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2526,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1261,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1662,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2007,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2451,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 990,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5547,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5369,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5195,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45731,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2841912,
            "range": "± 39004",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6369,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6545,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6974,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10047,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10086,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13027,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13093,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10699,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3191434,
            "range": "± 5358",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1342082,
            "range": "± 6034",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6395,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7702,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5537,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5370,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6944,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8663,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2196,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1452493,
            "range": "± 8931",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1346863,
            "range": "± 7419",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7fba7c0c45c6a79114d01721f41ca27722fdbd5c",
          "message": "Bump indexmap from 1.7.0 to 1.8.0 (#1776)\n\nBumps [indexmap](https://github.com/bluss/indexmap) from 1.7.0 to 1.8.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/bluss/indexmap/blob/master/RELEASES.rst\">indexmap's changelog</a>.</em></p>\n<blockquote>\n<ul>\n<li>\n<p>1.8.0</p>\n<ul>\n<li>\n<p>The new <code>IndexMap::into_keys</code> and <code>IndexMap::into_values</code> will consume\nthe map into keys or values, respectively, matching Rust 1.54's <code>HashMap</code>\nmethods, by <a href=\"https://github.com/taiki-e\"><code>@​taiki-e</code></a> in PR 195_.</p>\n</li>\n<li>\n<p>More of the iterator types implement <code>Debug</code>, <code>ExactSizeIterator</code>, and\n<code>FusedIterator</code>, by <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a> in PR 196_.</p>\n</li>\n<li>\n<p><code>IndexMap</code> and <code>IndexSet</code> now implement rayon's <code>ParallelDrainRange</code>,\nby <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a> in PR 197_.</p>\n</li>\n<li>\n<p><code>IndexMap::with_hasher</code> and <code>IndexSet::with_hasher</code> are now <code>const</code>\nfunctions, allowing static maps and sets, by <a href=\"https://github.com/mwillsey\"><code>@​mwillsey</code></a> in PR 203_.</p>\n</li>\n<li>\n<p><code>IndexMap</code> and <code>IndexSet</code> now implement <code>From</code> for arrays, matching\nRust 1.56's implementation for <code>HashMap</code>, by <a href=\"https://github.com/rouge8\"><code>@​rouge8</code></a> in PR 205_.</p>\n</li>\n<li>\n<p><code>IndexMap</code> and <code>IndexSet</code> now have methods <code>sort_unstable_keys</code>,\n<code>sort_unstable_by</code>, <code>sorted_unstable_by</code>, and <code>par_*</code> equivalents,\nwhich sort in-place without preserving the order of equal items, by\n<a href=\"https://github.com/bhgomes\"><code>@​bhgomes</code></a> in PR 211_.</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>.. _195: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/195\">bluss/indexmap#195</a>\n.. _196: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/196\">bluss/indexmap#196</a>\n.. _197: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/197\">bluss/indexmap#197</a>\n.. _203: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/203\">bluss/indexmap#203</a>\n.. _205: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/205\">bluss/indexmap#205</a>\n.. _211: <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/211\">bluss/indexmap#211</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/bluss/indexmap/commit/916d1c96d2070d736c0ab5d5ba294b1c5593f009\"><code>916d1c9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/213\">#213</a> from cuviper/release-1.7.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/5386d2bf703f48550f9ac6e03c4e28b09cbc689e\"><code>5386d2b</code></a> Release 1.8.0 instead</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/f090281240c05639c665170a2c633c96adfacc07\"><code>f090281</code></a> Release 1.7.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/5a14f7bb8af6e3c8c4fe52bdd2978da07126cbbe\"><code>5a14f7b</code></a> Move recent changes to RELEASES.rst</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/13468f20f51666969b588f0bff7b1749726bf8ca\"><code>13468f2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/211\">#211</a> from bhgomes/add-sort-unstable-methods</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/8bb46ca2e4cc192ab86b6dc80015d8b5a424fe4b\"><code>8bb46ca</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/205\">#205</a> from rouge8/from-array</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/6fca269adf18b1dd0ef0e62f5e8744c7cba51725\"><code>6fca269</code></a> No extra space is used in unstable sorts</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/5d2ce528b3c431722581526b175a51528ae0efa0\"><code>5d2ce52</code></a> Require rustc 1.51+ for <code>IndexMap::from(array)</code> and <code>IndexSet::from(array)</code></li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/f0159f656d95d19b681e63b827538f6d0ca3367b\"><code>f0159f6</code></a> Add <code>IndexMap::from(array)</code> and <code>IndexSet::from(array)</code></li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/4d6dde35b59009e6097a58c6ebbb0cb9b549709d\"><code>4d6dde3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/197\">#197</a> from cuviper/par_drain</li>\n<li>Additional commits viewable in <a href=\"https://github.com/bluss/indexmap/compare/1.7.0...1.8.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=indexmap&package-manager=cargo&previous-version=1.7.0&new-version=1.8.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-11T17:41:09Z",
          "tree_id": "dc87106f2a219587c8f3058d1a7bfbd584e9a42c",
          "url": "https://github.com/boa-dev/boa/commit/7fba7c0c45c6a79114d01721f41ca27722fdbd5c"
        },
        "date": 1641925057949,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 323,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4178,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13775,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18264,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9238,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9858,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10713,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7128,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8377,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8031,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10112,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11737,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13172,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 132985,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7550,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10913,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5576,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11051,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13990,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13825,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5459,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32741,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25341,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 807,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2152,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2487,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1318,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1404,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1715,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1327,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1326,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1587,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1587,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1287,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2024,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6089,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1574,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2221,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1109,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1476,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1768,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2149,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 890,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4940,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4808,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4603,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41545,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2532937,
            "range": "± 2988",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5587,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5775,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6135,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8909,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8940,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11743,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11767,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9486,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3010638,
            "range": "± 7840",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1229794,
            "range": "± 5700",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5668,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6760,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4843,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4736,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5932,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7672,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1951,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1291363,
            "range": "± 12190",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1197867,
            "range": "± 9974",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "distinct": false,
          "id": "2300d87e227242ce12c4880ae14ce50e6b698386",
          "message": "add more timers on object functions (#1775)\n\n```\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Item                                           | Self time | % of total time | Time     | Item count |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| run                                            | 14.27ms   | 15.545          | 161.26ms | 56         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__get_own_property__                   | 9.28ms    | 10.115          | 12.67ms  | 5412       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LexicalEnvironment::get_binding_value          | 9.10ms    | 9.918           | 22.00ms  | 1066       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::validate_and_apply_property_descriptor | 6.12ms    | 6.669           | 6.12ms   | 677        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_set                           | 4.07ms    | 4.434           | 39.14ms  | 818        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_get_own_property              | 3.60ms    | 3.922           | 3.60ms   | 5720       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__call__                               | 3.22ms    | 3.505           | 103.95ms | 410        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_define_own_property           | 3.10ms    | 3.379           | 10.90ms  | 677        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_has_property                  | 2.95ms    | 3.209           | 7.17ms   | 1772       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__has_property__                       | 2.85ms    | 3.107           | 10.02ms  | 1772       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_get                           | 2.85ms    | 3.104           | 8.14ms   | 1632       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__get__                                | 2.81ms    | 3.063           | 10.95ms  | 1632       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetName                                 | 2.56ms    | 2.789           | 24.56ms  | 1066       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__define_own_property__                | 2.48ms    | 2.704           | 13.58ms  | 521        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - SetName                                 | 1.81ms    | 1.972           | 9.52ms   | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Call                                    | 1.35ms    | 1.473           | 103.28ms | 356        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__set__                                | 1.29ms    | 1.401           | 40.43ms  | 818        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetPropertyByName                       | 1.24ms    | 1.354           | 4.95ms   | 355        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Date                                           | 1.07ms    | 1.171           | 1.08ms   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__get_prototype_of__                   | 1.06ms    | 1.151           | 1.21ms   | 621        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetPropertyByValue                      | 1.05ms    | 1.143           | 1.91ms   | 154        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| create_intrinsics                              | 871.52µs  | 0.949           | 7.92ms   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Array                                          | 761.02µs  | 0.829           | 763.84µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Opcode retrieval                               | 756.35µs  | 0.824           | 756.35µs | 4941       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Math                                           | 750.16µs  | 0.817           | 753.72µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object                                         | 618.59µs  | 0.674           | 620.77µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| String                                         | 611.83µs  | 0.667           | 614.46µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| RegExp                                         | 419.63µs  | 0.457           | 421.09µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| next()                                         | 339.03µs  | 0.369           | 849.73µs | 96         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| console                                        | 332.59µs  | 0.362           | 334.02µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Identifier                                     | 318.53µs  | 0.347           | 337.39µs | 30         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - DefInitArg                              | 305.43µs  | 0.333           | 305.43µs | 54         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Reflect                                        | 265.70µs  | 0.289           | 267.45µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Dup                                     | 260.49µs  | 0.284           | 260.49µs | 555        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Number                                         | 225.72µs  | 0.246           | 305.09µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BigInt64Array                                  | 220.31µs  | 0.240           | 220.54µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Map                                            | 208.40µs  | 0.227           | 209.97µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushInt8                                | 201.64µs  | 0.220           | 201.64µs | 402        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Set                                            | 196.16µs  | 0.214           | 197.64µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Pop                                     | 191.73µs  | 0.209           | 191.73µs | 455        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Symbol                                         | 186.95µs  | 0.204           | 188.13µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__is_extensible__                      | 159.01µs  | 0.173           | 159.01µs | 677        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - LessThan                                | 152.95µs  | 0.167           | 152.95µs | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::ordinary_get_prototype_of              | 152.01µs  | 0.166           | 152.01µs | 621        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Main                                           | 150.58µs  | 0.164           | 82.11ms  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Inc                                     | 134.81µs  | 0.147           | 134.81µs | 200        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| AssignmentExpression                           | 113.77µs  | 0.124           | 4.08ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - JumpIfFalse                             | 103.93µs  | 0.113           | 103.93µs | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| function                                       | 103.75µs  | 0.113           | 104.33µs | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| MemberExpression                               | 97.28µs   | 0.106           | 2.30ms   | 26         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: next                          | 94.48µs   | 0.103           | 100.99µs | 6          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| From<JsObject>                                 | 83.55µs   | 0.091           | 83.55µs  | 2582       |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Jump                                    | 83.45µs   | 0.091           | 83.45µs  | 202        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrayBuffer                                    | 82.91µs   | 0.090           | 84.38µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Realm::create                                  | 82.24µs   | 0.090           | 93.74µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BigInt                                         | 79.60µs   | 0.087           | 81.04µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LeftHandSIdeExpression                         | 76.08µs   | 0.083           | 3.04ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| NumberLiteral                                  | 70.64µs   | 0.077           | 99.63µs  | 7          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| MultiplicativeExpression                       | 68.45µs   | 0.075           | 3.38ms   | 24         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Mul                                     | 66.50µs   | 0.072           | 66.50µs  | 100        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| StatementList                                  | 66.01µs   | 0.072           | 3.70ms   | 3          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GreaterThan                             | 61.54µs   | 0.067           | 61.54µs  | 100        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - GetFunction                             | 52.91µs   | 0.058           | 175.00µs | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Float32Array                                   | 52.62µs   | 0.057           | 52.82µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| From<String>                                   | 50.52µs   | 0.055           | 50.52µs  | 431        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ExponentiationExpression                       | 48.15µs   | 0.052           | 3.31ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| PrimaryExpression                              | 47.01µs   | 0.051           | 1.82ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - LogicalAnd                              | 46.79µs   | 0.051           | 46.79µs  | 100        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Boolean                                        | 42.78µs   | 0.047           | 43.08µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Int8Array                                      | 41.96µs   | 0.046           | 42.18µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Float64Array                                   | 41.36µs   | 0.045           | 41.57µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BigUint64Array                                 | 41.12µs   | 0.045           | 41.34µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint16Array                                    | 40.82µs   | 0.044           | 41.03µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint8Array                                     | 40.68µs   | 0.044           | 40.89µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint32Array                                    | 40.61µs   | 0.044           | 40.81µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| JSON                                           | 40.59µs   | 0.044           | 41.73µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Int32Array                                     | 40.57µs   | 0.044           | 40.79µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Uint8ClampedArray                              | 40.47µs   | 0.044           | 40.69µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Int16Array                                     | 40.37µs   | 0.044           | 40.57µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BitwiseANDExpression                           | 39.90µs   | 0.043           | 3.56ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Error                                          | 39.58µs   | 0.043           | 40.62µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| UpdateExpression                               | 39.50µs   | 0.043           | 3.08ms   | 25         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - RestParameterPop                        | 39.29µs   | 0.043           | 39.29µs  | 55         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Arguments                                      | 37.25µs   | 0.041           | 689.94µs | 7          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Relation Expression                            | 36.74µs   | 0.040           | 3.49ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| AdditiveExpression                             | 36.23µs   | 0.039           | 3.42ms   | 24         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| SyntaxError                                    | 34.38µs   | 0.037           | 35.85µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ShiftExpression                                | 34.17µs   | 0.037           | 3.45ms   | 24         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ReferenceError                                 | 33.10µs   | 0.036           | 34.17µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| TypeError                                      | 32.79µs   | 0.036           | 33.79µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| EvalError                                      | 32.17µs   | 0.035           | 33.43µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| URIError                                       | 32.05µs   | 0.035           | 33.35µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ShortCircuitExpression                         | 32.02µs   | 0.035           | 3.65ms   | 20         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BitwiseORExpression                            | 30.85µs   | 0.034           | 3.62ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| EqualityExpression                             | 30.82µs   | 0.034           | 3.52ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BitwiseXORExpression                           | 30.80µs   | 0.034           | 3.59ms   | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ConditionalExpression                          | 29.84µs   | 0.033           | 3.68ms   | 20         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Operator                                       | 28.55µs   | 0.031           | 30.56µs  | 13         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ForStatement                                   | 28.09µs   | 0.031           | 1.18ms   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Proxy                                          | 28.02µs   | 0.031           | 28.19µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_char()                            | 27.88µs   | 0.030           | 27.88µs  | 147        |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_is_ascii_pred()                   | 26.11µs   | 0.028           | 27.33µs  | 21         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| VariableStatement                              | 25.01µs   | 0.027           | 224.24µs | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Intl                                           | 23.92µs   | 0.026           | 24.90µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Statement                                      | 23.60µs   | 0.026           | 4.26ms   | 9          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| RangeError                                     | 23.47µs   | 0.026           | 24.56µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - DefInitVar                              | 20.60µs   | 0.022           | 49.41µs  | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Return                                  | 20.47µs   | 0.022           | 20.47µs  | 55         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Expression                                     | 20.13µs   | 0.022           | 3.27ms   | 13         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| CallExpression                                 | 19.32µs   | 0.021           | 714.52µs | 6          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: parseInt                      | 19.31µs   | 0.021           | 20.46µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Iterator Prototype                             | 18.91µs   | 0.021           | 18.99µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| String Iterator                                | 18.66µs   | 0.020           | 37.92µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: isNaN                         | 18.43µs   | 0.020           | 19.50µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: parseFloat                    | 18.37µs   | 0.020           | 19.41µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| make_builtin_fn: isFinite                      | 18.11µs   | 0.020           | 19.13µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrowFunction                                  | 16.54µs   | 0.018           | 80.56µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_is()                              | 16.24µs   | 0.018           | 16.40µs  | 5          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushZero                                | 15.39µs   | 0.017           | 15.39µs  | 56         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushUndefined                           | 13.76µs   | 0.015           | 13.76µs  | 55         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| UnaryExpression                                | 11.52µs   | 0.013           | 3.75ms   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LexicalEnvironment::new                        | 11.15µs   | 0.012           | 11.20µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::peek_char()                            | 10.27µs   | 0.011           | 10.27µs  | 78         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| LexicalEnvironment::has_binding                | 10.22µs   | 0.011           | 28.81µs  | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrayIterator                                  | 10.09µs   | 0.011           | 28.84µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| StatementListItem                              | 9.83µs    | 0.011           | 3.57ms   | 7          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::__construct__                          | 9.80µs    | 0.011           | 31.22µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushDeclarativeEnvironment              | 9.31µs    | 0.010           | 9.71µs   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PushNewArray                            | 9.19µs    | 0.010           | 24.97µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ExpressionStatement                            | 9.06µs    | 0.010           | 2.80ms   | 5          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ForInIterator                                  | 8.71µs    | 0.009           | 26.32µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| SetIterator                                    | 8.67µs    | 0.009           | 26.13µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| RegExp String Iterator                         | 8.47µs    | 0.009           | 25.15µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| MapIterator                                    | 8.47µs    | 0.009           | 25.54µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| FunctionExpression                             | 7.08µs    | 0.008           | 1.77ms   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| SpreadLiteral                                  | 6.89µs    | 0.008           | 23.29µs  | 5          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| new_declarative_environment                    | 6.76µs    | 0.007           | 6.76µs   | 59         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| FunctionStatementList                          | 5.80µs    | 0.006           | 1.82ms   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - New                                     | 5.65µs    | 0.006           | 36.90µs  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::peek()                                 | 4.65µs    | 0.005           | 4.65µs   | 59         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| FormalParameters                               | 4.54µs    | 0.005           | 6.33µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - This                                    | 3.50µs    | 0.004           | 3.53µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Object::get_prototype_from_constructor         | 3.42µs    | 0.004           | 9.07µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::set_goal()                             | 3.33µs    | 0.004           | 3.33µs   | 99         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Initializer                                    | 3.29µs    | 0.004           | 161.59µs | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| BindingIdentifier                              | 3.27µs    | 0.004           | 3.27µs   | 3          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| ArrayLiteral                                   | 2.42µs    | 0.003           | 3.98µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| globalThis                                     | 1.35µs    | 0.001           | 1.38µs   | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PopEnvironment                          | 1.23µs    | 0.001           | 1.23µs   | 2          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| cursor::next_byte()                            | 943.00ns  | 0.001           | 943.00ns | 11         |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - Swap                                    | 841.00ns  | 0.001           | 841.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - LogicalNot                              | 661.00ns  | 0.001           | 661.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PopOnReturnAdd                          | 351.00ns  | 0.000           | 351.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| INST - PopOnReturnSub                          | 211.00ns  | 0.000           | 211.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Infinity                                       | 160.00ns  | 0.000           | 160.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| undefined                                      | 140.00ns  | 0.000           | 140.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| NaN                                            | 130.00ns  | 0.000           | 130.00ns | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Execute                                        | 70.00ns   | 0.000           | 70.00ns  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\n| Compilation                                    | 40.00ns   | 0.000           | 40.00ns  | 1          |\r\n+------------------------------------------------+-----------+-----------------+----------+------------+\r\nTotal cpu time: 91.797457ms\r\n+------+---------------+\r\n| Item | Artifact Size |\r\n+------+---------------+\r\n```",
          "timestamp": "2022-01-11T21:43:47Z",
          "tree_id": "fd056e45d3fd22bfe6f0d7a60ac8ae083cc64090",
          "url": "https://github.com/boa-dev/boa/commit/2300d87e227242ce12c4880ae14ce50e6b698386"
        },
        "date": 1641939228850,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4077,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13234,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15496,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8982,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9664,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10359,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6145,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9234,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8861,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11067,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11456,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14518,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 132492,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8180,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11932,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6065,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12111,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15435,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15169,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6142,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31695,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27783,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 783,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2369,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2796,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1471,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1568,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1922,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1494,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1494,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1800,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1795,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1443,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6920,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1762,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2503,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1242,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1651,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1985,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2427,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1012,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5553,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5382,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5187,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46425,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2849904,
            "range": "± 3756",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6381,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6621,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7087,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10090,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10073,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13310,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13164,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10696,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3409933,
            "range": "± 8969",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1388080,
            "range": "± 4373",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6429,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7746,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5480,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5387,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6735,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8728,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2185,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1454784,
            "range": "± 11334",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1344273,
            "range": "± 8873",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "RageKnify@gmail.com",
            "name": "RageKnify",
            "username": "RageKnify"
          },
          "committer": {
            "email": "RageKnify@gmail.com",
            "name": "RageKnify",
            "username": "RageKnify"
          },
          "distinct": true,
          "id": "7f18d7a85168e02b0da51abfdeedcd1c5e96db0c",
          "message": "Refactor: optimize println!()\n\nClippy 1.58.0 complains about `format!()` inside `println!()` being\ninefficient",
          "timestamp": "2022-01-13T21:28:17+01:00",
          "tree_id": "f23b325ac2d437d413847e03103203ccf1c8230e",
          "url": "https://github.com/boa-dev/boa/commit/7f18d7a85168e02b0da51abfdeedcd1c5e96db0c"
        },
        "date": 1642107292450,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 396,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5016,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16910,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19426,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11346,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12109,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12917,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7681,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10220,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9767,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12260,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14588,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16518,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 178177,
            "range": "± 3783",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9175,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13514,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6725,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13431,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17054,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16955,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6898,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34881,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30422,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 924,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2852,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3339,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1793,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1889,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2269,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1743,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1755,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2133,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2128,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1705,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2601,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8532,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2109,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2968,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1479,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1943,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2323,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2919,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1189,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6406,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6296,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6155,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54980,
            "range": "± 434",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3357371,
            "range": "± 31645",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7644,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7954,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8364,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11962,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12044,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15514,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15448,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12927,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3890966,
            "range": "± 55340",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1590140,
            "range": "± 18843",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7731,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9319,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6711,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6343,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7968,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10301,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2591,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1712461,
            "range": "± 23130",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1577098,
            "range": "± 24907",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "4365c7d3885506813187cf2699f662c255a29e1a",
          "message": "Add proxy handling in `isArray` method (#1777)\n\nIt changes the following:\r\n\r\n- Add handling for proxy objects to the abstract `is_array` operation.\r\n- Implement the abstract `is_array` operation for `JsValue` and `JsObject` to avoid clones.\r\n- Fix some builtin function lengths.",
          "timestamp": "2022-01-13T20:43:14Z",
          "tree_id": "99e448cde121ee14173a7e9662938da9c8a62279",
          "url": "https://github.com/boa-dev/boa/commit/4365c7d3885506813187cf2699f662c255a29e1a"
        },
        "date": 1642108668590,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 296,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4130,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13265,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15553,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9025,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9642,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10378,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6129,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8169,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7798,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9733,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11660,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12955,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137105,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7331,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12058,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6177,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10556,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13495,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13282,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5366,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28008,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24520,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 684,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2131,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2518,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1312,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1411,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1662,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1304,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1304,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1595,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1593,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1268,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1963,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6098,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1569,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2248,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1101,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1474,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1771,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2166,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 876,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4909,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5367,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5233,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41274,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2556266,
            "range": "± 2954",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5606,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6607,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7081,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10136,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8898,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11633,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11542,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9470,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2886675,
            "range": "± 7946",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1351739,
            "range": "± 4438",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6430,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7736,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4952,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5334,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6859,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8592,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1957,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1281208,
            "range": "± 9885",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1180039,
            "range": "± 13898",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4bae3bbe99a026c8aca7e685763fd27625dbc8e3",
          "message": "Bump getrandom from 0.2.3 to 0.2.4 (#1783)\n\nBumps [getrandom](https://github.com/rust-random/getrandom) from 0.2.3 to 0.2.4.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/getrandom/blob/master/CHANGELOG.md\">getrandom's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.2.4] - 2021-12-13</h2>\n<h3>Changed</h3>\n<ul>\n<li>Use explicit imports in the <code>js</code> backend <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/220\">#220</a></li>\n<li>Use <code>/dev/urandom</code> on Redox instead of <code>rand:</code> <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/222\">#222</a></li>\n<li>Use <code>NonZeroU32::new_unchecked</code> to convert wasi error <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/233\">#233</a></li>\n</ul>\n<h3>Added</h3>\n<ul>\n<li>SOLID targets (<code>*-kmc-solid_*</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/235\">#235</a></li>\n<li>Limited Hermit (<code>x86_64-unknown-hermit</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/236\">#236</a></li>\n</ul>\n<p><a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/220\">#220</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/220\">rust-random/getrandom#220</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/222\">#222</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/222\">rust-random/getrandom#222</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/233\">#233</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/233\">rust-random/getrandom#233</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/235\">#235</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/235\">rust-random/getrandom#235</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/236\">#236</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/236\">rust-random/getrandom#236</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/b9c7c0c13d76eead06c4433368fd5c45bdbe7651\"><code>b9c7c0c</code></a> Release v0.2.4 (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/238\">#238</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/9110af54d199cbdba541039012e218a2223b744f\"><code>9110af5</code></a> Fix get_rng_fd comment typo (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/240\">#240</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/ec445bb0acb738a7cc97102084292fe6f18d2afc\"><code>ec445bb</code></a> Added x86_64-unknown-hermit support (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/236\">#236</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/f5e33009edc2ac5ea59f7dde68709e9572b94458\"><code>f5e3300</code></a> Add SOLID target support (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/235\">#235</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/0d0404be5a7f5024301b433b0941920318309ff8\"><code>0d0404b</code></a> Use <code>NonZeroU32::new_unchecked</code> to convert wasi error (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/233\">#233</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/e4004f41faed8ec4f6336cfab8ea11e18102392d\"><code>e4004f4</code></a> redox: Switch to /dev/urandom (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/222\">#222</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/30308ae845b0bf3839e5a92120559eaf56048c28\"><code>30308ae</code></a> js: Explictly list all dependancies used with the &quot;js&quot; feature (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/220\">#220</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/dcf452bb14f55abdc7dde94c8bb4880dbec581f9\"><code>dcf452b</code></a> fix some typos (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/218\">#218</a>)</li>\n<li>See full diff in <a href=\"https://github.com/rust-random/getrandom/compare/v0.2.3...v0.2.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=getrandom&package-manager=cargo&previous-version=0.2.3&new-version=0.2.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-14T13:55:38Z",
          "tree_id": "10581705dd0f7773cc50ca5d64098fa0ed1b20fc",
          "url": "https://github.com/boa-dev/boa/commit/4bae3bbe99a026c8aca7e685763fd27625dbc8e3"
        },
        "date": 1642170555383,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 343,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4637,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15061,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17374,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10168,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10876,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11853,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6927,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9295,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8963,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11211,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12938,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14476,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151204,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8285,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11997,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6087,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11979,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15247,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15277,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5996,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31608,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27544,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 791,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2432,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2864,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1499,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1587,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1889,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1504,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1499,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1831,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1846,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1444,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2212,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7026,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1789,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2540,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1251,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1699,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2062,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2530,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 988,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5552,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5344,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5237,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46551,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2863157,
            "range": "± 4169",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6478,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6592,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7076,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10174,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10209,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13132,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13131,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10901,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3220496,
            "range": "± 3796",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339330,
            "range": "± 4710",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6468,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7824,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5646,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5430,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6830,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8624,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2238,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1458271,
            "range": "± 9496",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1340307,
            "range": "± 10807",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "2fda7b3e3f21eb8285843df26df556e32a513868",
          "message": "Bump crazy-max/ghaction-github-pages from 2.5.0 to 2.6.0 (#1782)\n\nBumps [crazy-max/ghaction-github-pages](https://github.com/crazy-max/ghaction-github-pages) from 2.5.0 to 2.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/crazy-max/ghaction-github-pages/releases\">crazy-max/ghaction-github-pages's releases</a>.</em></p>\n<blockquote>\n<h2>v2.6.0</h2>\n<ul>\n<li>Add <code>absolute_build_dir</code> and <code>follow_symlinks</code> inputs (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/161\">#161</a>)</li>\n<li>Bump <code>@​actions/exec</code> from 1.0.4 to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/152\">#152</a>)</li>\n<li>Bump <code>@​actions/core</code> from 1.3.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/154\">#154</a> <a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/156\">#156</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/crazy-max/ghaction-github-pages/blob/dev/CHANGELOG.md\">crazy-max/ghaction-github-pages's changelog</a>.</em></p>\n<blockquote>\n<h2>2.6.0 (2022/01/13)</h2>\n<ul>\n<li>Add <code>absolute_build_dir</code> and <code>follow_symlinks</code> inputs (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/161\">#161</a>)</li>\n<li>Bump <code>@​actions/exec</code> from 1.0.4 to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/152\">#152</a>)</li>\n<li>Bump <code>@​actions/core</code> from 1.3.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/154\">#154</a> <a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/156\">#156</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/a117e4aa1fb4854d021546d2abdfac95be568a3a\"><code>a117e4a</code></a> Update CHANGELOG</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/b26115d93559ced239640d12e613ef00b9b6d4cb\"><code>b26115d</code></a> Update LICENSE</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/0c20c87f978dc85e4b78d5bf7c156de15b2f169e\"><code>0c20c87</code></a> Add input options related to <code>copy()</code> (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/161\">#161</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/cde164fd08931bfb465c1102a277a4173e956b03\"><code>cde164f</code></a> Bump <code>@​actions/core</code> from 1.5.0 to 1.6.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/156\">#156</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/a28ceb62e63d540a0182126a3315defa095eff76\"><code>a28ceb6</code></a> Update ci workflow</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/1ae239f7b822f4ef2d57ca2c7792713696508b10\"><code>1ae239f</code></a> Fix build.Dockerfile</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/8e7a38741f9cdbd9b6c87b43cdc405706dbed1ed\"><code>8e7a387</code></a> Bump <code>@​actions/exec</code> from 1.0.4 to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/152\">#152</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/80513f63a652257747ffc41bce197f9b7365a2e0\"><code>80513f6</code></a> Bump <code>@​actions/core</code> from 1.3.0 to 1.5.0 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/154\">#154</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/c76c2e60dde5c4fa62585af514323433ccd73353\"><code>c76c2e6</code></a> Update README</li>\n<li>See full diff in <a href=\"https://github.com/crazy-max/ghaction-github-pages/compare/v2.5.0...v2.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=crazy-max/ghaction-github-pages&package-manager=github_actions&previous-version=2.5.0&new-version=2.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-14T14:08:08Z",
          "tree_id": "60c1465cc2c638b905e80772af436982fe45bdfe",
          "url": "https://github.com/boa-dev/boa/commit/2fda7b3e3f21eb8285843df26df556e32a513868"
        },
        "date": 1642171134282,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 347,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4140,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14851,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17394,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10075,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10775,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11545,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6918,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9062,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8861,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9683,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12963,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14421,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154150,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7139,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11868,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6045,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11957,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15243,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15042,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5972,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31267,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27510,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 837,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2215,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2946,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1562,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1649,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1967,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1548,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1549,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1882,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1884,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1510,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2306,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7113,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1859,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2623,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1320,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1690,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2081,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2509,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 993,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5644,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5452,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5183,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46870,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2878695,
            "range": "± 4875",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6441,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6661,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6977,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10276,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10152,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13512,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13413,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10912,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3222043,
            "range": "± 10626",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339205,
            "range": "± 6004",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6516,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7015,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5719,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5529,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6866,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8728,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2249,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1460080,
            "range": "± 8018",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1195727,
            "range": "± 9039",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "5c4d970119df1ef3a951ae2803fab2d15758ac92",
          "message": "Bump serde_json from 1.0.73 to 1.0.75 (#1785)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.73 to 1.0.75.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.74</h2>\n<ul>\n<li>Allow creating RawValues from references to unsized values (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/841\">#841</a>, thanks <a href=\"https://github.com/EFanZh\"><code>@​EFanZh</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/a22b686f499e12146cf9a8932d2aebce7c9f2fc3\"><code>a22b686</code></a> Release 1.0.75</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/36c43bfed5aa695f8d7a8138de585d425b042ed3\"><code>36c43bf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/848\">#848</a> from serde-rs/num</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/d54138145514758ea9475baf77cd5bf4788e9eaf\"><code>d541381</code></a> Deserialize small numbers as integers in arbitrary_precision</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/0ca5a69d734c4f5a0185e93de491b45e25ca39b6\"><code>0ca5a69</code></a> Add regression test for issue 845</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/66919777d0c31addd190c7a48ec78145a270294d\"><code>6691977</code></a> Disable buggy iter_not_returning_iterator lint</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/aebe84cb09663d0c3371273fb20d838c2e752bcd\"><code>aebe84c</code></a> Raise toolchain version for preserve_order to rust 1.46</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/3f459308f5055e9a4b1b611a77dad07132011e8d\"><code>3f45930</code></a> Set miriflags once for whole miri job</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/c79d9ad2e1da0ea3d8e21841404df78ba6f82435\"><code>c79d9ad</code></a> Run miri also with some features enabled</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/58d40de6ed22bf0c80bbe2443dd00f265281aa2d\"><code>58d40de</code></a> Release 1.0.74</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/ef7794f87f43d22fc74d1e38aa2cec1d6bcec12e\"><code>ef7794f</code></a> Detect warnings in CI</li>\n<li>Additional commits viewable in <a href=\"https://github.com/serde-rs/json/compare/v1.0.73...v1.0.75\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.73&new-version=1.0.75)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-17T23:20:06Z",
          "tree_id": "88712b77b2ee9b6c127e1d00caae016f13738b51",
          "url": "https://github.com/boa-dev/boa/commit/5c4d970119df1ef3a951ae2803fab2d15758ac92"
        },
        "date": 1642463818846,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 392,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4674,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14941,
            "range": "± 1625",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16484,
            "range": "± 1038",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10430,
            "range": "± 1715",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10410,
            "range": "± 1221",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11511,
            "range": "± 1123",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6498,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8826,
            "range": "± 624",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8831,
            "range": "± 834",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10491,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12674,
            "range": "± 990",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14131,
            "range": "± 1122",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 155442,
            "range": "± 12818",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8631,
            "range": "± 647",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13166,
            "range": "± 1069",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7028,
            "range": "± 896",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13292,
            "range": "± 720",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14721,
            "range": "± 1227",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15211,
            "range": "± 1346",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6108,
            "range": "± 511",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30553,
            "range": "± 2005",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27604,
            "range": "± 2252",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 853,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2428,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3098,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1604,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1655,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2143,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1739,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1762,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2252,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2199,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1861,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2692,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8120,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2115,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2836,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1357,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1743,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2142,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2697,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1047,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6075,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6451,
            "range": "± 489",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6850,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 56842,
            "range": "± 5941",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3878605,
            "range": "± 263920",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8253,
            "range": "± 576",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7782,
            "range": "± 674",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8773,
            "range": "± 715",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11649,
            "range": "± 906",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11411,
            "range": "± 793",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14827,
            "range": "± 834",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15543,
            "range": "± 1194",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13061,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3562747,
            "range": "± 306661",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1421536,
            "range": "± 85992",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7903,
            "range": "± 581",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9271,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 7352,
            "range": "± 859",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 7568,
            "range": "± 1380",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 9211,
            "range": "± 559",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10991,
            "range": "± 778",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2330,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1487087,
            "range": "± 120274",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1435492,
            "range": "± 104179",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "dc005e17ef91669316d6af3fc367cfb5ae62bda6",
          "message": "Bump structopt from 0.3.25 to 0.3.26 (#1786)\n\nBumps [structopt](https://github.com/TeXitoi/structopt) from 0.3.25 to 0.3.26.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/97e92a3755a65f8ea44c994fd403208e7d97f561\"><code>97e92a3</code></a> v0.3.26</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/2bdd6b49adfa88d0d5a8e39b14a5fb1999a32eaa\"><code>2bdd6b4</code></a> Clarification on maintenance since clap v3 is out</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/2736281a647cecb23ae1c17bbaf625b18ebf4b38\"><code>2736281</code></a> Upgrade heck</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/358cccf9af0dd0a149b66e2a46bfa3f7e3137fa6\"><code>358cccf</code></a> [docs] Add output to all examples</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/4c1a8fcb2f3f9d1359c81f5ccb12657a0f8e7a8f\"><code>4c1a8fc</code></a> Link to the clap API in the documentation that says all clap methods can be used</li>\n<li><a href=\"https://github.com/TeXitoi/structopt/commit/ffd4772156a26ff3845fb36d2f5dbd113fa579e1\"><code>ffd4772</code></a> Typo</li>\n<li>See full diff in <a href=\"https://github.com/TeXitoi/structopt/compare/v0.3.25...v0.3.26\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=structopt&package-manager=cargo&previous-version=0.3.25&new-version=0.3.26)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-19T19:21:54Z",
          "tree_id": "3ae1d750f8d116162bdadbfeaa7dfb9eb709d8e1",
          "url": "https://github.com/boa-dev/boa/commit/dc005e17ef91669316d6af3fc367cfb5ae62bda6"
        },
        "date": 1642622273525,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 394,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5120,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16606,
            "range": "± 526",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19168,
            "range": "± 1055",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11298,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11937,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13077,
            "range": "± 1043",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7482,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10012,
            "range": "± 707",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9788,
            "range": "± 513",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12234,
            "range": "± 502",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14424,
            "range": "± 556",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15949,
            "range": "± 755",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 172462,
            "range": "± 11554",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9179,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13136,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6772,
            "range": "± 335",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13045,
            "range": "± 458",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16666,
            "range": "± 562",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16683,
            "range": "± 537",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6709,
            "range": "± 1026",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34465,
            "range": "± 1371",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31289,
            "range": "± 2880",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 968,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2890,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3339,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1854,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1940,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2270,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1813,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1792,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2246,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2237,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1796,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2667,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 7934,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2076,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3008,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1559,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1959,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2364,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2813,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1084,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6350,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6237,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6383,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54197,
            "range": "± 1710",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3543107,
            "range": "± 140922",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7825,
            "range": "± 225",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8078,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8705,
            "range": "± 743",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11541,
            "range": "± 409",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11606,
            "range": "± 451",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15013,
            "range": "± 876",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15083,
            "range": "± 550",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12700,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3520821,
            "range": "± 172668",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1455619,
            "range": "± 44950",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7632,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8986,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6816,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6457,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8015,
            "range": "± 453",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10124,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2523,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1647124,
            "range": "± 73793",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1529273,
            "range": "± 87772",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "nguyeste008@students.garlandisd.net",
            "name": "Steven nguyen",
            "username": "icecream17"
          },
          "committer": {
            "email": "nguyeste008@students.garlandisd.net",
            "name": "Steven nguyen",
            "username": "icecream17"
          },
          "distinct": false,
          "id": "01e0480cd8d6eaca46f738e84e876a217fed525f",
          "message": "Copy/paste fix in Proxy error message (#1787)\n\n(Really small self-explanatory change - maybe the commit message could be better)\r\n\r\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nIt changes the following:\r\n\r\nWhen calling `new Proxy(undefined, {})` the error message now refers to the target `undefined` instead of the handler `{}`",
          "timestamp": "2022-01-19T19:34:27Z",
          "tree_id": "4836275ae1820514a1e7e4b38647dd06e0f57afb",
          "url": "https://github.com/boa-dev/boa/commit/01e0480cd8d6eaca46f738e84e876a217fed525f"
        },
        "date": 1642622937610,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 411,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5315,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17655,
            "range": "± 926",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20062,
            "range": "± 831",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11990,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12445,
            "range": "± 751",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13539,
            "range": "± 622",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7880,
            "range": "± 402",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10619,
            "range": "± 458",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10383,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12859,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15066,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16627,
            "range": "± 585",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 185428,
            "range": "± 6672",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9499,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13593,
            "range": "± 586",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7074,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13916,
            "range": "± 495",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17519,
            "range": "± 632",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17507,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7126,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36406,
            "range": "± 1190",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31850,
            "range": "± 1360",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1035,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3108,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3551,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1963,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2089,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2426,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1949,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1927,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2366,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2383,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1913,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2833,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 8649,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2213,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3125,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1652,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 2054,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2435,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2995,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 1141,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6751,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 6461,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6777,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 58235,
            "range": "± 2694",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3753093,
            "range": "± 156749",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8288,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8542,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 9087,
            "range": "± 351",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12205,
            "range": "± 575",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12069,
            "range": "± 651",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15986,
            "range": "± 1303",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15583,
            "range": "± 786",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13327,
            "range": "± 631",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3697567,
            "range": "± 126517",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1569706,
            "range": "± 62201",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 8195,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9597,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 7001,
            "range": "± 326",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6748,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8649,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10820,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2667,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1724157,
            "range": "± 63016",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1578252,
            "range": "± 74110",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "48185f393dbac48c4199ee5bda596240961c9f04",
          "message": "Lexer string interning (#1758)\n\nThis Pull Request is part of #279.\r\n\r\n It adds a string interner to Boa, which allows many types to not contain heap-allocated strings, and just contain a `NonZeroUsize` instead. This can move types to the stack (hopefully I'll be able to move `Token`, for example, maybe some `Node` types too.\r\n\r\nNote that the internet is for now only available in the lexer. Next steps (in this PR or future ones) would include also using interning in the parser, and finally in execution. The idea is that strings should be represented with a `Sym` until they are displayed.\r\n\r\nTalking about display. I have changed the `ParseError` type in order to not contain anything that could contain a `Sym` (basically tokens), which might be a bit faster, but what is important is that we don't depend on the interner when displaying errors.\r\n\r\nThe issue I have now is in order to display tokens. This requires the interner if we want to know identifiers, for example. The issue here is that Rust doesn't allow using a `fmt::Formatter` (only in nightly), which is making my head hurt. Maybe someone of you can find a better way of doing this.\r\n\r\nThen, about `cursor.expect()`, this is the only place where we don't have the expected token type as a static string, so it's failing to compile. We have the option of changing the type definition of `ParseError` to contain an owned string, but maybe we can avoid this by having a `&'static str` come from a `TokenKind` with the default values, such as \"identifier\" for an identifier. I wanted for you to think about it and maybe we can just add that and avoid allocations there.\r\n\r\nOh, and this depends on the VM-only branch, so that has to be merged before :)\r\n\r\nAnother thing to check: should the interner be in its own module?",
          "timestamp": "2022-01-22T18:03:31Z",
          "tree_id": "c4f7e377c97d74570d718aa5ebaae3244c7517a3",
          "url": "https://github.com/boa-dev/boa/commit/48185f393dbac48c4199ee5bda596240961c9f04"
        },
        "date": 1642876868145,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 350,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4374,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14408,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16717,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9524,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10211,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10968,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6577,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8700,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8445,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10488,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12349,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13939,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144548,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7892,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11556,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5854,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11554,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14787,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14527,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5784,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30232,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26515,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 795,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2432,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2853,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1502,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1607,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1907,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1513,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1846,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1849,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1438,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2240,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 6865,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1797,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2550,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1264,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1678,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 2019,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2486,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 987,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5526,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5375,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5352,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46290,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2885870,
            "range": "± 4810",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6453,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6811,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7127,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10269,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10332,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13452,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13412,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11010,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3324860,
            "range": "± 8520",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1365574,
            "range": "± 8156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6473,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7775,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5591,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5367,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6836,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8699,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2192,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1482210,
            "range": "± 11301",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1369734,
            "range": "± 7619",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "raskad",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "raskad",
            "username": "Razican"
          },
          "distinct": false,
          "id": "80794e5ba59cc98b00808e9cd877674fc951669c",
          "message": "Adjust `compile` and `execute` to avoid clones (#1778)\n\nIt changes the following:\r\n\r\n- Adjust the `context` methods `compile` and `execute` to avoid clones on `StatementList` and `CodeBlock`\r\n\r\n\n\nCo-authored-by: raskad <32105367+raskad@users.noreply.github.com>",
          "timestamp": "2022-01-23T18:37:54Z",
          "tree_id": "9eab2f418659e940d3e33a7b11eabefa44f2ca35",
          "url": "https://github.com/boa-dev/boa/commit/80794e5ba59cc98b00808e9cd877674fc951669c"
        },
        "date": 1642964877273,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 340,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4375,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14185,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16543,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9439,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10154,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10951,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6609,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8750,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8454,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10387,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12162,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13749,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138719,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7911,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11334,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5918,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11397,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14645,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14372,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5688,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29299,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25743,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 663,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1582,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1883,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1171,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1210,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1419,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1200,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1200,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1373,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1370,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1002,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1460,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2985,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1327,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1824,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1022,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 879,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1010,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1376,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 369,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3242,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3250,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4447,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 40664,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2509815,
            "range": "± 4758",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5585,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5739,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6124,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8898,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8965,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11584,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11587,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9337,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2867846,
            "range": "± 7816",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1187717,
            "range": "± 6257",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6142,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7483,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4679,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4523,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5797,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7664,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1766,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1296466,
            "range": "± 12728",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1198124,
            "range": "± 6884",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "e92cff592078106d6ada1387d0bf8b779de2596a",
          "message": "Interner support in the parser (#1765)\n\nThis builds on top of #1758 to try to bring #1763 to life.\r\n\r\nSomething that should probably be done here would be to convert `JsString` to a `Sym` internally. Then, further optimizations could be done adding common strings to a custom interner type (those that we know statically).\r\n\r\nThis is definitely work in progress, but I would like to have feedback on the API, and feel free to contribute.\n\nCo-authored-by: raskad <32105367+raskad@users.noreply.github.com>",
          "timestamp": "2022-01-23T22:45:14Z",
          "tree_id": "192cac2a97f3d8212227e1e5c52cee20390bd8dc",
          "url": "https://github.com/boa-dev/boa/commit/e92cff592078106d6ada1387d0bf8b779de2596a"
        },
        "date": 1642980033340,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 339,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4326,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14016,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16251,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9464,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10099,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10842,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6479,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8580,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8209,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10288,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12255,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13593,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143047,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7628,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11042,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5707,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11274,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14447,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12446,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5091,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29388,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25776,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 699,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1477,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1792,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1011,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1046,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1190,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1006,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1015,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1145,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1141,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 865,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1194,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2960,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1290,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1680,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1039,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 757,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 878,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1183,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 411,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2905,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2521,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4316,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46056,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2821148,
            "range": "± 4746",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6217,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6464,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6936,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8700,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9913,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13003,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11515,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9423,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2928339,
            "range": "± 7724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1198671,
            "range": "± 3709",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5496,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7423,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5252,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4815,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6059,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7594,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1974,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1515756,
            "range": "± 11581",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1235428,
            "range": "± 7719",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4eb29c966ae0f50015ee56152b233e8d2e04308c",
          "message": "Bump serde_json from 1.0.76 to 1.0.78 (#1796)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.76 to 1.0.78.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.78</h2>\n<ul>\n<li>Support deserializing as <code>&amp;RawValue</code> in map key position, which would previously fail with <em>&quot;invalid type: newtype struct&quot;</em> (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/851\">#851</a>)</li>\n</ul>\n<h2>v1.0.77</h2>\n<ul>\n<li>Include discord invite links in the published readme</li>\n<li>Improve compile error on compiling with neither <code>std</code> nor <code>alloc</code> feature enabled</li>\n<li>Include integration tests in published package (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/578\">#578</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/98cafacefe69f0c1095eccda1795b699ac711787\"><code>98cafac</code></a> Release 1.0.78</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/2d81cbd11302bd246db248dfb335110d1827e893\"><code>2d81cbd</code></a> Move raw_value test imports to block of imports</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/cbb0342ba0100fe2164f5afcd00e9deb501093fc\"><code>cbb0342</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/851\">#851</a> from serde-rs/rawkey</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/e5cdfcc7ee482238a654afbf3c0116a9f852ce79\"><code>e5cdfcc</code></a> Support deserializing map key as &amp;RawValue</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/6a3fb68979b7e9da0f690f6f07e907045c1b30d9\"><code>6a3fb68</code></a> Add test of deserializing a &amp;RawValue in map key position</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/d8512af496a65906a93ff9191cd963e0dbc64de5\"><code>d8512af</code></a> Release 1.0.77</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/5fe9bdd3562bf29d02d1ab798bbcff069173306b\"><code>5fe9bdd</code></a> Improve error on compiling with neither std nor alloc</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/4c1564931859d1ba51dccdebe0e16959697297d7\"><code>4c15649</code></a> Include integration tests in published package</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/71257c5667f3005694652477c0d47c81db57edea\"><code>71257c5</code></a> Add discord invite links</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/json/compare/v1.0.76...v1.0.78\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.76&new-version=1.0.78)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-24T20:04:47Z",
          "tree_id": "d997a69d2547b7b5a28326f3d478f2d659177583",
          "url": "https://github.com/boa-dev/boa/commit/4eb29c966ae0f50015ee56152b233e8d2e04308c"
        },
        "date": 1643056836719,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 402,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4785,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15234,
            "range": "± 1211",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18518,
            "range": "± 1376",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10671,
            "range": "± 787",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11000,
            "range": "± 549",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12289,
            "range": "± 805",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6983,
            "range": "± 567",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9594,
            "range": "± 526",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9447,
            "range": "± 509",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11698,
            "range": "± 1182",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13587,
            "range": "± 1046",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14845,
            "range": "± 1013",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 163621,
            "range": "± 9010",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8681,
            "range": "± 686",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12128,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6257,
            "range": "± 434",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12443,
            "range": "± 792",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15892,
            "range": "± 1990",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15373,
            "range": "± 1008",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6459,
            "range": "± 398",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32164,
            "range": "± 1953",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29032,
            "range": "± 1652",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 905,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1831,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2252,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1494,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1541,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1697,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1425,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1447,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1571,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1690,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1261,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1683,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3917,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1575,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2050,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1309,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 995,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1563,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 540,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3777,
            "range": "± 244",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3669,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6600,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54482,
            "range": "± 3378",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3830919,
            "range": "± 155820",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7614,
            "range": "± 916",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7858,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8212,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11396,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11150,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14911,
            "range": "± 833",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14654,
            "range": "± 1075",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12258,
            "range": "± 760",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3472325,
            "range": "± 163093",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1438717,
            "range": "± 82429",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7848,
            "range": "± 468",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8431,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6674,
            "range": "± 363",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6664,
            "range": "± 392",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8230,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10215,
            "range": "± 700",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2188,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1632343,
            "range": "± 79471",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1517855,
            "range": "± 85325",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "090d7ace806becb0b63a9562221d0fe5e0cede31",
          "message": "Bump serde from 1.0.134 to 1.0.135 (#1797)\n\nBumps [serde](https://github.com/serde-rs/serde) from 1.0.134 to 1.0.135.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/serde/commit/8932c852a50d1e1644e4d2b52d816cbce3e95567\"><code>8932c85</code></a> Release 1.0.135</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/9f3dd3c7c4bd4305f0f5790811461c94e9f96078\"><code>9f3dd3c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2163\">#2163</a> from serde-rs/discord</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/dd9b415ff90f1f7b61ddde34abde93c1aab2cef2\"><code>dd9b415</code></a> Add discord invite links</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/serde/compare/v1.0.134...v1.0.135\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde&package-manager=cargo&previous-version=1.0.134&new-version=1.0.135)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-24T21:21:42Z",
          "tree_id": "5ae7b1c702fc87300b2d5527240aa00dbee8468f",
          "url": "https://github.com/boa-dev/boa/commit/090d7ace806becb0b63a9562221d0fe5e0cede31"
        },
        "date": 1643061371543,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4377,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14098,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16341,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9229,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9888,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10701,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6452,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8540,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8174,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10145,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12129,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13468,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 140416,
            "range": "± 224",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7758,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11264,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5779,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11351,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14342,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14049,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5799,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29094,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25555,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 701,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1464,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1801,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1165,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1168,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1343,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1175,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1148,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1298,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1301,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 998,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1377,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3264,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1303,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1667,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1026,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 782,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 862,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1185,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 397,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2830,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2841,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4956,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45246,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2857437,
            "range": "± 5178",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6299,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6555,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7004,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9596,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9752,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12907,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12909,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10617,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3200470,
            "range": "± 5520",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1325810,
            "range": "± 4140",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6292,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7505,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5370,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5407,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6837,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8808,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1980,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1490355,
            "range": "± 15113",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1386411,
            "range": "± 7960",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "672eede30d7bcc46a58ae08acdb864678a54d46b",
          "message": "Convert `Codeblock` variables to `Sym` (#1798)\n\nIt changes the following:\r\n\r\n- Convert `Codeblock` variables to `Sym`",
          "timestamp": "2022-01-29T10:10:09Z",
          "tree_id": "b2623f43059fea04195c48c44dee19568ad5f8da",
          "url": "https://github.com/boa-dev/boa/commit/672eede30d7bcc46a58ae08acdb864678a54d46b"
        },
        "date": 1643453167079,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 403,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4632,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15575,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18143,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10183,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10929,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11697,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6987,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9233,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8827,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11044,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13346,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14905,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 167647,
            "range": "± 832",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8265,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12230,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6105,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12282,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15756,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15535,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6393,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32013,
            "range": "± 375",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28340,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 765,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1546,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1758,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1149,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1172,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1382,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1217,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1226,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1347,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1337,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 991,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1367,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3451,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1243,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1509,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1039,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 746,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 797,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1208,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 463,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2595,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2595,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5793,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51309,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3277902,
            "range": "± 30800",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7336,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7681,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8077,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11196,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11227,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14719,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14698,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12388,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3815885,
            "range": "± 31065",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1624654,
            "range": "± 14599",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7258,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8546,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6179,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6340,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8039,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10426,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2341,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1760022,
            "range": "± 18751",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1628289,
            "range": "± 27698",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "e37cb6c9f6d9fd61f3b58155727c9e3dbce46ea4",
          "message": "Updated dependencies (#1803)\n\nThe main idea behind this is to upgrade the Unicode version from 13 to 14. I also upgraded the rest of the dependencies, so this closes #1802, #1800 and #1799.",
          "timestamp": "2022-01-29T16:24:12Z",
          "tree_id": "1137a3ee5057fd6a4457b1fb4ee1d54626364f39",
          "url": "https://github.com/boa-dev/boa/commit/e37cb6c9f6d9fd61f3b58155727c9e3dbce46ea4"
        },
        "date": 1643475546174,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 297,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3840,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12257,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14253,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8141,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8722,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9428,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6405,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7469,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7183,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8928,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10726,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12062,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 128030,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6712,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9686,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4939,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9925,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12555,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12344,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5080,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25637,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22612,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 584,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1135,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1324,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 847,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 858,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1025,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 928,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 927,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1020,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1036,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 728,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1023,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2536,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 934,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1157,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 791,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 565,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 903,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 343,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 1946,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 1940,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4424,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38885,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2446951,
            "range": "± 5848",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6191,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5717,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6884,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8597,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8595,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11355,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11390,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9106,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2708488,
            "range": "± 3715",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1153037,
            "range": "± 3964",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5357,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6383,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4579,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4785,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6123,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7752,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1743,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1302077,
            "range": "± 6169",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1205230,
            "range": "± 7648",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "db067cf864781c4858b1ea80ed0f9e3f61d447d3",
          "message": "Updated the Test262 test suite (#1794)\n\nThis PR just updates the Test262 sub-module to bring all the new tests created in the last month and a half.",
          "timestamp": "2022-01-29T16:38:08Z",
          "tree_id": "4e65dc966a2c0706135abc7ae675cb75e75c2d23",
          "url": "https://github.com/boa-dev/boa/commit/db067cf864781c4858b1ea80ed0f9e3f61d447d3"
        },
        "date": 1643476369537,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4308,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14253,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16316,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9252,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9927,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10754,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6410,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8519,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8221,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10139,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12192,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13815,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144779,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7622,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10998,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5610,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11226,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14149,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13906,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5807,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29422,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25984,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 660,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1295,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1495,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 966,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 979,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1144,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1029,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1040,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1147,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1156,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 820,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1179,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2856,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1060,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1305,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 883,
            "range": "± 878",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 642,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 681,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1016,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 395,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2188,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2186,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4983,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44262,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2752766,
            "range": "± 3516",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6222,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6383,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6748,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9860,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9816,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12925,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12931,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10387,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3059704,
            "range": "± 6455",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1309337,
            "range": "± 4511",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6024,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7109,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5193,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5481,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6934,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8808,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1972,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1483816,
            "range": "± 9969",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1364193,
            "range": "± 9357",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "98faa73bbe963449317f1dd1f203a781c665387e",
          "message": "Update the PR benchmarks action (#1774)\n\nThis is just for debugging for now. If we find out a fix, we can merge it.",
          "timestamp": "2022-01-29T17:34:13Z",
          "tree_id": "ddd3721e7be6bfa353b4cb61f32bd4947c5d0e0b",
          "url": "https://github.com/boa-dev/boa/commit/98faa73bbe963449317f1dd1f203a781c665387e"
        },
        "date": 1643479633797,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 344,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4430,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14157,
            "range": "± 709",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17039,
            "range": "± 1287",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9373,
            "range": "± 662",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10062,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10526,
            "range": "± 566",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6357,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8380,
            "range": "± 381",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8240,
            "range": "± 502",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10435,
            "range": "± 653",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12481,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13584,
            "range": "± 650",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151649,
            "range": "± 7592",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7655,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11074,
            "range": "± 684",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5700,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11152,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14463,
            "range": "± 1398",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13753,
            "range": "± 708",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5872,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29999,
            "range": "± 1740",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28712,
            "range": "± 1972",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 759,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1430,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1760,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1107,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1220,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1412,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1211,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1207,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1367,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1487,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1121,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1473,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3364,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1359,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1623,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1155,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 839,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 875,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1291,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 495,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2951,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2712,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6348,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51769,
            "range": "± 1899",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3814847,
            "range": "± 259248",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7601,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7854,
            "range": "± 364",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8505,
            "range": "± 1437",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11746,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11516,
            "range": "± 577",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15485,
            "range": "± 699",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15759,
            "range": "± 658",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12564,
            "range": "± 692",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3465566,
            "range": "± 169921",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1553268,
            "range": "± 69888",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7634,
            "range": "± 315",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9231,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6422,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6296,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8159,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10383,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2313,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1658320,
            "range": "± 81818",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1581651,
            "range": "± 77718",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d96b6407d5b3a8ac6bc3e54138fcd6273eddebeb",
          "message": "Bump benchmark-action/github-action-benchmark from 1.11.3 to 1.12.0 (#1811)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.11.3 to 1.12.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.12.0</h2>\n<p>Feat: Support private repositories (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/105\">#105</a>)\nChore: Bump action runner to node v16 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/106\">#106</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.12.0\">v1.12.0</a> - 28 Jan 2022</h1>\n<ul>\n<li><strong>Feat:</strong> Support private repositories (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/105\">#105</a>)</li>\n<li><strong>Chore</strong> Bump action runner to node v16 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/106\">#106</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/b7064e06aeeb370bc6da9992de82f14aa8334089\"><code>b7064e0</code></a> v1.12.0</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.11.3...v1.12.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.11.3&new-version=1.12.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-01-31T20:01:44Z",
          "tree_id": "a03e6afb8d9456a030a06105650fcf45d5923df2",
          "url": "https://github.com/boa-dev/boa/commit/d96b6407d5b3a8ac6bc3e54138fcd6273eddebeb"
        },
        "date": 1643661260939,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 329,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4568,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14839,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17214,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9816,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10474,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11328,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6958,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8933,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8695,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10657,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12986,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14422,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 152024,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8079,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11690,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6126,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11399,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14305,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14081,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6025,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30686,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27109,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 640,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1333,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1554,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1001,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1005,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1171,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1069,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1076,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1167,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1171,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 835,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1200,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2757,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1088,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1325,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 888,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 653,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 695,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1028,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 364,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2296,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2268,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5040,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41117,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2781306,
            "range": "± 3532",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6146,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6337,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6713,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9588,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9632,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12868,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12729,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10669,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3104285,
            "range": "± 17867",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1309008,
            "range": "± 4519",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6163,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7245,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5265,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5298,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6845,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8689,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1720,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1435463,
            "range": "± 9957",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1340945,
            "range": "± 9407",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "60b7eb89340c266a2b4f180690e8781245b6a1c8",
          "message": "General code clean-up and new lint addition (#1809)\n\nThis PR adds some Clippy lints. Mainly, it adds the list of pedantic lints excluding some lints that were causing too many warnings. I also denied some useful restriction and pedantic lints, to make sure we use `Self` all the possible times (for better maintainability), and that we pass elements by reference where possible, for example, or that the documentation is properly written.\r\n\r\nThis might even have some small performance gains.\r\n\r\nI also added a perfect hash function for the CLI keywords, which should be more efficient than a `HashSet`. This is something we could use elsewhere too.",
          "timestamp": "2022-02-03T09:59:06Z",
          "tree_id": "220ff5b9a8e5fcec9cf733b5d56a2f29f2a88cfb",
          "url": "https://github.com/boa-dev/boa/commit/60b7eb89340c266a2b4f180690e8781245b6a1c8"
        },
        "date": 1643884665887,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 390,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4412,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14913,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17087,
            "range": "± 532",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10073,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10525,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11113,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6591,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9162,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8655,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10597,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12824,
            "range": "± 354",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14107,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165036,
            "range": "± 2365",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7988,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11606,
            "range": "± 353",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5982,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11841,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15682,
            "range": "± 488",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14750,
            "range": "± 575",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5965,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30349,
            "range": "± 1188",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26788,
            "range": "± 924",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 755,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1432,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1681,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1086,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1124,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1348,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1222,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1168,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1298,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1348,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 924,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1312,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3120,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1219,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1494,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1000,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 720,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 738,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1141,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 456,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2484,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2472,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5690,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49181,
            "range": "± 1197",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3112445,
            "range": "± 68749",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7101,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7241,
            "range": "± 215",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7922,
            "range": "± 308",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11202,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10971,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14707,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14968,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12021,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3492938,
            "range": "± 125904",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1492941,
            "range": "± 45011",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6981,
            "range": "± 213",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8152,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5898,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6239,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7961,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10359,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2297,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1681256,
            "range": "± 41297",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1522853,
            "range": "± 49362",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "23208d81345e823b260a47ae7c777f817fd88905",
          "message": "Bump copy-webpack-plugin from 10.2.3 to 10.2.4 (#1815)\n\nBumps [copy-webpack-plugin](https://github.com/webpack-contrib/copy-webpack-plugin) from 10.2.3 to 10.2.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/releases\">copy-webpack-plugin's releases</a>.</em></p>\n<blockquote>\n<h2>v10.2.4</h2>\n<h3><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.3...v10.2.4\">10.2.4</a> (2022-01-31)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/666\">#666</a>) (<a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a1c2308511a4cccb92a22cb395b6eb66dc1c776b\">a1c2308</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/CHANGELOG.md\">copy-webpack-plugin's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.3...v10.2.4\">10.2.4</a> (2022-01-31)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/666\">#666</a>) (<a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a1c2308511a4cccb92a22cb395b6eb66dc1c776b\">a1c2308</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/18b1ea5c502e1221e7a3a030591694401379706d\"><code>18b1ea5</code></a> chore(release): 10.2.4</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a1c2308511a4cccb92a22cb395b6eb66dc1c776b\"><code>a1c2308</code></a> fix: types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/666\">#666</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.3...v10.2.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=copy-webpack-plugin&package-manager=npm_and_yarn&previous-version=10.2.3&new-version=10.2.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T10:19:24Z",
          "tree_id": "d9e76511cff4bbc63872d4891e533b01371819f0",
          "url": "https://github.com/boa-dev/boa/commit/23208d81345e823b260a47ae7c777f817fd88905"
        },
        "date": 1643885781409,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4421,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14212,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16518,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9427,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10149,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10817,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6510,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8560,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8298,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10293,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12184,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13552,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143363,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7667,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11117,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5737,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11363,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14510,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14111,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5738,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29311,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25830,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 658,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1296,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1469,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 986,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 990,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1179,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1044,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1044,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1180,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1153,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 822,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1174,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2803,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1073,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1319,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 893,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 645,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 701,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1038,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 402,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2264,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2214,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4934,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43900,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2711717,
            "range": "± 4375",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6183,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6391,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6815,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9805,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9821,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12987,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13041,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10273,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3093232,
            "range": "± 7216",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1304830,
            "range": "± 4071",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6103,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7190,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5253,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5420,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6881,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8812,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1994,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1464225,
            "range": "± 10010",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1350978,
            "range": "± 7974",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "fdd23b154b1c5fb5d58d2fdd196a4ce6842aa3c1",
          "message": "Bump webpack-dev-server from 4.7.3 to 4.7.4 (#1816)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.7.3 to 4.7.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.7.4</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.3...v4.7.4\">4.7.4</a> (2022-02-02)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add <code>@​types/express</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4226\">#4226</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/e55f728d3b5262884aa80daf9b021198b4bc65a9\">e55f728</a>)</li>\n<li>negative descriptions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4216\">#4216</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fd854c07c2a4654f479bdbad1b717d9406ce15c6\">fd854c0</a>)</li>\n<li>types for the <code>proxy</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4173\">#4173</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/efec2f5bfb5ff4b99258b12317aa0d922836738e\">efec2f5</a>)</li>\n<li>use CLI specific description for <code>--open-app-name</code> and <code>--web-socket-server</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4215\">#4215</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/329679a434219adc43f2d73c2ceeda14787dc64d\">329679a</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.3...v4.7.4\">4.7.4</a> (2022-02-02)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add <code>@​types/express</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4226\">#4226</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/e55f728d3b5262884aa80daf9b021198b4bc65a9\">e55f728</a>)</li>\n<li>negative descriptions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4216\">#4216</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/fd854c07c2a4654f479bdbad1b717d9406ce15c6\">fd854c0</a>)</li>\n<li>types for the <code>proxy</code> option (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4173\">#4173</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/efec2f5bfb5ff4b99258b12317aa0d922836738e\">efec2f5</a>)</li>\n<li>use CLI specific description for <code>--open-app-name</code> and <code>--web-socket-server</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4215\">#4215</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/329679a434219adc43f2d73c2ceeda14787dc64d\">329679a</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/92c602a7dde861badfc4758510af596f6a14e9a0\"><code>92c602a</code></a> chore(release): 4.7.4</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/fd854c07c2a4654f479bdbad1b717d9406ce15c6\"><code>fd854c0</code></a> fix: negative descriptions (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4216\">#4216</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/986479369ca7b609f4f0438cbd2a0c4222f8a077\"><code>9864793</code></a> chore: update deps (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4237\">#4237</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e55f728d3b5262884aa80daf9b021198b4bc65a9\"><code>e55f728</code></a> fix: add <code>@​types/express</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4226\">#4226</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/ad1d14c2bd173246cbcc6b29e013c8bcabd35c89\"><code>ad1d14c</code></a> ci: fix for windows (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4229\">#4229</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/b9e11ba90a35ec543140fbb3b50684ccfa122f5c\"><code>b9e11ba</code></a> chore(deps-dev): bump lint-staged</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e6eae3e3f721e27e477dc7ba58046cdf7f77615d\"><code>e6eae3e</code></a> chore(deps-dev): bump puppeteer</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/0131cc191993d44a2bfec3f72290642c6de55d8d\"><code>0131cc1</code></a> chore(deps): bump http-proxy-middleware</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/bd3fce8bdc77f16e8c95ca70fe82a04aeb74508e\"><code>bd3fce8</code></a> chore(deps-dev): bump <code>@​babel/core</code></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/72e01c09c5694898381bc0cb9ed246ccf3b51d38\"><code>72e01c0</code></a> chore(deps-dev): bump webpack-cli</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.7.3...v4.7.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.7.3&new-version=4.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T12:27:11Z",
          "tree_id": "37f347014d924590e1eef4acb860731c22d087c4",
          "url": "https://github.com/boa-dev/boa/commit/fdd23b154b1c5fb5d58d2fdd196a4ce6842aa3c1"
        },
        "date": 1643893131422,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4409,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14177,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16449,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9463,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10147,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10827,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6532,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8601,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8263,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10278,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12267,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13537,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144512,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7665,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11160,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5737,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11312,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14521,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14189,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5721,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29182,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25748,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 673,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1298,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1485,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 965,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 980,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1180,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1046,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1041,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1144,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 855,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1176,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2808,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1066,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1339,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 885,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 647,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 687,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1033,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 402,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2275,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2223,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5012,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43746,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2708171,
            "range": "± 2231",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6123,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6397,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6768,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9779,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9759,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12870,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12961,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10313,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3078804,
            "range": "± 8091",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1307568,
            "range": "± 4257",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6096,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7177,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5235,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5379,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6939,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8717,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1981,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1460894,
            "range": "± 7194",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1356230,
            "range": "± 7491",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6777eb42868c2cb4bc18aa5c6b8093d44e55a30b",
          "message": "Bump css-loader from 6.5.1 to 6.6.0 (#1817)\n\nBumps [css-loader](https://github.com/webpack-contrib/css-loader) from 6.5.1 to 6.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/releases\">css-loader's releases</a>.</em></p>\n<blockquote>\n<h2>v6.6.0</h2>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.5.1...v6.6.0\">6.6.0</a> (2022-02-02)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>hashStrategy</code> option (<a href=\"https://github.com/webpack-contrib/css-loader/commit/ca4abce74d01bc13959e30a4dbbd1ca3a0516d72\">ca4abce</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md\">css-loader's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.5.1...v6.6.0\">6.6.0</a> (2022-02-02)</h2>\n<h3>Features</h3>\n<ul>\n<li>added the <code>hashStrategy</code> option (<a href=\"https://github.com/webpack-contrib/css-loader/commit/ca4abce74d01bc13959e30a4dbbd1ca3a0516d72\">ca4abce</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/5d6be099c3dbd099b38bbfe1ae04c64b29fa7944\"><code>5d6be09</code></a> chore(release): v6.6.0</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/ca4abce74d01bc13959e30a4dbbd1ca3a0516d72\"><code>ca4abce</code></a> feat: added the <code>hashStrategy</code> option</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/32403943d68dad5cab07b3af0dff62bf350db489\"><code>3240394</code></a> ci: fix (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1413\">#1413</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/c78fe789efb39d2c8375d141d8ed8adc7e1ab6af\"><code>c78fe78</code></a> ci: remove install NPM steps (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1411\">#1411</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/cbe3898876605c73d1854f23ac2497df8e9611c5\"><code>cbe3898</code></a> docs: reword sentence (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1407\">#1407</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/5167ce9634408ba2340fa20836ba3b43a93afc3d\"><code>5167ce9</code></a> chore: update lint staged config (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1405\">#1405</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/8ffd14eb4471a1e4a0780f58aeba7b30727b9830\"><code>8ffd14e</code></a> chore: update dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1404\">#1404</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/db4d65229b2bcf1f97d096accedd813effed6fc2\"><code>db4d652</code></a> chore: update node version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1403\">#1403</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/0df1ae95e16e925e5214719786184a36363cefea\"><code>0df1ae9</code></a> fix: expand lint-staged, use eslint cache (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1399\">#1399</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/5eb7b80b72bf1cce9d788fcc309766c71400c0e1\"><code>5eb7b80</code></a> test: fix (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1400\">#1400</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.5.1...v6.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=6.5.1&new-version=6.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T12:52:34Z",
          "tree_id": "7c225157f6502a0ce2d950714fc72f81c32cb48f",
          "url": "https://github.com/boa-dev/boa/commit/6777eb42868c2cb4bc18aa5c6b8093d44e55a30b"
        },
        "date": 1643894802760,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 406,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4734,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15780,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18431,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10435,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11157,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11854,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7109,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9477,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9041,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11331,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13615,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15065,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 168249,
            "range": "± 332",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8415,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12474,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6232,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12652,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16342,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15935,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6369,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32602,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28615,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 776,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1558,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1765,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1160,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1170,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1398,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1249,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1259,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1369,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1372,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 987,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1402,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3354,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1295,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1607,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1078,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 755,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 799,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1226,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 480,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2644,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2622,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5934,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52508,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3244277,
            "range": "± 5197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7378,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7687,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8180,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11760,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11808,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15327,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15399,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12377,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3685309,
            "range": "± 66769",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1567171,
            "range": "± 7141",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7292,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8598,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6299,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6485,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8213,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10492,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2383,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1756685,
            "range": "± 15594",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1627017,
            "range": "± 9277",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "0dfe6ec8b28fe0a321d7e80b58243c07b517e01a",
          "message": "Bump webpack from 5.67.0 to 5.68.0 (#1814)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.67.0 to 5.68.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.68.0</h2>\n<h1>Features</h1>\n<ul>\n<li>allow to disable compile time evaluation of import.meta.url</li>\n<li>add <code>__webpack_module__</code> and <code>__webpack_module__.id</code> to the api</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix handling of errors thrown in async modules</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/f593d98453e7920bf65f24bf051cd67b5704b59d\"><code>f593d98</code></a> 5.68.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/6f3735c54850960047cea1ece8194363b2401f29\"><code>6f3735c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15279\">#15279</a> from taranek/docs/array-helpers-docs</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/04039ca99c9a5575ecb041796c6a0858d7be591d\"><code>04039ca</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15284\">#15284</a> from webpack/feature/<strong>webpack_module</strong></li>\n<li><a href=\"https://github.com/webpack/webpack/commit/d7a87ab5bc3c6333dffb49af24990e7672643fcd\"><code>d7a87ab</code></a> change <strong>webpack_module_id</strong> to <strong>webpack_module</strong>.id</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/612de998f186a9bb2fe8769a91678df689a0541e\"><code>612de99</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15282\">#15282</a> from webpack/feature/<strong>webpack_module</strong></li>\n<li><a href=\"https://github.com/webpack/webpack/commit/a962d2ceddc387354a4c4bc927f92e338babfd2c\"><code>a962d2c</code></a> add <strong>webpack_module</strong> and <strong>webpack_module_id</strong> to the api</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/5a3760e6d47af6c2a9e70f2e08b7a0d02e6f78a5\"><code>5a3760e</code></a> docs(util): added jsdoc annotations for ArrayHelpers.js</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/46e8639a6a1f5288e2f43229f39fc21aecb3c5e8\"><code>46e8639</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15246\">#15246</a> from pavelsavara/import_meta_url</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/1e73ca79c4e01ab55e6e25f7991306050907ec66\"><code>1e73ca7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15266\">#15266</a> from webpack/bugfix/throwing-in-async-modules</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/232403c5e8fcfd733e4fff7f829aac6e51b5fb2a\"><code>232403c</code></a> fix discussions</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.67.0...v5.68.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.67.0&new-version=5.68.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-03T19:59:30Z",
          "tree_id": "d331724832e87b0e46d94ef5973eef90749d7fe9",
          "url": "https://github.com/boa-dev/boa/commit/0dfe6ec8b28fe0a321d7e80b58243c07b517e01a"
        },
        "date": 1643920464762,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 416,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4815,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15829,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18489,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10500,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11148,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11983,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7148,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9430,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9080,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11267,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13689,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15046,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165538,
            "range": "± 2401",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8395,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12211,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6225,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12497,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15840,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15622,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6363,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32375,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28337,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 801,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1548,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1771,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1135,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1162,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1370,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1222,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1229,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1353,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1367,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1000,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3282,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1261,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1588,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1062,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 760,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 784,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1217,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 493,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2607,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2559,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5876,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50787,
            "range": "± 779",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3179704,
            "range": "± 39176",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7330,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7633,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8009,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11384,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11460,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15279,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15094,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12353,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3678154,
            "range": "± 30616",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1536300,
            "range": "± 18276",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7251,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8597,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6235,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6477,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8223,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10497,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2384,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1739618,
            "range": "± 23608",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1627341,
            "range": "± 13702",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "3d21e8370125296aec3e2139879f9af74ed26eb8",
          "message": "Fixed the GitHub actions badge (#1813)\n\nThis uses the official GitHub actions badge.",
          "timestamp": "2022-02-04T05:35:33Z",
          "tree_id": "a502a6c8ccbdb29ae326c875787a35c1240ed5ed",
          "url": "https://github.com/boa-dev/boa/commit/3d21e8370125296aec3e2139879f9af74ed26eb8"
        },
        "date": 1643954875432,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 343,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4403,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14148,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16448,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9398,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10092,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10813,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6516,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8632,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8280,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10390,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12294,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13641,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143177,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7687,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11189,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5751,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11349,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14514,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14169,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5723,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29416,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25835,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 660,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1285,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1489,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 966,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 993,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1153,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1043,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1046,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1157,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 821,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1172,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2799,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1068,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1331,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 889,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 690,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1034,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 402,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2261,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2223,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4939,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43692,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2736378,
            "range": "± 3334",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6176,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6393,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6826,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9805,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9813,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12912,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12892,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10280,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3075511,
            "range": "± 6853",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1306677,
            "range": "± 6555",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6122,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7206,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5288,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5392,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6945,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8751,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1992,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1467522,
            "range": "± 7835",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1358584,
            "range": "± 10203",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "b34d581db50bdef70e6598f96bcf04c19b618341",
          "message": "Bump monaco-editor from 0.31.1 to 0.32.0 (#1818)\n\nBumps [monaco-editor](https://github.com/microsoft/monaco-editor) from 0.31.1 to 0.32.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/microsoft/monaco-editor/blob/main/CHANGELOG.md\">monaco-editor's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.32.0] (03.02.2022)</h2>\n<h3>Breaking Changes</h3>\n<ul>\n<li>The binary format for <code>IEncodedLineTokens</code> has changed to support strikethrough text.</li>\n<li><code>IDiffEditor.getDomNode()</code> has been renamed to <code>IDiffEditor.getContainerDomNode()</code>.</li>\n<li><code>InlayHint.text</code> has been replaced by <code>InlayHint.label</code> and <code>InlayHintsProvider.provideInlayHints</code> now returns an <code>InlayHintList</code>.</li>\n</ul>\n<h3>Thank you</h3>\n<p>Contributions to <code>monaco-editor</code>:</p>\n<ul>\n<li><a href=\"https://github.com/blutorange\"><code>@​blutorange (Andre Wachsmuth)</code></a>: Implements <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2383\">#2383</a> Add syntax modes for FreeMarker template language [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2847\">#2847</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2847\">microsoft/monaco-editor#2847</a>)</li>\n<li><a href=\"https://github.com/forensicmike\"><code>@​forensicmike (forensicmike1)</code></a>: Add &quot;cd monaco-editor&quot; to the step by step commandline instructions for cloning and running the samples [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2894\">#2894</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2894\">microsoft/monaco-editor#2894</a>)</li>\n<li><a href=\"https://github.com/juan-carlos-diaz\"><code>@​juan-carlos-diaz</code></a>: Fix <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2851\">#2851</a> Highlight correctly the attributes and identifiers (with dashes) for Shell language [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2871\">#2871</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2871\">microsoft/monaco-editor#2871</a>)</li>\n<li><a href=\"https://github.com/MasterOdin\"><code>@​MasterOdin (Matthew Peveler)</code></a>: Only run publish workflow on main monaco-editor repo [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2926\">#2926</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2926\">microsoft/monaco-editor#2926</a>)</li>\n<li><a href=\"https://github.com/philipturner\"><code>@​philipturner (Philip Turner)</code></a>\n<ul>\n<li>Update Swift language specification to version 5.5 [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2855\">#2855</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2855\">microsoft/monaco-editor#2855</a>)</li>\n<li>Add <a href=\"https://github.com/preconcurrency\"><code>@​preconcurrency</code></a> to Swift declaration attributes [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2924\">#2924</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2924\">microsoft/monaco-editor#2924</a>)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/rcjsuen\"><code>@​rcjsuen (Remy Suen)</code></a>: Support hyphenated HTML tags in Markdown syntax [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2864\">#2864</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2864\">microsoft/monaco-editor#2864</a>)</li>\n<li><a href=\"https://github.com/resistdesign\"><code>@​resistdesign (Ryan Graff)</code></a>: doc: (samples) Simplify Browser ESM Parcel build [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2832\">#2832</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2832\">microsoft/monaco-editor#2832</a>)</li>\n<li><a href=\"https://github.com/ValeraS\"><code>@​ValeraS (Valeriy)</code></a>\n<ul>\n<li>fix(monaco-editor-webpack-plugin): load monaco-editor with webpack 4 [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2818\">#2818</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2818\">microsoft/monaco-editor#2818</a>)</li>\n<li>tune(monaco-editor-webpack-plugin): expose plugin options type [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2853\">#2853</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2853\">microsoft/monaco-editor#2853</a>)</li>\n</ul>\n</li>\n<li><a href=\"https://github.com/ZusorCode\"><code>@​ZusorCode (Tobias Messner)</code></a>: Add .cjs extension for javascript files [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2929\">#2929</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2929\">microsoft/monaco-editor#2929</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/microsoft/monaco-editor/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=monaco-editor&package-manager=npm_and_yarn&previous-version=0.31.1&new-version=0.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-04T10:22:04Z",
          "tree_id": "dba8374de5401f0efc0233d26a72a80a89f8b11b",
          "url": "https://github.com/boa-dev/boa/commit/b34d581db50bdef70e6598f96bcf04c19b618341"
        },
        "date": 1643971998176,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 340,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4435,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14162,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16510,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9413,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10113,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10840,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6519,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8596,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8290,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10332,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12239,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13513,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143105,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7656,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11148,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5742,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11418,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14450,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14140,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5774,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29406,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25767,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 649,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1287,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1487,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 974,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 996,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1068,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1045,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1146,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1183,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 825,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1168,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2815,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1059,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1328,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 877,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 644,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 686,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1027,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 408,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2238,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2229,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4922,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43727,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2744123,
            "range": "± 4967",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6188,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6358,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6785,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9852,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9791,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12959,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13040,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10378,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3100935,
            "range": "± 6479",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1304391,
            "range": "± 3820",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6117,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7171,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5233,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5404,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6873,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8702,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1983,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1465782,
            "range": "± 11969",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1359525,
            "range": "± 7579",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "4a11ca1773837a2a6f04bf41f4238f1753dabc26",
          "message": "Fixed #1768 (#1820)\n\nThis Pull Request fixes/closes #1768.\r\n\r\nIt adds one extra peeked token in the buffered lexer, since it didn't take into account that the stream might end just after the last peeked token. The panic was only happening in debug mode, but still, this was wrong.",
          "timestamp": "2022-02-07T21:15:47Z",
          "tree_id": "8875c821d273951d251896d41673926495742e4d",
          "url": "https://github.com/boa-dev/boa/commit/4a11ca1773837a2a6f04bf41f4238f1753dabc26"
        },
        "date": 1644270666856,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 334,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4464,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14066,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16374,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9389,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10013,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10758,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6504,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8557,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8222,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10263,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12177,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13569,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144017,
            "range": "± 213",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7686,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11126,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5734,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11279,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14473,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14180,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5766,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29518,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25823,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1274,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1471,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 962,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 982,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1162,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1041,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1034,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1149,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1150,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 816,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1160,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2859,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1055,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1282,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 882,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 653,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 695,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1040,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 401,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2176,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2174,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5104,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43879,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2763261,
            "range": "± 5925",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6287,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6538,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7002,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9660,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9689,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12810,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12772,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10400,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3223718,
            "range": "± 6688",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1344776,
            "range": "± 4034",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6290,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7357,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5350,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5370,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6811,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8834,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1951,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1476816,
            "range": "± 8520",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1371636,
            "range": "± 7038",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "5759447250b684460b2e24e28988c53bf0694936",
          "message": "Reduced the size of AST nodes (#1821)\n\nThis PR boxes the `Try` and `TaggedTemplate` nodes reducing the size of the `Node` structure from 88 to 56 bytes. This should improve performance in most cases, by adding another indirection with code with `try` and templates.",
          "timestamp": "2022-02-07T23:13:58Z",
          "tree_id": "b913738ed7969166047c390d515f52774b6c6ed3",
          "url": "https://github.com/boa-dev/boa/commit/5759447250b684460b2e24e28988c53bf0694936"
        },
        "date": 1644277828575,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 412,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4893,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16240,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18763,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10751,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11476,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12259,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7362,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9770,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9388,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11709,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13805,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15606,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 166899,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8694,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12688,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6428,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12794,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16564,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16213,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6377,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33276,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29005,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 795,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1593,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1832,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1193,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1203,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1410,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1267,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1263,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1422,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1413,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1015,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1459,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3748,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1311,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1603,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1073,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 787,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 821,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1251,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 493,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2707,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2688,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6108,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53880,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3381429,
            "range": "± 7644",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7599,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7997,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8525,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12403,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12373,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16208,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16208,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12841,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 4012094,
            "range": "± 13018",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1698912,
            "range": "± 5928",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7588,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8925,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6523,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6619,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8538,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10620,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2444,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1831172,
            "range": "± 19257",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1705758,
            "range": "± 12677",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7779c1a6f1f5d467c3307ab0cff1aa412a990db5",
          "message": "Bump boa-dev/criterion-compare-action from 3.0.2 to 3.1.0 (#1827)\n\nBumps [boa-dev/criterion-compare-action](https://github.com/boa-dev/criterion-compare-action) from 3.0.2 to 3.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/boa-dev/criterion-compare-action/releases\">boa-dev/criterion-compare-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.0</h2>\n<p>Added the possibility to add feature flags for a benchmark (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/pull/32\">boa-dev/criterion-compare-action#32</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/36f48c2715c33235cb9f906673331399efb84b17\"><code>36f48c2</code></a> Bumped version number</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/4a46bfae1de3fe3af2d546ec5cf4283bc134b1ec\"><code>4a46bfa</code></a> Add the possibility to add feature flags for a benchmark (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/32\">#32</a>)</li>\n<li>See full diff in <a href=\"https://github.com/boa-dev/criterion-compare-action/compare/v3.0.2...v3.1.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=boa-dev/criterion-compare-action&package-manager=github_actions&previous-version=3.0.2&new-version=3.1.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-08T15:19:03Z",
          "tree_id": "68966e0f60e8f2bbbce43e6d424c89f4302cfd04",
          "url": "https://github.com/boa-dev/boa/commit/7779c1a6f1f5d467c3307ab0cff1aa412a990db5"
        },
        "date": 1644338583122,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 395,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4567,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15383,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17715,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10277,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10985,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11649,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6953,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9218,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8883,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11058,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13172,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14693,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159081,
            "range": "± 917",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8314,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12180,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6146,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12098,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15739,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15368,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6309,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33416,
            "range": "± 1881",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28455,
            "range": "± 2628",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 814,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1590,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1814,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1146,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1176,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1459,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1215,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1286,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1362,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1364,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1039,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1404,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3747,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1249,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1545,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1049,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 761,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 797,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1280,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 468,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2727,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2562,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6359,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51976,
            "range": "± 1380",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3262189,
            "range": "± 3959",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7332,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8049,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8577,
            "range": "± 546",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11825,
            "range": "± 498",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12565,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15604,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15599,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12321,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3844159,
            "range": "± 10697",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1639291,
            "range": "± 6864",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7345,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8576,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6322,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6391,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8180,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10388,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2354,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1771033,
            "range": "± 20398",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1685291,
            "range": "± 116578",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7b2dc881a0262794183537973f8bc6da46567f20",
          "message": "Bump follow-redirects from 1.14.7 to 1.14.8 (#1833)\n\nBumps [follow-redirects](https://github.com/follow-redirects/follow-redirects) from 1.14.7 to 1.14.8.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/follow-redirects/follow-redirects/commit/3d81dc3237b4ffe8b722bb3d1c70a7866657166e\"><code>3d81dc3</code></a> Release version 1.14.8 of the npm package.</li>\n<li><a href=\"https://github.com/follow-redirects/follow-redirects/commit/62e546a99c07c3ee5e4e0718c84a6ca127c5c445\"><code>62e546a</code></a> Drop confidential headers across schemes.</li>\n<li>See full diff in <a href=\"https://github.com/follow-redirects/follow-redirects/compare/v1.14.7...v1.14.8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.14.7&new-version=1.14.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/boa-dev/boa/network/alerts).\n\n</details>",
          "timestamp": "2022-02-12T12:14:59Z",
          "tree_id": "b7872850dd326a8336bbec903853286ddae94c1f",
          "url": "https://github.com/boa-dev/boa/commit/7b2dc881a0262794183537973f8bc6da46567f20"
        },
        "date": 1644669904709,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 403,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4875,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16317,
            "range": "± 553",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18868,
            "range": "± 861",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11003,
            "range": "± 626",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11570,
            "range": "± 934",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12574,
            "range": "± 773",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7534,
            "range": "± 562",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9836,
            "range": "± 606",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9400,
            "range": "± 433",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11739,
            "range": "± 549",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14809,
            "range": "± 1195",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15518,
            "range": "± 648",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165307,
            "range": "± 10906",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8638,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12720,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6410,
            "range": "± 321",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13013,
            "range": "± 615",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16231,
            "range": "± 823",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16150,
            "range": "± 986",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6656,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33546,
            "range": "± 2055",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29155,
            "range": "± 1504",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 889,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1671,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2006,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1265,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1287,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1518,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1335,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1344,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1465,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1458,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1129,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1537,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3497,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1401,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1761,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1166,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 845,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 914,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1318,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 529,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2899,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2776,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6455,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54544,
            "range": "± 2255",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3693039,
            "range": "± 166403",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8217,
            "range": "± 514",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8369,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8733,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12037,
            "range": "± 774",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11711,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15886,
            "range": "± 660",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16132,
            "range": "± 592",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 13129,
            "range": "± 470",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3857954,
            "range": "± 175456",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1665476,
            "range": "± 59024",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 8089,
            "range": "± 478",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 9255,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6766,
            "range": "± 250",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6702,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8573,
            "range": "± 330",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10840,
            "range": "± 518",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2298,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1748354,
            "range": "± 58790",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1597562,
            "range": "± 62243",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "53ef07b1a6201c3c459563b6aa4dde53047637b6",
          "message": "Using the new formatting arguments from Rust 1.58 (#1834)\n\nIn [Rust 1.58](https://blog.rust-lang.org/2022/01/13/Rust-1.58.0.html#captured-identifiers-in-format-strings), capturing of bindings were added to format strings. This makes things more clear, so I added this where possible.",
          "timestamp": "2022-02-13T12:06:27Z",
          "tree_id": "e0366cf5e481e9462e9e0c0c63e82a4e9231a534",
          "url": "https://github.com/boa-dev/boa/commit/53ef07b1a6201c3c459563b6aa4dde53047637b6"
        },
        "date": 1644755857592,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 331,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4249,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13866,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15971,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9264,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9933,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10677,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6398,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8444,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8138,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10139,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11938,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13322,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135338,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7427,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10824,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5576,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11201,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14149,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13957,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5487,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28623,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25067,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 632,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1266,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1486,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 947,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 974,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1159,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1037,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1033,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1138,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1133,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 826,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1167,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2825,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1038,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1283,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 875,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 647,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 693,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1039,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 399,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2151,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2121,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4871,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43592,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2769610,
            "range": "± 4131",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6079,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6338,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6748,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9810,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9899,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12937,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12889,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10541,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3133498,
            "range": "± 10314",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1344583,
            "range": "± 4176",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6031,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7129,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5165,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5299,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6805,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8609,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1459196,
            "range": "± 9872",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1349328,
            "range": "± 8494",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "djordje.lukic@docker.com",
            "name": "Djordje Lukic",
            "username": "rumpl"
          },
          "committer": {
            "email": "djordje.lukic@docker.com",
            "name": "Djordje Lukic",
            "username": "rumpl"
          },
          "distinct": false,
          "id": "7e772768e2644eaedaedf5f0a0794f7b16fd6d93",
          "message": "Give the arrow function its proper name (#1832)\n\nWith this change an arrow function name is correctly set to the name of the variable:\r\n\r\n```javascript\r\nconst myFunction = () => {};\r\nconsole.log(myFunction.name); // Prints \"myFunction\"\r\n```\r\n\r\n_Note:_ I'm still getting familiar with the codebase and am pretty new to Rust so I won't be offended if this isn't merged. I am actually surprised I had to make so many changes to give the right code the name it needed. Maybe there is a better way? I'm all ears :)",
          "timestamp": "2022-02-14T21:56:56Z",
          "tree_id": "5ab40eed6851745e2eea300ffaa9bcece2c9be67",
          "url": "https://github.com/boa-dev/boa/commit/7e772768e2644eaedaedf5f0a0794f7b16fd6d93"
        },
        "date": 1644877522411,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 342,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4320,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13726,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15923,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9251,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9924,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10673,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6342,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8394,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8033,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10039,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11834,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13179,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135947,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7525,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10901,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5636,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10987,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14065,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13813,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5523,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28552,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24843,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1295,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1443,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 961,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 996,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1150,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1013,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1029,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1150,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1149,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 809,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1181,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2759,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1053,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1309,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 874,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 648,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 695,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1049,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 386,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2182,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2183,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4885,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43475,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2763470,
            "range": "± 11784",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6107,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6347,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6788,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9426,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9365,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12403,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12409,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10482,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3097023,
            "range": "± 6027",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1340577,
            "range": "± 7380",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6085,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7164,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5143,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5345,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6860,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8623,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1973,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1479912,
            "range": "± 11156",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1364125,
            "range": "± 14496",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jevan.cnchan@gmail.com",
            "name": "Jevan Chan",
            "username": "jevancc"
          },
          "committer": {
            "email": "jevan.cnchan@gmail.com",
            "name": "Jevan Chan",
            "username": "jevancc"
          },
          "distinct": false,
          "id": "be26b10ea83b9ee55568e4d311e894dd510f30c4",
          "message": "Fix string.prototype methods and add static string methods (#1123)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes existing string prototype methods in #13 and adds static methods.\r\n\r\nIt changes the following:\r\n\r\n- Fix bugs in existing string prototype methods and improve readability (e.g. rename variables to match the names in spec)\r\n- Add static methods `String.raw`, `String.fromCharCode`, `String.fromCodePoint`\r\n- Fix broken unit tests\r\n\n\nCo-authored-by: RageKnify <RageKnify@gmail.com>",
          "timestamp": "2022-02-15T07:31:18Z",
          "tree_id": "5a0bcd8776820c15f49a8e96dd677cb2b7002f35",
          "url": "https://github.com/boa-dev/boa/commit/be26b10ea83b9ee55568e4d311e894dd510f30c4"
        },
        "date": 1644912009406,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4405,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13759,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16073,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9304,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10003,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10711,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6471,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8455,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8147,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10148,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11892,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13244,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135659,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7494,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10945,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5656,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11014,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14121,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13820,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5486,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28647,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25035,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 655,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1477,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 963,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 967,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1151,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1033,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1047,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1165,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1155,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 827,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1173,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2759,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1060,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1306,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 871,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 639,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 692,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1024,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 395,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2146,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2134,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4897,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43764,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2777601,
            "range": "± 12094",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6115,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6375,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6759,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9866,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9877,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12857,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12844,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10587,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3126965,
            "range": "± 4827",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1352973,
            "range": "± 7183",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6136,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7175,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5278,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5309,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6776,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8544,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1477760,
            "range": "± 8110",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1357500,
            "range": "± 7087",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6db813f05509f1d449353aa143acb0429761585e",
          "message": "Bump webpack from 5.68.0 to 5.69.0 (#1841)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.68.0 to 5.69.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.69.0</h2>\n<h1>Features</h1>\n<ul>\n<li>automatically switch to an ESM compatible environment when enabling ESM output mode</li>\n<li>handle multiple alternative directories (e. g. due to <code>resolve.alias</code> or <code>resolve.modules</code>) when creating an context module</li>\n<li>add <code>util/types</code> to node.js built-in modules</li>\n<li>add <code>__webpack_exports_info__.&lt;name&gt;.canMangle</code> api</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix bug in chunk graph generation which leads to modules being included in chunk desprite them being already included in parent chunks</li>\n<li>avoid writing more than 2GB at once during cache serialization (as workaround for node.js/libuv bug on MacOS)</li>\n<li>fix handling of whitespaces in semver ranges when using Module Federation</li>\n<li>avoid generating hashes which contain only numbers as they likely conflict with module ids</li>\n<li>fix resource name based placeholders for data uris</li>\n<li>fix cache serialization for context elements</li>\n<li>fix passing of <code>stage</code> option when instrumenting plugins for the ProfilingPlugin</li>\n<li>fix tracking of declarations in concatenated modules to avoid conflicts</li>\n<li>fix unstable mangling of exports</li>\n<li>fix handling of <code>#</code> in paths of loaders</li>\n<li>avoid unnecessary cache update when using <code>experiments.buildHttp</code></li>\n</ul>\n<h1>Contributing</h1>\n<ul>\n<li>update typescript and jest</li>\n</ul>\n<h1>Developer Experience</h1>\n<ul>\n<li>expose some additional typings for usage in webpack-cli</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/9d21401151b32abcefad0ffdb3238da91e2089ef\"><code>9d21401</code></a> 5.69.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/ba4e83c3a9430539e381c34022d629e78edc93c7\"><code>ba4e83c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15373\">#15373</a> from webpack/fix/issue-14907</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/7badefda017fa223617405942796d8831c52275f\"><code>7badefd</code></a> remove big assets case from allowlist</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/06c8b81531360b9d69a5d8cdd29b6561cf17ded1\"><code>06c8b81</code></a> Merge remote-tracking branch 'origin/main' into fix/issue-14907</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/4a53e9af65f2d965a59eed05be15445683b2580e\"><code>4a53e9a</code></a> limit writes to</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/18c3590b28fcaaa84b63f18968b09602e4a7e259\"><code>18c3590</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15315\">#15315</a> from webpack/fix/issue-13022</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/4edf949da3413b6be03a5a199ca58cc13384b1b8\"><code>4edf949</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15370\">#15370</a> from webpack/fix/partial-15366</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/02332b9c3dc1236918c2a9cbf510e6e622193df3\"><code>02332b9</code></a> Merge branch 'main' into fix/partial-15366</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/f52b8c572c3f83afcf7799b8121a9ab50787610d\"><code>f52b8c5</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/14757\">#14757</a> from webpack/fix-14755</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/896efde07d775043765a300961c8b932349254bb\"><code>896efde</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15367\">#15367</a> from webpack/fix/issues-15214</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.68.0...v5.69.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.68.0&new-version=5.69.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-16T10:38:02Z",
          "tree_id": "32878ba3ca74e4c98828df7d9ee4c83b678dfede",
          "url": "https://github.com/boa-dev/boa/commit/6db813f05509f1d449353aa143acb0429761585e"
        },
        "date": 1645009683916,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 401,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4657,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15666,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18027,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10229,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11003,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11684,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7050,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9312,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8928,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11070,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13238,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14751,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 161061,
            "range": "± 1307",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8221,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12138,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6193,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12341,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16005,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15724,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6129,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32124,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28040,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 758,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1509,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1705,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1148,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1151,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1368,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1231,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1238,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1370,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1382,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 964,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1394,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3282,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1246,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1540,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1060,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 749,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 793,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1209,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 462,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2562,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2547,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5823,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51987,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3282307,
            "range": "± 30793",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7385,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7719,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8123,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11698,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11599,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15194,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15247,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12335,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3729233,
            "range": "± 26977",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1595923,
            "range": "± 12364",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7358,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8584,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6275,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6336,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8008,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10243,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2348,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1757793,
            "range": "± 13406",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1603153,
            "range": "± 21827",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7716c53fa6689aeb2d3d9cfe2979af9240a14c9c",
          "message": "Bump rand from 0.8.4 to 0.8.5 (#1839)\n\nBumps [rand](https://github.com/rust-random/rand) from 0.8.4 to 0.8.5.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/rand/blob/master/CHANGELOG.md\">rand's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.8.5] - 2021-08-20</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Fix build on non-32/64-bit architectures (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1144\">#1144</a>)</li>\n<li>Fix &quot;min_const_gen&quot; feature for <code>no_std</code> (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1173\">#1173</a>)</li>\n<li>Check <code>libc::pthread_atfork</code> return value with panic on error (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1178\">#1178</a>)</li>\n<li>More robust reseeding in case <code>ReseedingRng</code> is used from a fork handler (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1178\">#1178</a>)</li>\n<li>Fix nightly: remove unused <code>slice_partition_at_index</code> feature (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1215\">#1215</a>)</li>\n<li>Fix nightly + <code>simd_support</code>: update <code>packed_simd</code> (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1216\">#1216</a>)</li>\n</ul>\n<h3>Rngs</h3>\n<ul>\n<li><code>StdRng</code>: Switch from HC128 to ChaCha12 on emscripten (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1142\">#1142</a>).\nWe now use ChaCha12 on all platforms.</li>\n</ul>\n<h3>Documentation</h3>\n<ul>\n<li>Added docs about rand's use of const generics (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1150\">#1150</a>)</li>\n<li>Better random chars example (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1157\">#1157</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/rand/commit/937320cbfeebd4352a23086d9c6e68f067f74644\"><code>937320c</code></a> Update CHANGELOG for 0.8.5 (<a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1221\">#1221</a>)</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/2924af688d352b889322870d017356f12651866b\"><code>2924af6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1183\">#1183</a> from vks/fill-float-doc</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/dbbc1bf3176138c867f3d84c0c4d288119a5a84e\"><code>dbbc1bf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1218\">#1218</a> from Will-Low/master</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/9f20df04d88698c38515833d6db62d7eb50d8b80\"><code>9f20df0</code></a> Making distributions comparable by deriving PartialEq. Tests included</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/a407bdfa4563d0cfbf744049242926c8de079d3f\"><code>a407bdf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1216\">#1216</a> from rust-random/work5</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/d3ca11b0bcc1f42fe34ba4f90f99509b7eb4ff18\"><code>d3ca11b</code></a> Update to packed_simd_2 0.3.7</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/fa04c15d0bb5842fdbdbb73d7a53ead36f3fcf52\"><code>fa04c15</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1215\">#1215</a> from Lantern-chat/master</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/73f8ffd16379390e624ac53cd6882dd679dd9a6f\"><code>73f8ffd</code></a> Remove unused <code>slice_partition_at_index</code> feature</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/8f372500f05dfadcff6c35e773e81029ab7debad\"><code>8f37250</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/rand/issues/1208\">#1208</a> from newpavlov/rand_distr/fix_no_std</li>\n<li><a href=\"https://github.com/rust-random/rand/commit/9ef737ba5b814f6ab36cebafb59ad29885d68a05\"><code>9ef737b</code></a> update changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-random/rand/compare/0.8.4...0.8.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rand&package-manager=cargo&previous-version=0.8.4&new-version=0.8.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-16T10:46:46Z",
          "tree_id": "e8911e1d72c0eb7968ef8a62476898ce6951ea91",
          "url": "https://github.com/boa-dev/boa/commit/7716c53fa6689aeb2d3d9cfe2979af9240a14c9c"
        },
        "date": 1645010541222,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 334,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4324,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14003,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16357,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9435,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10014,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10845,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6529,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8564,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8229,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10162,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12148,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13508,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137455,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7600,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10934,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5692,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11168,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14203,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13996,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5743,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29010,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25405,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 639,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1286,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1456,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 967,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 988,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1171,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1036,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1037,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1167,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1159,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 818,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1172,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2749,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1060,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1148,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 774,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 587,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 613,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 917,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 397,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2166,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2140,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4886,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44490,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2784909,
            "range": "± 4778",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6145,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6420,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6965,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8487,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8429,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12641,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11178,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9188,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2883130,
            "range": "± 10114",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1228191,
            "range": "± 5047",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5412,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6342,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4625,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4966,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6505,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7989,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1792,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1321881,
            "range": "± 11726",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1226501,
            "range": "± 9672",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "committer": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "distinct": false,
          "id": "826adb200945e06a5fd79b4dba433578103356da",
          "message": "Rework RegExp struct to include bitflags field (#1837)\n\nThis Pull Request fixes/closes #1819.\r\n\r\nIt changes the following:\r\n\r\n- Move the bitflags from `boa/src/syntax/lexer/regex.rs` to `boa/src/builtins/regexp/mod.rs`\r\n- Replace the booleans in the RegExp struct to include the bitflags struct\r\n- Update match expressions to make use of the bitflags struct\r\n\n\nCo-authored-by: Aäron Munsters <45006406+aaronmunsters@users.noreply.github.com>",
          "timestamp": "2022-02-16T13:02:55Z",
          "tree_id": "0b21b8b405a0633bae1da138598b8a089044a32b",
          "url": "https://github.com/boa-dev/boa/commit/826adb200945e06a5fd79b4dba433578103356da"
        },
        "date": 1645018431058,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 389,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4442,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14838,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17561,
            "range": "± 351",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10067,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10344,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11334,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6758,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9047,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8507,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10720,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12506,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14327,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151390,
            "range": "± 3421",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8163,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11686,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5924,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11860,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15406,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15049,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5878,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30154,
            "range": "± 621",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27170,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 730,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1477,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1676,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1118,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1127,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1316,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1202,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1190,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1341,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1339,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 946,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1374,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3276,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1257,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1507,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1032,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 735,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 780,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1194,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 449,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2523,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2460,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6094,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51810,
            "range": "± 1252",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3323311,
            "range": "± 197973",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7205,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7372,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8035,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10904,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10865,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14368,
            "range": "± 377",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14531,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12176,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3857049,
            "range": "± 55249",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1607141,
            "range": "± 31328",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7028,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8325,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6157,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6551,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8663,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10772,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2360,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1776729,
            "range": "± 36901",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1654133,
            "range": "± 61892",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "51537badc3c481d03313f52dbbf3ffc510b09267",
          "message": "Ignore wastefull `RegExp` tests (#1840)\n\nWith the implementation of `String.fromCodePoint` in #1123 some `RegExp` tests are now running for a long time. These tests check every unicode codepoint for all regexp property escape/character classes.\r\n\r\nThis not only makes the developer experience significantly worse, but also wastes cpu resources for the benefit of \"completeness\". I think these tests are completely useless. Ironically the unicode tables in the tests are generated - from the same data, that the unicode tables in the regex engine are also generated.\r\n\r\n262 suite runtime:\r\nBefore: ~03:30 https://github.com/boa-dev/boa/runs/5191567446?check_suite_focus=true\r\nAfter: ~31:00 https://github.com/boa-dev/boa/runs/5196405437?check_suite_focus=true",
          "timestamp": "2022-02-16T15:49:37Z",
          "tree_id": "7d0c49e0d18ce5aa23ef2de847e1e3e5ddd379b2",
          "url": "https://github.com/boa-dev/boa/commit/51537badc3c481d03313f52dbbf3ffc510b09267"
        },
        "date": 1645028413101,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4503,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14581,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17029,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9651,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10286,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11178,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6678,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8757,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8516,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10539,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12306,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13943,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138158,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7998,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11497,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5929,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11538,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14755,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14644,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5688,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30177,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26479,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 650,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1291,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1471,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 962,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 976,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1164,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1022,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1048,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1138,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1138,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 828,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1162,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2744,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1073,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1297,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 890,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 649,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 694,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1034,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 392,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2181,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2119,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4844,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44265,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2694478,
            "range": "± 2867",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6075,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6291,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6758,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9484,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9580,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12721,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12711,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10406,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3265573,
            "range": "± 5965",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1390045,
            "range": "± 8048",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6060,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7078,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5205,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5702,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7216,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8942,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2002,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1497501,
            "range": "± 20662",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1386347,
            "range": "± 9436",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3d9c8b229d3b3802fd8fcd7f65e9a9d26c94aae4",
          "message": "Bump serde_json from 1.0.78 to 1.0.79 (#1838)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.78 to 1.0.79.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.79</h2>\n<ul>\n<li>Allow <code>RawValue</code> deserialization to propagate <code>\\u</code> escapes for unmatched surrogates, which can later by deserialized to Vec&lt;u8&gt; (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/830\">#830</a>, thanks <a href=\"https://github.com/lucacasonato\"><code>@​lucacasonato</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/7025523603fe604d11b92ccd4ca314e343d3ae50\"><code>7025523</code></a> Release 1.0.79</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/7e56a406e5e3b2166e6c77a32136d7751093226d\"><code>7e56a40</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/830\">#830</a> from lucacasonato/support_lone_surrogates_in_raw_value</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/977975ee650829a1f3c232cd5f641a7011bdce1d\"><code>977975e</code></a> Ignore buggy ptr_arg clippy lint</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/aa78d6ca4e26bca42156aa7185d35c637c38b644\"><code>aa78d6c</code></a> Resolve needless_borrow clippy lint</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/json/compare/v1.0.78...v1.0.79\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.78&new-version=1.0.79)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-17T16:32:20Z",
          "tree_id": "1f81af8c8f511450ac5ee550ae88c72180292761",
          "url": "https://github.com/boa-dev/boa/commit/3d9c8b229d3b3802fd8fcd7f65e9a9d26c94aae4"
        },
        "date": 1645117670097,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 352,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3795,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12147,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14017,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9241,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8722,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9376,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6321,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7268,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7042,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8728,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10495,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11659,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 122246,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6564,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9459,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5574,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9655,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12375,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12175,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4881,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25080,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22039,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 565,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1134,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1288,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 857,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 869,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1028,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 911,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 910,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1021,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1016,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 725,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1041,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2660,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 943,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1148,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 788,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 576,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 621,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 912,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 352,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 1951,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 1917,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4351,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38370,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2437939,
            "range": "± 5581",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5473,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5653,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6016,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8275,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8445,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11090,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11106,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9162,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3118298,
            "range": "± 9449",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1327044,
            "range": "± 4185",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5361,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7047,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4632,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4953,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6327,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8943,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1771,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1285118,
            "range": "± 7928",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1190767,
            "range": "± 18002",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "748465d17b16287901d8540a8ae3fe6a0b69d365",
          "message": "Unwrap removal (#1842)\n\nThis removes all the calls to  `unwrap()` in the codebase, which made me found a couple of places where it wasn't needed, and could be improved. I also noticed we don't have dependabot updates for the test262 submodule and the interner dependencies, so I added those.\r\n\r\nI added lints so that no new unwraps are added.",
          "timestamp": "2022-02-17T17:44:21Z",
          "tree_id": "16e32dd9f1b2314fb016ba8a996224d047550e7b",
          "url": "https://github.com/boa-dev/boa/commit/748465d17b16287901d8540a8ae3fe6a0b69d365"
        },
        "date": 1645121758626,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 326,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4443,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14136,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16435,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9560,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10168,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10907,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6561,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8639,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8297,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10364,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12152,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13593,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138913,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7855,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11340,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5847,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11326,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14376,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14186,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5635,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29083,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25404,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 644,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1262,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1464,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 956,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 961,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1143,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1020,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1026,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1137,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1128,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 804,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1141,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2729,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1055,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1282,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 885,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 638,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 690,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1028,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 385,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2144,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2148,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5020,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 43937,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2747310,
            "range": "± 6125",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6203,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6429,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6813,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9804,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9728,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12981,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13076,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10272,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3208683,
            "range": "± 4627",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1367921,
            "range": "± 4124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6150,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7165,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5224,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5330,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6812,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8719,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1999,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1454623,
            "range": "± 7442",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1343348,
            "range": "± 11287",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4a33d20c7156ba5f6d6d99cea41fa3e959afbdf3",
          "message": "Bump webpack from 5.69.0 to 5.69.1 (#1843)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.69.0 to 5.69.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.69.1</h2>\n<h1>Revert</h1>\n<ul>\n<li>revert &quot;handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module&quot;</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/dfdc8b133d3d49371251e29efeefb9d31b982c9e\"><code>dfdc8b1</code></a> 5.69.1</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/dd53923cd004cca233d6f4f3fe455308ce0f8cb3\"><code>dd53923</code></a> Revert &quot;Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15332\">#15332</a> from webpack/fix/context-resolve-issue-11335&quot;</li>\n<li>See full diff in <a href=\"https://github.com/webpack/webpack/compare/v5.69.0...v5.69.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.69.0&new-version=5.69.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-17T20:59:05Z",
          "tree_id": "ed458efc0c5610583668ed4d0a6ac54d59d3b7a2",
          "url": "https://github.com/boa-dev/boa/commit/4a33d20c7156ba5f6d6d99cea41fa3e959afbdf3"
        },
        "date": 1645133423332,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4490,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14965,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17233,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9986,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10647,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11578,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6729,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8940,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8443,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10711,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12592,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14123,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 157292,
            "range": "± 2443",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8116,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11848,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5956,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11645,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15107,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14875,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5882,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31051,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26700,
            "range": "± 423",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 739,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1448,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1695,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1126,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1135,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1375,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1239,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1182,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1344,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1322,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 950,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1400,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3288,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1237,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1525,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1038,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 757,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 791,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1198,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 468,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2548,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2516,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6026,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52585,
            "range": "± 639",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3258844,
            "range": "± 23937",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7467,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7772,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8157,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11666,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11574,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15339,
            "range": "± 225",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15184,
            "range": "± 294",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12148,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3807287,
            "range": "± 61419",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1611542,
            "range": "± 28269",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7253,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8620,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6215,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6376,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8305,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10428,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2397,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1754031,
            "range": "± 13418",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1620593,
            "range": "± 12482",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "e80028355217e498008c0b9b27f8be5b0d737bab",
          "message": "Bump benchmark-action/github-action-benchmark from 1.12.0 to 1.13.0 (#1845)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.12.0 to 1.13.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.13.0</h2>\n<p>Feat: Updated urls to support GHES (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/104\">#104</a>)\nFeat: Add support for BenchmarkDotNet (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/109\">#109</a>)\nChore: Bump node-fetch from 2.6.6 to 2.6.7 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/107\">#107</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.13.0\">v1.13.0</a> - 17 Feb 2022</h1>\n<ul>\n<li><strong>Feat:</strong> Updated urls to support GHES (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/104\">#104</a>)</li>\n<li><strong>Feat:</strong> Add support for BenchmarkDotNet (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/109\">#109</a>)</li>\n<li><strong>Chore</strong> Bump node-fetch from 2.6.6 to 2.6.7 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/107\">#107</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/3d3bca03e83647895ef4f911fa57de3c7a391aaf\"><code>3d3bca0</code></a> v1.13.0</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.12.0...v1.13.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.12.0&new-version=1.13.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-18T19:45:46Z",
          "tree_id": "012c9fbf1b6cc53095c17c4e280622195707688e",
          "url": "https://github.com/boa-dev/boa/commit/e80028355217e498008c0b9b27f8be5b0d737bab"
        },
        "date": 1645215672979,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 391,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4742,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15722,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18052,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10366,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10961,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11782,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6983,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9392,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8913,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11209,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13221,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14869,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 156955,
            "range": "± 3302",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8498,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11881,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6237,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12068,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15310,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15305,
            "range": "± 365",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6188,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31368,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27732,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 784,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1487,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1705,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1128,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1146,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1367,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1228,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1214,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1361,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1341,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 945,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1338,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3208,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1244,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1505,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 994,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 733,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 775,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1195,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 473,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2532,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2476,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5955,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52047,
            "range": "± 889",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3178544,
            "range": "± 58912",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7408,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7822,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8072,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11386,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11584,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15204,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15382,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12205,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3773288,
            "range": "± 110842",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1595667,
            "range": "± 31542",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 7192,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 8533,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6281,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6364,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 8232,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10327,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2336,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1709198,
            "range": "± 29746",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1604879,
            "range": "± 28508",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "29cd909f88d9bcab59eedda95639756a45235d70",
          "message": "Refactor the environment for runtime performance (#1829)\n\nThis is an attempt to refactor the environments to be more performant at runtime. The idea is, to shift the dynamic hashmap environment lookups from runtime to compile time.\r\n\r\nCurrently the environments hold hashmaps that contain binding identifiers, values and additional information that is needed to identify some errors. Because bindings in outer environments are accessible from inner environments, this can lead to a traversal through all environments (in the worst case to the global environment).\r\n\r\nThis change to the environment structure pushes most of the work that is needed to access bindings to the compile time. At compile time, environments and bindings in the environments are being assigned indices. These indices are then stored instead of the `Sym` that is currently used to access bindings. At runtime, the indices are used to access bindings in a fixed size `Vec` per environment. This brings multiple benefits:\r\n - No hashmap access needed at runtime\r\n - The number of bindings per environment is known at compile time. Environments only need a single allocation, as their size is constant.\r\n - Potential for optimizations with `unsafe` https://doc.rust-lang.org/std/vec/struct.Vec.html#method.get_unchecked\r\n\r\nAdditionally, this changes the global object to have it's bindings directly stored on the `Realm`. This should reduce some overhead from access trough gc objects and makes some optimizations for the global object possible.\r\n\r\nThe benchmarks look not that great on the first sight. But if you look closer, I think it is apparent, that this is a positive change. The difference is most apparent on Mini and Clean as they are longer (still not near any real life js but less specific that most other benchmarks):\r\n\r\n| Test | Base         | PR               | % |\r\n|------|--------------|------------------|---|\r\n| Clean js (Compiler) | **1929.1±5.37ns** | 4.1±0.02µs | **+112.53%** |\r\n| Clean js (Execution) | 1487.4±7.50µs | **987.3±3.78µs** | **-33.62%** |\r\n\r\nThe compile time is up in all benchmarks, as expected. The percentage is huge, but if we look at the real numbers, we can see that this is an issue of orders of magnitude. While compile is up `112.53%`, the real change is `~+2µs`. Execution is only down `33.62%`, but the real time changed by `~-500µs`.\n\nCo-authored-by: Iban Eguia <razican@protonmail.ch>",
          "timestamp": "2022-02-19T18:45:08Z",
          "tree_id": "64f787fe6eb9f5647fe26cacff5e7b08d55c7641",
          "url": "https://github.com/boa-dev/boa/commit/29cd909f88d9bcab59eedda95639756a45235d70"
        },
        "date": 1645298220591,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 228,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3750,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12267,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14137,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8152,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8687,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9294,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5558,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7458,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7092,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8812,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10491,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11922,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 128270,
            "range": "± 1656",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6677,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9908,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5092,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9820,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12574,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12441,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5052,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25965,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22665,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 730,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1602,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1920,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1176,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1151,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1334,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1157,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1146,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1365,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1340,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1055,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1522,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3040,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1397,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1746,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1106,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 866,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 903,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1201,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 403,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2852,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2752,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4296,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37025,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2412479,
            "range": "± 1560",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5575,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5804,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6211,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8610,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8554,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11331,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11338,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9357,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2813613,
            "range": "± 3963",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1207246,
            "range": "± 5268",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4913,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5351,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4452,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3783,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4890,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6479,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1892,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 960347,
            "range": "± 4043",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 885926,
            "range": "± 3857",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "30553356+y21@users.noreply.github.com",
            "name": "Timo",
            "username": "y21"
          },
          "committer": {
            "email": "30553356+y21@users.noreply.github.com",
            "name": "Timo",
            "username": "y21"
          },
          "distinct": false,
          "id": "fabbf15dd3cd76495b3bd2ada9323becbcfe5832",
          "message": "Handle allocation errors (#1850)\n\nFixes #1847 by wrapping the `std::alloc::alloc()` call in `try_alloc()`, which checks that the returned pointer is non-null and handles allocation errors that way. It will now abort the process instead of executing UB in the error path",
          "timestamp": "2022-02-20T15:36:07Z",
          "tree_id": "12c7eefb4974383e04ffb79adfa40fb9460fd037",
          "url": "https://github.com/boa-dev/boa/commit/fabbf15dd3cd76495b3bd2ada9323becbcfe5832"
        },
        "date": 1645373206173,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 272,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4313,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13605,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15800,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9052,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9700,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10454,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6254,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8222,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7954,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9940,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11765,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13107,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 119967,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6466,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9395,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4879,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9681,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12316,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12154,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4842,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24929,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21943,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 730,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1614,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1916,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1159,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1163,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1352,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1136,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1154,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1344,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1346,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1053,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1493,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2954,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1364,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1777,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1082,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 863,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 902,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1215,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 405,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2853,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2776,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4235,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38134,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2412740,
            "range": "± 3174",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5511,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5813,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6157,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8124,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8084,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10821,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10839,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9161,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2850786,
            "range": "± 4386",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1204333,
            "range": "± 4275",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4844,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5389,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4368,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3844,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4917,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6680,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1796,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 980943,
            "range": "± 3653",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 909147,
            "range": "± 3648",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "46f96d4bea3e2f16c07db5e6cb51785bc6e321d1",
          "message": "Fix wasm use outside browsers (#1846)\n\nThis Pull Request fixes/closes #1670.\r\n\r\nIt changes the following:\r\n\r\n- Removes the \"js\" feature by default from getrandom for wasm (still there for boa_wasm)\r\n- Updates dependencies\r\n\r\nNote that this change was introduced in #1521, after #1475. We must make sure that the issue doesn't come back.",
          "timestamp": "2022-02-20T21:54:15Z",
          "tree_id": "8ed27d0402c3f2fe02888efdf3f6fb4c6e969eaf",
          "url": "https://github.com/boa-dev/boa/commit/46f96d4bea3e2f16c07db5e6cb51785bc6e321d1"
        },
        "date": 1645396444024,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 351,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4416,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14703,
            "range": "± 343",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17084,
            "range": "± 506",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9459,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10354,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10942,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6456,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8882,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8536,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10719,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12398,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13292,
            "range": "± 724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142021,
            "range": "± 6084",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7494,
            "range": "± 416",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10848,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5318,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11587,
            "range": "± 431",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14782,
            "range": "± 582",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14601,
            "range": "± 640",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5848,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30075,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26968,
            "range": "± 829",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 932,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1991,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2419,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1479,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1534,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1687,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1490,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1482,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1795,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1723,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1338,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1945,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3620,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1746,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2255,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1378,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1089,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1427,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 542,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3571,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3609,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5395,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46573,
            "range": "± 1647",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 3075501,
            "range": "± 86123",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7136,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7429,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8036,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11225,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11428,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14470,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14081,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11855,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3655615,
            "range": "± 97635",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1553194,
            "range": "± 72335",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6360,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6862,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5334,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4738,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6132,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8205,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2270,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1259056,
            "range": "± 27430",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1171689,
            "range": "± 14628",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "1d6e14763bb3fb780828ad9f265c7c60285b36d2",
          "message": "Refactor mapped `Arguments` object (#1849)\n\nThis refactors the representation of the `[[ParameterMap]]` internal slot on the `Arguments` exotic object to be faster at runtime.\r\n\r\nPreviously `[[ParameterMap]]` was a `JsObject` like the spec describes. This can be pretty slow a runtime, because the argument getters and setters must be represented as function objects on the `[[ParameterMap]]` object. In addition to the time spend on creation and calling of those functions, every getter/setter needs a cloned gc reference to the function environment to access the bindings. This adds to the gc overhead.\r\n\r\nThe spec states that the `[[ParameterMap]]` internal slot doesn't have to be a `JsObject`. See NOTE 3 here: https://tc39.es/ecma262/#sec-arguments-exotic-objects\r\nLeveraging this freedom, we can use a more optimized representation, that avoids any `JsObject` usage and only needs one clone of the function environment.",
          "timestamp": "2022-02-21T11:52:01Z",
          "tree_id": "a91ee338143160be89d43cddbf8229291c2764f4",
          "url": "https://github.com/boa-dev/boa/commit/1d6e14763bb3fb780828ad9f265c7c60285b36d2"
        },
        "date": 1645446302988,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4241,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13516,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15857,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9026,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9706,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10378,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6318,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8316,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8007,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9974,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11791,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13060,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135810,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7331,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10652,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5528,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11018,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14038,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13762,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5429,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28406,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24870,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 813,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1814,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2168,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1291,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1313,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1502,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1322,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1301,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1592,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1566,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1190,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1734,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3590,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1529,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2008,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1196,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 989,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1065,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1388,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 467,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3223,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3121,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4502,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41898,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1775831,
            "range": "± 2917",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6125,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6347,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6722,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9583,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9541,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12515,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12539,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10274,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3113604,
            "range": "± 4382",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1341924,
            "range": "± 2250",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5325,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5838,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4787,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4377,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5646,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7363,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1991,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1073986,
            "range": "± 6903",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 992559,
            "range": "± 6544",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "1d2851465ff908bc29b1f62feb00eb1497b05fd1",
          "message": "Add assertion to check that a break label is identified at compile-time (#1852)\n\nThis PR changes the following:\r\n\r\n- Adds a check at compile time for the existence of a break label (this should be a syntax error in the future; refactor from panics to results in compile should be a separate PR)\r\n- Adds a test for break label existence in boa/tests\r\n\r\n262 misses some fairly important JS parity issues and not performing this check eagerly can lead to other more severe issues during VM execution.",
          "timestamp": "2022-02-21T15:50:29Z",
          "tree_id": "74b8e101b427b2eb6066cca3e56064d186e346a1",
          "url": "https://github.com/boa-dev/boa/commit/1d2851465ff908bc29b1f62feb00eb1497b05fd1"
        },
        "date": 1645460421749,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 272,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4559,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14709,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16952,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9723,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10407,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11140,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6724,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8917,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8548,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10709,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12548,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14079,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145749,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8001,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11696,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5985,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11897,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15033,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14767,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5665,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30587,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26515,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 865,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1830,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2200,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1293,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1322,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1521,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1344,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1316,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1528,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1542,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1180,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1721,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3414,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1550,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2036,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1207,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 982,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1027,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 466,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3259,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3173,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4494,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42287,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1786690,
            "range": "± 11285",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6016,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6287,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6716,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8970,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9015,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11943,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12095,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10229,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3025401,
            "range": "± 4807",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1324411,
            "range": "± 3571",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5257,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5806,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4726,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4438,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5668,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7479,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2018,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1078728,
            "range": "± 10589",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995676,
            "range": "± 5465",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "committer": {
            "email": "aaronmunstersbxl@gmail.com",
            "name": "Aäron Munsters",
            "username": "aaronmunsters"
          },
          "distinct": false,
          "id": "517c6724c9d674bdb5b3781a1117662222c26f56",
          "message": "Correct reference error message (#1855)\n\nThis Pull Request fixes/closes the incorrect message thrown for the following code:\r\n\r\n```javascript\r\n\"use strict\";\r\nfoo = \"bar\";\r\n```\r\n\r\nWhich would throw the following before the change (incorrect):\r\n`Uncaught \"ReferenceError\": \"binding already exists: foo\"`\r\n\r\nAnd would throw the following after the change (correct):\r\n`Uncaught \"ReferenceError\": \"assignment to undeclared variable foo\"`",
          "timestamp": "2022-02-21T20:50:38Z",
          "tree_id": "034f6d49a8eb61f9351465499b4e3386b53e633f",
          "url": "https://github.com/boa-dev/boa/commit/517c6724c9d674bdb5b3781a1117662222c26f56"
        },
        "date": 1645478563841,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4267,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13687,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15799,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9158,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9775,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10633,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6235,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8259,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7931,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9941,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11790,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13325,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 136850,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7425,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10817,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5572,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10998,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13937,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13774,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5477,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28419,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24880,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 848,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1841,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2194,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1308,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1311,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1539,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1298,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1318,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1524,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1560,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1201,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1734,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3401,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1557,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2034,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1239,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 980,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1022,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1388,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3238,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3143,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4512,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42034,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1790149,
            "range": "± 3139",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6085,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6343,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6726,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8986,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8964,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12030,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12078,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10224,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3022934,
            "range": "± 4984",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1315861,
            "range": "± 4040",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5270,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5841,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4721,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4474,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5648,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7452,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2012,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1081938,
            "range": "± 5452",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1002552,
            "range": "± 12071",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "2c6acebe6cbf20356eae67840830fb78bd90ec74",
          "message": "Bump test262 from `281c781` to `18ce639` (#1857)\n\nBumps [test262](https://github.com/tc39/test262) from `281c781` to `18ce639`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/18ce639a4c4768de337fa30b83bbb6de02b0e1a5\"><code>18ce639</code></a> Port tests for PlainTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/1fe9bd3951b612aaa91342e3771bcbfef8c7affd\"><code>1fe9bd3</code></a> Add a basic test for PlainDateTime#toPlainTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/615a2eb9a16970ef200f93335cf34e41f8568b53\"><code>615a2eb</code></a> Fix tests for private reference with logical assignment</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ec39db5877853f6c8703156af2530730bfdf59d5\"><code>ec39db5</code></a> Test array grouping Symbol.unscopables values</li>\n<li><a href=\"https://github.com/tc39/test262/commit/1b1097dbf6e93fb17b5a8156736563370ad4700e\"><code>1b1097d</code></a> Add tests for compound assignment to private reference</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0b0fbdb04b2706c9a6fd83abe2b2ab2d38ba4c78\"><code>0b0fbdb</code></a> Fix path example in generated test instructions</li>\n<li><a href=\"https://github.com/tc39/test262/commit/08937278f1b5b6e9ac58885a47f84bfb7535a542\"><code>0893727</code></a> Add .case and .template files to .editorconfig</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0370240141c112379911a64983329ff6c6bc541a\"><code>0370240</code></a> Port tests for PlainTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8851f084b6c86a52101081d7d946faedca2e6c82\"><code>8851f08</code></a> Use ECMAScript 6</li>\n<li><a href=\"https://github.com/tc39/test262/commit/df873eed1a717bb59ac8b40f20cf23f19bafb429\"><code>df873ee</code></a> Port tests for PlainYearMonth#{add,subtract}.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/281c781ee4cb66a2e3ad6a26204a6d3f842947d6...18ce639a4c4768de337fa30b83bbb6de02b0e1a5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-21T23:09:45Z",
          "tree_id": "1a847778963476945998fe2304485a3ca650b4f5",
          "url": "https://github.com/boa-dev/boa/commit/2c6acebe6cbf20356eae67840830fb78bd90ec74"
        },
        "date": 1645486931541,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 310,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4482,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15014,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17177,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10006,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10445,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11247,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6788,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8949,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8618,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10807,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12848,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14234,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153632,
            "range": "± 3003",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8085,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12096,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5996,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11944,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15303,
            "range": "± 797",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15275,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6058,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30688,
            "range": "± 574",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27231,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 982,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2134,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2500,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1517,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1561,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1790,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1586,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1561,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1825,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1779,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1378,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1936,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3805,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1770,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2336,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1415,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1021,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1072,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1453,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 505,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3662,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3572,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5117,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49380,
            "range": "± 719",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2051938,
            "range": "± 38914",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6986,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7357,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7677,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10436,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10383,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13944,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13901,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11754,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3571600,
            "range": "± 53732",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1558575,
            "range": "± 23394",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6078,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6711,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5429,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5182,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6501,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8731,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2333,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1247142,
            "range": "± 22917",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1157556,
            "range": "± 19887",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "0a2c60a9aafae7d906021e051c5d623ce4716dc5",
          "message": "Fixed dependabot for submodule (#1856)\n\nThis Pull Request fixes dependabot updates for the Test262 submodule.",
          "timestamp": "2022-02-22T11:57:47Z",
          "tree_id": "1a847778963476945998fe2304485a3ca650b4f5",
          "url": "https://github.com/boa-dev/boa/commit/0a2c60a9aafae7d906021e051c5d623ce4716dc5"
        },
        "date": 1645532804069,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 263,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4255,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13723,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15869,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9261,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9966,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10620,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6341,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8363,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8062,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10016,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11845,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13225,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 136266,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7441,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10837,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5554,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11044,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14065,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13894,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5532,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28577,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25078,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 830,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1858,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2152,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1314,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1330,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1530,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1305,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1312,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1521,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1520,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1178,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1705,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3299,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1521,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2003,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1224,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 970,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1045,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1367,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 448,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3250,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3118,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4434,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42597,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1741298,
            "range": "± 5442",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6006,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6169,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6619,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8878,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9029,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11860,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11866,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10031,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3070118,
            "range": "± 3917",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339414,
            "range": "± 4594",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5157,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5698,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4611,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4402,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5633,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7247,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1081891,
            "range": "± 8617",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 994665,
            "range": "± 4262",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "8c92a8fa25c1339b639a5acc5c3133ae8df670a2",
          "message": "Added conversions from and to serde_json's Value type (#1851)\n\nThis Pull Request closes #1693.\r\n\r\nIt changes the following:\r\n\r\n- It adds a fallible conversion from `serde_json::Value` to `JsValue`, which requires a context.\r\n- It adds a fallible conversion from `JsValue` to `serde_json::Value`, which requires a context.\r\n- Added examples to the documentation of both methods.\r\n- Removed some duplicate and non-needed code that I found while doing this.\r\n\n\nCo-authored-by: RageKnify <RageKnify@gmail.com>",
          "timestamp": "2022-02-22T16:10:32Z",
          "tree_id": "3ee5df1b76113f9aca0c2e9049ccfd72572f0d26",
          "url": "https://github.com/boa-dev/boa/commit/8c92a8fa25c1339b639a5acc5c3133ae8df670a2"
        },
        "date": 1645548176026,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4612,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14605,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17081,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10068,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10776,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11564,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7072,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9165,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8932,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10901,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12910,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14258,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143561,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8083,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11598,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6137,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11603,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14963,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14578,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5713,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30468,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26425,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 875,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2018,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2372,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1370,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1397,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1669,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1332,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1363,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1575,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1587,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1276,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1862,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3429,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1634,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2144,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1277,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 990,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1059,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1442,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 442,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3504,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3448,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4423,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39286,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1751227,
            "range": "± 5173",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6167,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6192,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6641,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9155,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9181,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12345,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12451,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10618,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3048529,
            "range": "± 4764",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1334803,
            "range": "± 6024",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5478,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5946,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4788,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4327,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5579,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7467,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1803,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1051902,
            "range": "± 9003",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 967745,
            "range": "± 7531",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "8ffae9040084a45f7269746f8fd25291dcb078d9",
          "message": "Bump boa-dev/criterion-compare-action from 3.1.0 to 3.2.0 (#1862)\n\nBumps [boa-dev/criterion-compare-action](https://github.com/boa-dev/criterion-compare-action) from 3.1.0 to 3.2.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/boa-dev/criterion-compare-action/releases\">boa-dev/criterion-compare-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.0</h2>\n<p>This release adds support for the <code>--no-default-features</code> tag.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/24774f5bb90597caef8f6c68ae3f910307c9c7a6\"><code>24774f5</code></a> Updated release version (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/37\">#37</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/719795ca4a5b3fe89b9b2317b1e55b993b2f4acb\"><code>719795c</code></a> Bump <code>@​vercel/ncc</code> from 0.33.1 to 0.33.3 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/36\">#36</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/111210b1895f6d4835107623b842e0b36dc465b7\"><code>111210b</code></a> Added dependabot PRs (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/35\">#35</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/28c68fc49b7ab9ac105113ae491f0047b782728c\"><code>28c68fc</code></a> Add workflow to check if generated code is correct (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/34\">#34</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/b96223f167da8f78c37ee9a88e378f7eeba0d6d4\"><code>b96223f</code></a> Add <code>--no-default-features</code> option (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/33\">#33</a>)</li>\n<li>See full diff in <a href=\"https://github.com/boa-dev/criterion-compare-action/compare/v3.1.0...v3.2.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=boa-dev/criterion-compare-action&package-manager=github_actions&previous-version=3.1.0&new-version=3.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-23T09:41:45Z",
          "tree_id": "192987f58e0b90d10e53a20f8c3499add67cc129",
          "url": "https://github.com/boa-dev/boa/commit/8ffae9040084a45f7269746f8fd25291dcb078d9"
        },
        "date": 1645611067191,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 253,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4696,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14723,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16991,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10007,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10661,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11345,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7054,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8899,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8736,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10767,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12760,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14238,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143069,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8015,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11425,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5993,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11719,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15076,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14590,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5697,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30352,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26351,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 867,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1999,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2371,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1369,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1387,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1657,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1392,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1401,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1600,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1586,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1222,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1916,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3400,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2128,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1252,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1006,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1061,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1460,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 433,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3484,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3391,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4430,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39272,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1769676,
            "range": "± 5026",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6028,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6181,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6607,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9188,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9215,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12396,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12309,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10362,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3058130,
            "range": "± 23978",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1337634,
            "range": "± 7802",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5346,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5881,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4766,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4368,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5554,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7396,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1815,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1042103,
            "range": "± 6169",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 960666,
            "range": "± 4694",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d07945ddf36ecfcb05dc5f5a569efad45e0f6547",
          "message": "Bump getrandom from 0.2.4 to 0.2.5 (#1863)\n\nBumps [getrandom](https://github.com/rust-random/getrandom) from 0.2.4 to 0.2.5.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/getrandom/blob/master/CHANGELOG.md\">getrandom's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.2.5] - 2022-02-22</h2>\n<h3>Added</h3>\n<ul>\n<li>ESP-IDF targets (<code>*‑espidf</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/245\">#245</a></li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>Webpack warning caused by dynamic require <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/234\">#234</a></li>\n<li>Error checking on iOS for <code>SecRandomCopyBytes</code> <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/244\">#244</a></li>\n</ul>\n<p><a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/234\">#234</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/234\">rust-random/getrandom#234</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/244\">#244</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/244\">rust-random/getrandom#244</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/245\">#245</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/245\">rust-random/getrandom#245</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/cd3a987b9b2070925f49aaffdf709fa6fbf276ab\"><code>cd3a987</code></a> Release v0.2.5 (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/247\">#247</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/cf02327ac9d93ef46435c86214abd708c540f7d8\"><code>cf02327</code></a> Enable support for espidf (esp32 family of microcontrollers) (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/245\">#245</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/e1a9c9e74068d29bb4158d7282e398591da69811\"><code>e1a9c9e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/246\">#246</a> from rust-random/cross_fix</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/f49f083412457057ad18e2bbb79306f00801d8cf\"><code>f49f083</code></a> fix cross tests</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/21e03e8056cf60881e62184e68c38ad5b1c250a0\"><code>21e03e8</code></a> ios: Fix Error checking for SecRandomCopyBytes (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/244\">#244</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/e6e7dd604899cb075f99aa7f8e9f6fef6a17098f\"><code>e6e7dd6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/234\">#234</a> from mjhanninen/fix-webpack-dynamic-require-error</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/8fad7c5ab4014ac755e6f95fb2bdeef0f674faa2\"><code>8fad7c5</code></a> js: Add comment explaining why we do this hack</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/8372c165afcda48aade40750943eefcf12a483f6\"><code>8372c16</code></a> Fix Webpack warning caused by dynamic require</li>\n<li>See full diff in <a href=\"https://github.com/rust-random/getrandom/compare/v0.2.4...v0.2.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=getrandom&package-manager=cargo&previous-version=0.2.4&new-version=0.2.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-23T10:23:57Z",
          "tree_id": "74a28d66e7cb1c43cabd0b2a2cfb35f652f8f7ac",
          "url": "https://github.com/boa-dev/boa/commit/d07945ddf36ecfcb05dc5f5a569efad45e0f6547"
        },
        "date": 1645613977327,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4209,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13566,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15807,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9060,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9707,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10412,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6221,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8310,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7934,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10007,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11696,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13053,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135244,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7341,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10649,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5475,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10921,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13935,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13692,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4702,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24175,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21104,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 693,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1605,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2218,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1119,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1100,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1299,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1095,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1104,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1327,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1281,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1006,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1728,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2843,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1296,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1688,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1037,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 816,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 881,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1154,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 370,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3242,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2661,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3796,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 35677,
            "range": "± 661",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1517427,
            "range": "± 21172",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5339,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5475,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5809,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7748,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8964,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12174,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10380,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8871,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2642343,
            "range": "± 28314",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1164855,
            "range": "± 18631",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5225,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4926,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4699,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3787,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4828,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7543,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1980,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 939400,
            "range": "± 12844",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 862569,
            "range": "± 12177",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "2c19c6a4b5adab95e7286bbc9a1a9d9a7ef7e62c",
          "message": "Correct pop_on_return behaviour (#1853)\n\nThis PR changes the following:\r\n\r\n- Updates the value of `pop_on_return` after a catch as to prevent VM stack corruption\r\n- Adds two test cases which demonstrate the issue and demonstrate that it has been fixed\r\n\r\nI am unsure if it is possible to abuse the patch provided; one would need to catch from within an array initialisation without calling into another frame (e.g., with a lambda), which I don't think is possible.",
          "timestamp": "2022-02-23T10:37:57Z",
          "tree_id": "25a31393a6d03af5a7873376cb70c05a49075fba",
          "url": "https://github.com/boa-dev/boa/commit/2c19c6a4b5adab95e7286bbc9a1a9d9a7ef7e62c"
        },
        "date": 1645614541285,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 260,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4183,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13477,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15702,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9023,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9707,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10471,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6252,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8215,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7931,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9901,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11723,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12965,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 135369,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7360,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10628,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5436,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10910,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13860,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13605,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5470,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28127,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24686,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 839,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1896,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2283,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1344,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1342,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1542,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1332,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1320,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1559,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1579,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1219,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1819,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3321,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1595,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2093,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1273,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 960,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1039,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1381,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 441,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3302,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3217,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4681,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42864,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1854329,
            "range": "± 7705",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6431,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6620,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7031,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9248,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9248,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12563,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12606,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10852,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3118369,
            "range": "± 4199",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1392065,
            "range": "± 4445",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5494,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6030,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4929,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4819,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6082,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8019,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2021,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1132977,
            "range": "± 8189",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1039994,
            "range": "± 6153",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "9dda8d3eaef4a2d8e90a9ceb4857a3c7f2de084a",
          "message": "Toggleable `JsValue` internals displaying (#1865)\n\nThis PR makes `JsValue` (object) only display owned properties, cleans up object printing. This can be toggled with `value.display().internals(true)`\r\n\r\n`>> ({x: 1, y: \"\"})`\r\n_Before:_\r\n<details>\r\n<pre>\r\n{\r\n   x: 1,\r\n   y: \"\",\r\n__proto__: {\r\nhasOwnProperty: {\r\n      length: 1,\r\n        name: \"hasOwnProperty\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\npropertyIsEnumerable: {\r\n      length: 1,\r\n        name: \"propertyIsEnumerable\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\ntoString: {\r\n      length: 0,\r\n        name: \"toString\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\n valueOf: {\r\n      length: 0,\r\n        name: \"valueOf\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\nisPrototypeOf: {\r\n      length: 1,\r\n        name: \"isPrototypeOf\",\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\nconstructor: {\r\n      create: {\r\n          length: 2,\r\n            name: \"create\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\nsetPrototypeOf: {\r\n          length: 2,\r\n            name: \"setPrototypeOf\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetPrototypeOf: {\r\n          length: 1,\r\n            name: \"getPrototypeOf\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ndefineProperty: {\r\n          length: 3,\r\n            name: \"defineProperty\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ndefineProperties: {\r\n          length: 2,\r\n            name: \"defineProperties\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      assign: {\r\n          length: 2,\r\n            name: \"assign\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n          is: {\r\n          length: 2,\r\n            name: \"is\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n        keys: {\r\n          length: 1,\r\n            name: \"keys\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      values: {\r\n          length: 1,\r\n            name: \"values\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n     entries: {\r\n          length: 1,\r\n            name: \"entries\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n        seal: {\r\n          length: 1,\r\n            name: \"seal\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n    isSealed: {\r\n          length: 1,\r\n            name: \"isSealed\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      freeze: {\r\n          length: 1,\r\n            name: \"freeze\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n    isFrozen: {\r\n          length: 1,\r\n            name: \"isFrozen\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\npreventExtensions: {\r\n          length: 1,\r\n            name: \"preventExtensions\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\nisExtensible: {\r\n          length: 1,\r\n            name: \"isExtensible\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertyDescriptor: {\r\n          length: 2,\r\n            name: \"getOwnPropertyDescriptor\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertyDescriptors: {\r\n          length: 1,\r\n            name: \"getOwnPropertyDescriptors\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertyNames: {\r\n          length: 1,\r\n            name: \"getOwnPropertyNames\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\ngetOwnPropertySymbols: {\r\n          length: 1,\r\n            name: \"getOwnPropertySymbols\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      hasOwn: {\r\n          length: 2,\r\n            name: \"hasOwn\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n fromEntries: {\r\n          length: 1,\r\n            name: \"fromEntries\",\r\n       __proto__: {\r\n                name: \"\",\r\n              length: 0,\r\n               apply: {\r\n                  length: 1,\r\n                    name: \"apply\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                bind: {\r\n                  length: 1,\r\n                    name: \"bind\",\r\n               __proto__: [Cycle]\r\n                    },\r\n                call: {\r\n                  length: 1,\r\n                    name: \"call\",\r\n               __proto__: [Cycle]\r\n                    },\r\n            toString: {\r\n                  length: 0,\r\n                    name: \"toString\",\r\n               __proto__: [Cycle]\r\n                    },\r\n         constructor: {\r\n                  length: 1,\r\n                    name: \"Function\",\r\n               prototype: [Cycle],\r\n               __proto__: [Cycle]\r\n                    },\r\nSymbol(Symbol.hasInstance): {\r\n                  length: 1,\r\n                    name: \"[Symbol.iterator]\",\r\n               __proto__: [Cycle]\r\n                    },\r\n           __proto__: [Cycle]\r\n                }\r\n            },\r\n      length: 1,\r\n        name: \"Object\",\r\n   prototype: [Cycle],\r\n   __proto__: {\r\n            name: \"\",\r\n          length: 0,\r\n           apply: {\r\n              length: 1,\r\n                name: \"apply\",\r\n           __proto__: [Cycle]\r\n                },\r\n            bind: {\r\n              length: 1,\r\n                name: \"bind\",\r\n           __proto__: [Cycle]\r\n                },\r\n            call: {\r\n              length: 1,\r\n                name: \"call\",\r\n           __proto__: [Cycle]\r\n                },\r\n        toString: {\r\n              length: 0,\r\n                name: \"toString\",\r\n           __proto__: [Cycle]\r\n                },\r\n     constructor: {\r\n              length: 1,\r\n                name: \"Function\",\r\n           prototype: [Cycle],\r\n           __proto__: [Cycle]\r\n                },\r\nSymbol(Symbol.hasInstance): {\r\n              length: 1,\r\n                name: \"[Symbol.iterator]\",\r\n           __proto__: [Cycle]\r\n                },\r\n       __proto__: [Cycle]\r\n            }\r\n        },\r\n__proto__: null\r\n    }\r\n}\r\n</pre>\r\n</details>\r\n\r\n_After:_\r\n```text\r\n{\r\n   x: 1,\r\n   y: \"\"\r\n}\r\n```",
          "timestamp": "2022-02-23T19:34:53Z",
          "tree_id": "db61d9d0e40ed8c2b32200172d1a2630bfcf4385",
          "url": "https://github.com/boa-dev/boa/commit/9dda8d3eaef4a2d8e90a9ceb4857a3c7f2de084a"
        },
        "date": 1645647232770,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 316,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4496,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15448,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17504,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9936,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10511,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11470,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6907,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9108,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8631,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10844,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13055,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14485,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 156973,
            "range": "± 3290",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8050,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11835,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5950,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12062,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15687,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15182,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6069,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31100,
            "range": "± 637",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27028,
            "range": "± 619",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 963,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2144,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2481,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1526,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1558,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1763,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1522,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1536,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1773,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1796,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1373,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1964,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3891,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1770,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2309,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1382,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1022,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1090,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1454,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 503,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3682,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3592,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5121,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49852,
            "range": "± 900",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2054374,
            "range": "± 29943",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7028,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7253,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7759,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10449,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10454,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13731,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13908,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11799,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3604044,
            "range": "± 54419",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1580461,
            "range": "± 23871",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6038,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6741,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5507,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5247,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6649,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8508,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2370,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1266186,
            "range": "± 30786",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1158677,
            "range": "± 22706",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "b5678f0b0c65a685a13d833e23fc2021495a9749",
          "message": "Removing internal deprecated functions (#1854)\n\nThis Pull Request is related to #577 .\r\n\r\nIt changes the following:\r\n- Remove `JsValue::set_field`\r\n- Remove `JsValue::set_property`\r\n- Remove almost all uses of `JsValue::get_field`\r\n- Use `.get_v()` instead of `get_field` according to spec in `serialize_json_property`\r\n- Remove `Array::new_array()`\r\n- Remove `Array::add_to_array_object()`",
          "timestamp": "2022-02-26T19:54:07Z",
          "tree_id": "da70b0d6042f6ea6bdddc248f97387fde8d2118a",
          "url": "https://github.com/boa-dev/boa/commit/b5678f0b0c65a685a13d833e23fc2021495a9749"
        },
        "date": 1645907524920,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 323,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4550,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15046,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17417,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9814,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10711,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11160,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6863,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9051,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8768,
            "range": "± 734",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10865,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12765,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14252,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149311,
            "range": "± 4824",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8174,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12110,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5961,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11950,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15977,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15577,
            "range": "± 454",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5686,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31460,
            "range": "± 1411",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27083,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1029,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2267,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2619,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1604,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1614,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1849,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1601,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1625,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1869,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1856,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1455,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2086,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4598,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1889,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2427,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1510,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1091,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1158,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1574,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 593,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3954,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3847,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5211,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49143,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2040076,
            "range": "± 3013",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7037,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7313,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7887,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10440,
            "range": "± 244",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10549,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13957,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14105,
            "range": "± 435",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11371,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3817802,
            "range": "± 101679",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1660054,
            "range": "± 55239",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6128,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6783,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5605,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5226,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6785,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8859,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2298,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1281007,
            "range": "± 11916",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1198831,
            "range": "± 90237",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f7fab0744c43e90f9a46f88c0852035af8a5ff5d",
          "message": "Bump git2 from 0.13.25 to 0.14.0 (#1869)\n\nBumps [git2](https://github.com/rust-lang/git2-rs) from 0.13.25 to 0.14.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/30f013875ec69e6c794392a41e3d8f364ea8ec5b\"><code>30f0138</code></a> Bump versions</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/760330973895a2072afa6b0ffaadd137c9150c6b\"><code>7603309</code></a> Update libgit2 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/527\">#527</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d70b64599a080ea91f6052cb234a4a485f5dcdff\"><code>d70b645</code></a> Make all callbacks optional in libgit2-sys</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d34e49cc120a08557d85134064352925845105fa\"><code>d34e49c</code></a> Remove unnecessary parentheses. (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/526\">#526</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/08114526f83fb64c1620161891a0339da3929b15\"><code>0811452</code></a> Add Repository::fetchhead_to_annotated_commit (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/524\">#524</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/666aeab3491526004b1f458914001ca9801bcb70\"><code>666aeab</code></a> Bump version numbers of crates</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/ecd56b00fb83114cff54fcdaf103aad22e31c59f\"><code>ecd56b0</code></a> Tie Patch lifetime to its input buffers (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/523\">#523</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/9071a87bad3f4ff96ce491f871b0cb1e0ab2549f\"><code>9071a87</code></a> Add <code>Branch::get_mut()</code> (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/522\">#522</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/850c9b96d5659f40ee31d1b3d130a4806c91ff61\"><code>850c9b9</code></a> Update the libgit2 submodule to v0.99.0 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/520\">#520</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/147c5b4f026f8fa53a8a5d79dcbd59012a585a95\"><code>147c5b4</code></a> Add examples (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/519\">#519</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/git2-rs/compare/0.13.25...git2-curl-0.14.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=git2&package-manager=cargo&previous-version=0.13.25&new-version=0.14.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-02-26T21:43:12Z",
          "tree_id": "d0bbff9dd5eb9acdcbdc9b8c51b48631d621fd7e",
          "url": "https://github.com/boa-dev/boa/commit/f7fab0744c43e90f9a46f88c0852035af8a5ff5d"
        },
        "date": 1645913861182,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 269,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4260,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13347,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15649,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8940,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9626,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10235,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6226,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8218,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7877,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9813,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11478,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12901,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129500,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7320,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10581,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5440,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10908,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14145,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13836,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5170,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28182,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24564,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 858,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1870,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2223,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1323,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1325,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1553,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1326,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1358,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1566,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1574,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1212,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1778,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3811,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1574,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2042,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1240,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 998,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1074,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1439,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 480,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3311,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3211,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4331,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41085,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1712985,
            "range": "± 4451",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5877,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6096,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6565,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8841,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8793,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11880,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11816,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9483,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3129849,
            "range": "± 6213",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1370850,
            "range": "± 3913",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5114,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5717,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4577,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4374,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5598,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7296,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1907,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1069290,
            "range": "± 6220",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 984266,
            "range": "± 4480",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "60e22947065bb87b733af4d20c812571699ca6ed",
          "message": "Implement generator execution (#1790)\n\nThis Pull Request fixes/closes #1559.\r\n\r\nIt changes the following:\r\n\r\n- Implement GeneratorFunction Objects\r\n- Implement Generator Objects\r\n- Implement generator execution in vm\r\n- Create `FormalParameterList` to remove duplicate checks on function parameters \r\n- Refactor  `MethodDefinition` on object literals",
          "timestamp": "2022-02-27T00:09:31Z",
          "tree_id": "533ec4ad34c94c23bfd6f52f3978933a0a286260",
          "url": "https://github.com/boa-dev/boa/commit/60e22947065bb87b733af4d20c812571699ca6ed"
        },
        "date": 1645922224903,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4199,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12461,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15411,
            "range": "± 1075",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8399,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8985,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9690,
            "range": "± 605",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5840,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7609,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7495,
            "range": "± 481",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9120,
            "range": "± 563",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10855,
            "range": "± 686",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12131,
            "range": "± 746",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129208,
            "range": "± 7849",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6912,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10169,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5150,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10274,
            "range": "± 591",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13149,
            "range": "± 1037",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12529,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5008,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 26124,
            "range": "± 1572",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22479,
            "range": "± 1026",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 968,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2039,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2675,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1659,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1675,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1720,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1513,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1483,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1744,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1739,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1421,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2152,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3681,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1738,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2265,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1419,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1124,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1130,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1740,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 586,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3662,
            "range": "± 207",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3734,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6043,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 44651,
            "range": "± 5321",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2392837,
            "range": "± 201897",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7812,
            "range": "± 451",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8182,
            "range": "± 2464",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 9332,
            "range": "± 1156",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10923,
            "range": "± 590",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11038,
            "range": "± 566",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14852,
            "range": "± 917",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15139,
            "range": "± 703",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11867,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3469034,
            "range": "± 138760",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1501075,
            "range": "± 78108",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6414,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6939,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5806,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5741,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7008,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9067,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2266,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1314538,
            "range": "± 76273",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1162962,
            "range": "± 68511",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "6b2ca309467af0531386e6cb0faf2f5eddf1ada2",
          "message": "Fix equality between objects and `undefined` or `null` (#1872)\n\nThis PR fixes equality between object and `null` or `undefined` (like `[] == null`), which was failing the test262 harness test [`compare-array-symbol.js`](https://github.com/tc39/test262/blob/18ce639a4c4768de337fa30b83bbb6de02b0e1a5/test/harness/compare-array-symbol.js).",
          "timestamp": "2022-02-27T17:01:28Z",
          "tree_id": "1a4b0d0b1ab6e58a99b826693c7843667d36651f",
          "url": "https://github.com/boa-dev/boa/commit/6b2ca309467af0531386e6cb0faf2f5eddf1ada2"
        },
        "date": 1645982989434,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 315,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4817,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15255,
            "range": "± 750",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18154,
            "range": "± 1126",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9957,
            "range": "± 520",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11170,
            "range": "± 885",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11655,
            "range": "± 612",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7142,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9290,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8834,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11230,
            "range": "± 393",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13226,
            "range": "± 980",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14661,
            "range": "± 678",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 157165,
            "range": "± 6340",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8366,
            "range": "± 287",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12253,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6428,
            "range": "± 367",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12018,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15918,
            "range": "± 709",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15741,
            "range": "± 651",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5966,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31558,
            "range": "± 1274",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27474,
            "range": "± 1150",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1195,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2512,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2803,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1718,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1781,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2027,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1783,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1776,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2049,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2038,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1640,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2212,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4628,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2065,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2622,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1626,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1256,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1330,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1747,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 641,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4347,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4156,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5527,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 48157,
            "range": "± 2635",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2144868,
            "range": "± 103976",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7545,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7680,
            "range": "± 359",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8025,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10697,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10741,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14773,
            "range": "± 613",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14494,
            "range": "± 531",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11410,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3540424,
            "range": "± 153720",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1542374,
            "range": "± 71896",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6234,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6828,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5836,
            "range": "± 447",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5575,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6810,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9456,
            "range": "± 892",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2329,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1247343,
            "range": "± 47112",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1108189,
            "range": "± 58134",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "ada4ca895fb3859025edeec3aad22d6b1036ebd5",
          "message": "Feature arrays with empty elements (#1870)\n\nThis PR adds support for arrays with empty elements e.g. `[\"\", false, , , ]`. Before we were filling the empty places with `undefined`, but this is wrong according to [spec](https://tc39.es/ecma262/#sec-runtime-semantics-arrayaccumulation) there shouldn't be undefined with a index at that place, instead only `length` is incremented. So `[,,,].length == 3` and operations like `[,,,,].indexOf(undefined) == -1`,  `[,,,,].lastIndexOf(undefined) == -1` etc.",
          "timestamp": "2022-02-27T17:08:52Z",
          "tree_id": "967ddba2f2c690161842389823d30d0d2be423ef",
          "url": "https://github.com/boa-dev/boa/commit/ada4ca895fb3859025edeec3aad22d6b1036ebd5"
        },
        "date": 1645983495085,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 349,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4371,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13867,
            "range": "± 347",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16467,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9170,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10166,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11254,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6528,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8451,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8743,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10640,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12276,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12743,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 126739,
            "range": "± 5895",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6864,
            "range": "± 301",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10337,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5211,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10626,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14627,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13978,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5002,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27974,
            "range": "± 1268",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 23865,
            "range": "± 1080",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 961,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2146,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2491,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1433,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1421,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1874,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1644,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1664,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1816,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1803,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1366,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2097,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4201,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1873,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2214,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1417,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1062,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1166,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1558,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 584,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3648,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3602,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4621,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50157,
            "range": "± 1051",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2005266,
            "range": "± 61601",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6938,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6606,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7134,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9771,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10020,
            "range": "± 570",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12901,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12878,
            "range": "± 517",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10220,
            "range": "± 487",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3329603,
            "range": "± 138000",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1486939,
            "range": "± 59719",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5551,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6560,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5383,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5051,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6473,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8810,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2309,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1301711,
            "range": "± 16457",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1187488,
            "range": "± 25251",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "1887b6aebba664072d0183394a9412eec86de121",
          "message": "Removing the panic in favour of an error result (#1874)\n\nThis Pull Request is related to #1873.\r\n\r\nIt changes the following:\r\n\r\n- Removes the panic in case a label is not found. I think this should be an early syntax error, but at least we shouldn't panic while we fix the issue with the labels.\r\n\r\nI think we should solve the issue with labeled statements for 0.15.",
          "timestamp": "2022-02-27T20:02:59Z",
          "tree_id": "fc7bdee150978283649b45d48389026cd7208a20",
          "url": "https://github.com/boa-dev/boa/commit/1887b6aebba664072d0183394a9412eec86de121"
        },
        "date": 1645993884474,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 269,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4309,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13654,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15954,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9017,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9813,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10354,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6369,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8321,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8109,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10011,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11659,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13197,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130030,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7418,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10740,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5538,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10918,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14185,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13796,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5186,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28357,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24661,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 900,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1932,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2253,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1390,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1388,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1572,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1367,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1372,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1583,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1591,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1270,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1826,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3662,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1604,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2082,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1282,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1091,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1454,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3348,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3242,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4407,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41666,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1764567,
            "range": "± 2197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6022,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6244,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6679,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9368,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9471,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12508,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12475,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9632,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3112580,
            "range": "± 24049",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1355420,
            "range": "± 3968",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5253,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5754,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4645,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4433,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5644,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7451,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1959,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1084928,
            "range": "± 7809",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 991350,
            "range": "± 36397",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "ec78e184f32032d80da704f6a72cae49f53cbabc",
          "message": "Removed reference counted pointers from `JsValue` variants (#1866)\n\nThis Pull Request fixes/closes #1864.\r\n\r\nIt changes the following:\r\n\r\n- Removed `JsBigInt` from `Const` nodes, using a boxed `BigInt` instead.\r\n- Modifies the `JsObject` variant so that it has a similar structure to other variants, where the internal structure is private.\r\n\r\nThe size of `JsValue` stays in 2 64-bit words (in a 64-bit system at least), and the size of `Const` also stays the same.\r\n\r\nI have noticed that we clone tokens too much in the parser, so I was thinking that we should implement a by-value getter for `kind()`. Something like `kind_unwrap()`.",
          "timestamp": "2022-02-27T20:11:38Z",
          "tree_id": "e91e2646fd7cc32c04929ea7b41c82797476a98e",
          "url": "https://github.com/boa-dev/boa/commit/ec78e184f32032d80da704f6a72cae49f53cbabc"
        },
        "date": 1645994740636,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4233,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13551,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15997,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9100,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9698,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10348,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6318,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8345,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8006,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9965,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11629,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13089,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129151,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7473,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10939,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5594,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11003,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14168,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13830,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5223,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28145,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24571,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 897,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1936,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2252,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1395,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1427,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1609,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1418,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1623,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1616,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1277,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1829,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3846,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1618,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2092,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1282,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1028,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1100,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1463,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 509,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3375,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3271,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4460,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42792,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1773217,
            "range": "± 28556",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6074,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6351,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6749,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8994,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9016,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12182,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12239,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9894,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3081764,
            "range": "± 5790",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1348746,
            "range": "± 3897",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5291,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5874,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4766,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4584,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5733,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7484,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1998,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1096405,
            "range": "± 10058",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1005648,
            "range": "± 9984",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "73bcd4264078673f736f6b2557e0e38105de1b44",
          "message": "Make `Object.getOwnPropertyDescriptors` spec compliant (#1876)\n\nIt changes the following:\r\n- Fix `Object.getOwnPropertyDescriptors()` to comply to spec",
          "timestamp": "2022-02-28T17:59:30Z",
          "tree_id": "19e3931b424c648a7a568ec06ad92b7ed8f1b169",
          "url": "https://github.com/boa-dev/boa/commit/73bcd4264078673f736f6b2557e0e38105de1b44"
        },
        "date": 1646072885635,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 268,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4222,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13661,
            "range": "± 1313",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15122,
            "range": "± 1109",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8870,
            "range": "± 619",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10458,
            "range": "± 999",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11347,
            "range": "± 1111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5907,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8136,
            "range": "± 679",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7771,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9830,
            "range": "± 758",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11036,
            "range": "± 640",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12424,
            "range": "± 692",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137558,
            "range": "± 9976",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7110,
            "range": "± 498",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10739,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5338,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12891,
            "range": "± 988",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13562,
            "range": "± 1054",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14854,
            "range": "± 895",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5332,
            "range": "± 357",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34736,
            "range": "± 1568",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30487,
            "range": "± 1100",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1206,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2411,
            "range": "± 394",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3013,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1714,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1804,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1960,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1772,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1799,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1981,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1990,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1585,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2253,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4542,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2049,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2623,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1670,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1237,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1344,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1877,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 667,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4281,
            "range": "± 344",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4256,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5621,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50526,
            "range": "± 2080",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2143498,
            "range": "± 91613",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7465,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7597,
            "range": "± 349",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8478,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10855,
            "range": "± 548",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11023,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14691,
            "range": "± 574",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15440,
            "range": "± 884",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11620,
            "range": "± 491",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3558527,
            "range": "± 161418",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1534937,
            "range": "± 64840",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6526,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6946,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5694,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5368,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6730,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8801,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2323,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1218251,
            "range": "± 57886",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1032928,
            "range": "± 81091",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "4292c193faa25efa656b96a60c7926abed43eee0",
          "message": "Implement `Object.prototype.toLocaleString()` (#1875)\n\nIt changes the following:\r\n- Implement `Object.prototype.toLocaleString()`",
          "timestamp": "2022-02-28T21:10:56Z",
          "tree_id": "2b1699e6de2b14a1249b1dd2b85a544658a92449",
          "url": "https://github.com/boa-dev/boa/commit/4292c193faa25efa656b96a60c7926abed43eee0"
        },
        "date": 1646084623545,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 316,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4324,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14968,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17359,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9775,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10493,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11046,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6758,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8746,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8315,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10152,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12449,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14169,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148268,
            "range": "± 1955",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7972,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11956,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5961,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11579,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14862,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14665,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5492,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30971,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25678,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1033,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2260,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2555,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1655,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1586,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1893,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1646,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1642,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1902,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1909,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1498,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2075,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4507,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1944,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2458,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1535,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1101,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1166,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1602,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 610,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3859,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3765,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5290,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50831,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2043889,
            "range": "± 29373",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7169,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7204,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7774,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10534,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10552,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13971,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14254,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11075,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3553908,
            "range": "± 55806",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1581852,
            "range": "± 24262",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6074,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6838,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5515,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5298,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6666,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8564,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2267,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1281109,
            "range": "± 23291",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1170745,
            "range": "± 24907",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d7ed2fe5c91ccd15eca73a4bdebcffa50e4c6042",
          "message": "Bump git2 from 0.14.0 to 0.14.1 (#1878)\n\nBumps [git2](https://github.com/rust-lang/git2-rs) from 0.14.0 to 0.14.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d7757f170d098517a24a76a7982da3f897c0255b\"><code>d7757f1</code></a> Bump versions</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/a56acdc68af15153f04aad40b1eacdf74f744ef5\"><code>a56acdc</code></a> Fix dangling pointer in format_email.</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/f6e90a79f6521427a5067c1ca7a1c519bcbaebb6\"><code>f6e90a7</code></a> Add support for zlib-ng</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/c2a26133731d152f67a4fb11b35c4e139441e60c\"><code>c2a2613</code></a> Use cc 1.0.43 or later (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/608\">#608</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/97a855443f5678b6f71db59cfaf03b857ec38fac\"><code>97a8554</code></a> Make the calls to <code>crate::init()</code> consistent (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/604\">#604</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/a9d86f47021886147d46e2a8d9248f94edc45321\"><code>a9d86f4</code></a> Add bindings for <code>git_index_version()</code> and <code>git_index_set_version()</code> (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/597\">#597</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/892dc1a9a1c9b724533fa4802f7581b4b6b630da\"><code>892dc1a</code></a> Bump versions</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/e245130e5ae243059d0582b023a0649ece9cb647\"><code>e245130</code></a> Re-update libgit2 to master branch</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/c19cc75de917447825d18bba8d8d9f81bda07162\"><code>c19cc75</code></a> Depend on latest libgit2-sys</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/f89075b297679ec1c450993675c15b47a4478480\"><code>f89075b</code></a> Bump versions</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/git2-rs/compare/git2-curl-0.14.0...git2-curl-0.14.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=git2&package-manager=cargo&previous-version=0.14.0&new-version=0.14.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-01T12:10:37Z",
          "tree_id": "9080bc64c0e729abc0f1654523fb94f5a841d27b",
          "url": "https://github.com/boa-dev/boa/commit/d7ed2fe5c91ccd15eca73a4bdebcffa50e4c6042"
        },
        "date": 1646138799952,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 338,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5200,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15728,
            "range": "± 796",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18431,
            "range": "± 941",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10703,
            "range": "± 563",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11512,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11998,
            "range": "± 696",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7302,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9612,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9464,
            "range": "± 600",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11488,
            "range": "± 723",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13533,
            "range": "± 1198",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15153,
            "range": "± 961",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 158712,
            "range": "± 8736",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8800,
            "range": "± 477",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12633,
            "range": "± 894",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6381,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12879,
            "range": "± 1117",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16536,
            "range": "± 1189",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16879,
            "range": "± 794",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6364,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33156,
            "range": "± 2277",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29159,
            "range": "± 2076",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1241,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2509,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2964,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1796,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1797,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2099,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1856,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1810,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2039,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2078,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1691,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2349,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4649,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2104,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2718,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1744,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1306,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1353,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1796,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 685,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4359,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4237,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5839,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51842,
            "range": "± 2868",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2276727,
            "range": "± 139838",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7888,
            "range": "± 525",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7980,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8931,
            "range": "± 947",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11841,
            "range": "± 914",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11708,
            "range": "± 1357",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15762,
            "range": "± 1049",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15846,
            "range": "± 813",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12119,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3642272,
            "range": "± 205073",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1601249,
            "range": "± 176230",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6668,
            "range": "± 540",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7654,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6038,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5745,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7509,
            "range": "± 687",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9324,
            "range": "± 656",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2308,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1296171,
            "range": "± 71577",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1203337,
            "range": "± 70040",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "3fe7d0909601de31260bf7672d0c3a2f832e8189",
          "message": "Make `Error` and `%NativeError%` spec compliant (#1879)\n\nThis PR makes `Error` and `%NativeError%` spec compliant.\r\n\r\nIt changes the following:\r\n- Adds cause argument object.\r\n- Makes `message` non-enumerable.",
          "timestamp": "2022-03-01T18:15:56Z",
          "tree_id": "d2cb84298b3d92cc6842e9640847e6aad3b9fefa",
          "url": "https://github.com/boa-dev/boa/commit/3fe7d0909601de31260bf7672d0c3a2f832e8189"
        },
        "date": 1646160652695,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4235,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13365,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15762,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8967,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9620,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10269,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6301,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8234,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7936,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9813,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11582,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12965,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129482,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7287,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10585,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5469,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10902,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14064,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13715,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5245,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28055,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24404,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 929,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1928,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2254,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1366,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1405,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1583,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1398,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1394,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1622,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1629,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1263,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1836,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3915,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1611,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2093,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1259,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1023,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1087,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1453,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 509,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3351,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3218,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4491,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41638,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1724283,
            "range": "± 1742",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5989,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6319,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6805,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9445,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9443,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12469,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12614,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9775,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3146507,
            "range": "± 5223",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1380491,
            "range": "± 3751",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5237,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5746,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4667,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4480,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5742,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7610,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1912,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1080686,
            "range": "± 7342",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 996451,
            "range": "± 5257",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "6e3f93e632ebf69b3306ac59bf635d70711bee8b",
          "message": "Fix `Number.prototype.toString` when passing `undefined` as radix (#1877)\n\nThis PR fixes the bug when passing `undefined` as radix in `Number.prototype.toString()` which was throwing a range error, instead of setting the radix to `10`\r\n\r\n[spec](https://tc39.es/ecma262/#sec-number.prototype.tostring):\r\n> **Note**\r\n>\r\n> The optional radix should be an [integral Number](https://tc39.es/ecma262/#integral-number) value in the inclusive range 2𝔽 to 36𝔽. If radix is undefined then 10𝔽 is used as the value of radix.",
          "timestamp": "2022-03-01T19:30:42Z",
          "tree_id": "a8b858cad0ac92ac4eee29ec0f8a0174b1ec3be9",
          "url": "https://github.com/boa-dev/boa/commit/6e3f93e632ebf69b3306ac59bf635d70711bee8b"
        },
        "date": 1646164855864,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4203,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13443,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15775,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8941,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9593,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10267,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6256,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8165,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7908,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9828,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11532,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13006,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129021,
            "range": "± 297",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7322,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10578,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5438,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10780,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14031,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13719,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5223,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27972,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24458,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 903,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1943,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2260,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1407,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1434,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1642,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1420,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1426,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1617,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1629,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1271,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1824,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3940,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1619,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2118,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1315,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1034,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1119,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1477,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3403,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3274,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4415,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42543,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1750970,
            "range": "± 2032",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6000,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6340,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6723,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8943,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8970,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12064,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12014,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9692,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3147817,
            "range": "± 4122",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1384851,
            "range": "± 3594",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5253,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5734,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4690,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4519,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5763,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7524,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2000,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1097789,
            "range": "± 14818",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1010735,
            "range": "± 8160",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "936006+jasonwilliams@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "b2d3720b29738894cb55e670aee2e55ca3553070",
          "message": "Update release.yml\n\nThe casing needs updating on the Internal label",
          "timestamp": "2022-03-01T22:10:07Z",
          "tree_id": "71625a3adf85dbc6dd27da66f9dc7e121043bda3",
          "url": "https://github.com/boa-dev/boa/commit/b2d3720b29738894cb55e670aee2e55ca3553070"
        },
        "date": 1646173904335,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 311,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4334,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14159,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16865,
            "range": "± 846",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9695,
            "range": "± 399",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10123,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10658,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6496,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8524,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8366,
            "range": "± 507",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10246,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11997,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13945,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144724,
            "range": "± 7511",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7749,
            "range": "± 587",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11176,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5773,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11426,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14915,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14544,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5729,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29582,
            "range": "± 568",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26008,
            "range": "± 493",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1047,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2204,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2507,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1595,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1588,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1895,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1599,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1613,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1847,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1856,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1456,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2054,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4553,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1855,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2397,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1459,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1062,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1140,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1558,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 583,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3768,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3756,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5109,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49490,
            "range": "± 732",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2005787,
            "range": "± 31869",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6873,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7169,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7641,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10147,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10507,
            "range": "± 656",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13497,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13465,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11039,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3635255,
            "range": "± 67099",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1580734,
            "range": "± 24291",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5970,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6528,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5355,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5212,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6553,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8618,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2283,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1254327,
            "range": "± 21796",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1158019,
            "range": "± 19193",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "408e49e460e6b9f34208f55f901db244c5476e36",
          "message": "Cleanup vm stack on function return (#1880)\n\nThis cleans up the vm stack on a function return. This is needed because when errors are thrown, there may be still values on the stack that cannot be cleaned up via regular control flow. The change should have little performance impact, because the `Vec::truncate` function does not alter the capacity of the vector.",
          "timestamp": "2022-03-01T22:55:09Z",
          "tree_id": "341ef29d2888728891decfd8d2ab44b8c0974e9f",
          "url": "https://github.com/boa-dev/boa/commit/408e49e460e6b9f34208f55f901db244c5476e36"
        },
        "date": 1646177414655,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 300,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4163,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13802,
            "range": "± 802",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16271,
            "range": "± 935",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9100,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9745,
            "range": "± 591",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10525,
            "range": "± 506",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6038,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8029,
            "range": "± 514",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7790,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10004,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12414,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13656,
            "range": "± 464",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146216,
            "range": "± 3765",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7267,
            "range": "± 479",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11162,
            "range": "± 842",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5404,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11484,
            "range": "± 509",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13996,
            "range": "± 952",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13733,
            "range": "± 863",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5612,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29529,
            "range": "± 1252",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25409,
            "range": "± 1452",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 999,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2122,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2411,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1522,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1469,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1831,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1568,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1537,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1788,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1701,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1451,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1985,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4484,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1857,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2336,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1412,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1044,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1121,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1496,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 570,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3908,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3697,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4821,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 46166,
            "range": "± 2812",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1991836,
            "range": "± 93291",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6870,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6804,
            "range": "± 389",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7421,
            "range": "± 383",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10388,
            "range": "± 564",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10317,
            "range": "± 570",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13256,
            "range": "± 759",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13919,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10737,
            "range": "± 464",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3491321,
            "range": "± 242503",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1464080,
            "range": "± 77952",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5565,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6375,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5043,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5058,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6195,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8696,
            "range": "± 344",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2186,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1219247,
            "range": "± 75712",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1179277,
            "range": "± 39866",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "3c59905a1b73c75ee987ebeb02cc5545cd9504c2",
          "message": "`%NativeError%.[[prototype]]` should be `Error` constructor (#1883)\n\nBefore the `%NativeError%` objects (like `TypeError`, `ReferenceError`, etc) `[[prototype]]` field was set to `Function.prototype` but this is wrong it should be the `Error` constructor object itself.\r\n\r\nThis makes the  `%NativeError%`s 100% spec compliant :)\r\n(except `AggregateError` because its not implemented)",
          "timestamp": "2022-03-02T00:34:15Z",
          "tree_id": "3e213aaaa27ecaf511260c3f12fa037076160c02",
          "url": "https://github.com/boa-dev/boa/commit/3c59905a1b73c75ee987ebeb02cc5545cd9504c2"
        },
        "date": 1646183282947,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 271,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4223,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13360,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15541,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8854,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9506,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10147,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6221,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8075,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7915,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9715,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11382,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12883,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129747,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7364,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10693,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5522,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10733,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13760,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13529,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5194,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27931,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24435,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 902,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1939,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2272,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1395,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1415,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1382,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1643,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1615,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1257,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1794,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3875,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2064,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1099,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1460,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3352,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3211,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4430,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42181,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1768322,
            "range": "± 4575",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6081,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6452,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6756,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9013,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8946,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12199,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12205,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9665,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3095044,
            "range": "± 3961",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1357729,
            "range": "± 2793",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5290,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5886,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4710,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4515,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5830,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7878,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2007,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1100210,
            "range": "± 8615",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1013619,
            "range": "± 5491",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "7248ed1005519c08a54203b5803c68a1aa7e0f88",
          "message": "Make `StringToNumber` spec compliant (#1881)\n\nThis PR enables `StringToNumber()` to parse binary, octal and hexadecimal numbers.",
          "timestamp": "2022-03-02T00:48:19Z",
          "tree_id": "cad05d5796d2765e3bb72dea3f63e067d6d30af4",
          "url": "https://github.com/boa-dev/boa/commit/7248ed1005519c08a54203b5803c68a1aa7e0f88"
        },
        "date": 1646184279559,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 330,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4514,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15538,
            "range": "± 696",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18563,
            "range": "± 944",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10254,
            "range": "± 485",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11091,
            "range": "± 704",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11215,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6870,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9409,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8977,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11308,
            "range": "± 1368",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13393,
            "range": "± 665",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15094,
            "range": "± 790",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 158258,
            "range": "± 7890",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8534,
            "range": "± 630",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12554,
            "range": "± 654",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6179,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12449,
            "range": "± 632",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16637,
            "range": "± 1148",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16459,
            "range": "± 1132",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5858,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32611,
            "range": "± 1946",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28483,
            "range": "± 1475",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1141,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2450,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2779,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1722,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1767,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1888,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1671,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1652,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1902,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2046,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1575,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2272,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4948,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2039,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2711,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1613,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1135,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1215,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1722,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 628,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4121,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3991,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5749,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50222,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2067054,
            "range": "± 2562",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7818,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8192,
            "range": "± 1014",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8840,
            "range": "± 1495",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11809,
            "range": "± 985",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11835,
            "range": "± 528",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15884,
            "range": "± 1446",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16170,
            "range": "± 879",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12187,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 4033899,
            "range": "± 181347",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1777017,
            "range": "± 78778",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6817,
            "range": "± 820",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7360,
            "range": "± 552",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5917,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5642,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7184,
            "range": "± 599",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9755,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2463,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1411525,
            "range": "± 76849",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1290812,
            "range": "± 57152",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "fd889fd5d0dea8e139826a1b4cff06d610d1aeeb",
          "message": "Fix `PropertyKey` to `JsValue` conversion (#1886)\n\nWe store string `PropertyKey`s with two enums `String` and `Index` for performance reasons, but the spec does not differentiate between string and index property keys so before conversion to `JsValue` we have to convert to a string.\r\n\r\nThis was failing tests like `Reflect.ownKeys([true, \"\", 1])` because it was returning (integer numbers) `[1, 2, 3]` instead of `['1', '2', '3']`",
          "timestamp": "2022-03-02T11:24:13Z",
          "tree_id": "be1ab49fc1563b8102c7ad5fcf5243062f4b0479",
          "url": "https://github.com/boa-dev/boa/commit/fd889fd5d0dea8e139826a1b4cff06d610d1aeeb"
        },
        "date": 1646221888703,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4699,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14546,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16822,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9808,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10517,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11171,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6861,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8918,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8524,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10580,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12531,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14010,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138358,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7994,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11304,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6011,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11689,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15055,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14724,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5441,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30140,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26050,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 942,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2084,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2437,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1446,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1476,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1700,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1442,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1473,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1712,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1694,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1319,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1958,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3734,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1661,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2189,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1318,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1045,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1128,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1526,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 486,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3584,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3454,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4606,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38087,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1783301,
            "range": "± 3349",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6313,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6567,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6945,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9611,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9576,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12942,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12885,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10291,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2986838,
            "range": "± 7394",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1323652,
            "range": "± 4548",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5550,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6080,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5047,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4674,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5840,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8274,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1740,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1072872,
            "range": "± 5326",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995823,
            "range": "± 10468",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "00a19005e46a91eb95a2dd75b41a8f7a13df7684",
          "message": "Remove `toInteger` and document the `string` builtin (#1884)\n\nThe ECMAScript 2022 specification removes the `toInteger` method, and replaces it with `toIntegerOrInfinity`, which is arguably better for us since the `JsValue::toInteger` returns an `f64`, which is pretty confusing at times.\r\n\r\nThis pull request removes the `JsValue::to_integer` method, replaces all its calls by `JsValue::to_integer_or_infinity` or others per the spec and documents several methods from the `string` builtin.",
          "timestamp": "2022-03-02T22:07:23Z",
          "tree_id": "a6e0a0ab443889a7c154f0705b69ab620cd84e01",
          "url": "https://github.com/boa-dev/boa/commit/00a19005e46a91eb95a2dd75b41a8f7a13df7684"
        },
        "date": 1646260484504,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4548,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14351,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16825,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9680,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10305,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10987,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6692,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8679,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8328,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10351,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12297,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13825,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138371,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7937,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11427,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5956,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11366,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14687,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14429,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5541,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29854,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25798,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 931,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2112,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2418,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1448,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1472,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1726,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1448,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1477,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1683,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1649,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1275,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1983,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3699,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1694,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2218,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1369,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1052,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1113,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1490,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 486,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3677,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3540,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4708,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39099,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1765551,
            "range": "± 1643",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6078,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6502,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6876,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9410,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9406,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12651,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12642,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10160,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3098984,
            "range": "± 4688",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1354664,
            "range": "± 3535",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5356,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6008,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4905,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4636,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6082,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8127,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1785,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1070611,
            "range": "± 9009",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 985947,
            "range": "± 3554",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "a9a82a73819093f3a1dc595ed4ae28859cf3114d",
          "message": "Make iterator spec complaint (#1889)\n\nThis PR is also related to #577 \r\n\r\nChanges:\r\n- Implements `IteratorValue` (`IteratorResult::value()`)\r\n- Implements `IteratorComplete` (`IteratorResult::complete()`)\r\n- Implements `IteratorStep` (`IteratorRecord::step()`)\r\n- Makes  `IteratorNext` (`IteratorRecord::next()`) spec compliant\r\n- Deprecates/removes `JsValue::get_field()`.",
          "timestamp": "2022-03-03T02:12:20Z",
          "tree_id": "f46e0e8653d6e1c4ccb73c85c3bbdef32f5c198f",
          "url": "https://github.com/boa-dev/boa/commit/a9a82a73819093f3a1dc595ed4ae28859cf3114d"
        },
        "date": 1646275402931,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4257,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13323,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15751,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8990,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9629,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10298,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6271,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8203,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7928,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9799,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11499,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12991,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129763,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7261,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10535,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5427,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10985,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14197,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13828,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5205,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28112,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24624,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1896,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2218,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1349,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1359,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1596,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1389,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1364,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1583,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1572,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1236,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1807,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3905,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1618,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2051,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1015,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1096,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1445,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3369,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3233,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4432,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41945,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1748065,
            "range": "± 1529",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5983,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6290,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6710,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9444,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9423,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12609,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12759,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9720,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3228149,
            "range": "± 4274",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1399523,
            "range": "± 9536",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5290,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5753,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4693,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4582,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5884,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7392,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1964,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1096686,
            "range": "± 9949",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1009443,
            "range": "± 5227",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "fb8c5cfa341f1e670b4bd059d071df3f64e8b33c",
          "message": "Bump actions/checkout from 2.4.0 to 3 (#1885)\n\nBumps [actions/checkout](https://github.com/actions/checkout) from 2.4.0 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Update default runtime to node16</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n<h2>v2 (beta)</h2>\n<ul>\n<li>Improved fetch performance\n<ul>\n<li>The default behavior now fetches only the SHA being checked-out</li>\n</ul>\n</li>\n<li>Script authenticated git commands\n<ul>\n<li>Persists <code>with.token</code> in the local git config</li>\n<li>Enables your scripts to run authenticated git commands</li>\n<li>Post-job cleanup removes the token</li>\n<li>Coming soon: Opt out by setting <code>with.persist-credentials</code> to <code>false</code></li>\n</ul>\n</li>\n<li>Creates a local branch\n<ul>\n<li>No longer detached HEAD when checking out a branch</li>\n<li>A local branch is created with the corresponding upstream branch set</li>\n</ul>\n</li>\n<li>Improved layout</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/checkout/commit/a12a3943b4bdde767164f792f33f40b04645d846\"><code>a12a394</code></a> update readme for v3 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/708\">#708</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/8f9e05e482293f862823fcca12d9eddfb3723131\"><code>8f9e05e</code></a> Update to node 16 (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/689\">#689</a>)</li>\n<li><a href=\"https://github.com/actions/checkout/commit/230611dbd0eb52da1e1f4f7bc8bb0c3a339fc8b7\"><code>230611d</code></a> Change secret name for PAT to not start with GITHUB_ (<a href=\"https://github-redirect.dependabot.com/actions/checkout/issues/623\">#623</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2.4.0...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2.4.0&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-03T07:20:20Z",
          "tree_id": "53d92dc554be0577222adb74d0baaf129ced8af5",
          "url": "https://github.com/boa-dev/boa/commit/fb8c5cfa341f1e670b4bd059d071df3f64e8b33c"
        },
        "date": 1646293680761,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4845,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14528,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17077,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9893,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10625,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11303,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6948,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8988,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8637,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10751,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12676,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14092,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 139821,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8099,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11614,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6064,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11829,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15894,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15641,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5533,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30357,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26454,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 928,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2110,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2401,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1433,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1441,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1698,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1444,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1440,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1645,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1670,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1293,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1977,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3740,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1681,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2171,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1322,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1059,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1108,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1480,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 496,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3665,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3563,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4540,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 38880,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1756780,
            "range": "± 2312",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6063,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6303,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6694,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9387,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9474,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12595,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12688,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10274,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3099533,
            "range": "± 7801",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1355467,
            "range": "± 4076",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5332,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5845,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4793,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4567,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5917,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8138,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1736,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1063793,
            "range": "± 5564",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 982352,
            "range": "± 5303",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "4c3058b6bfcda706df71a05776fd869df7bca218",
          "message": "Implement `AggregateError` (#1888)\n\nIt changes the following:\r\n- Implement `AggregateError` global object",
          "timestamp": "2022-03-03T20:49:31Z",
          "tree_id": "f0bbf7e2d3e12e6aa636b7445e8a6417a6e862ea",
          "url": "https://github.com/boa-dev/boa/commit/4c3058b6bfcda706df71a05776fd869df7bca218"
        },
        "date": 1646342633590,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4228,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13423,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15801,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8951,
            "range": "± 367",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9632,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10346,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6224,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7172,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7893,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9767,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11512,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12982,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129329,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7311,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10645,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5457,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10912,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13797,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13508,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5182,
            "range": "± 234",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27934,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24363,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 895,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1937,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2269,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1350,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1369,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1587,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1386,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1371,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1595,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1591,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1255,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1811,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3867,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1611,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2089,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1300,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1031,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1090,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1445,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 525,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3360,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3228,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4449,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42725,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1756173,
            "range": "± 9441",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6060,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6273,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6744,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9363,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9386,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12582,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12545,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9801,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3106440,
            "range": "± 4393",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1363007,
            "range": "± 5445",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5194,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5090,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4117,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3926,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5030,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7366,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2003,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1084778,
            "range": "± 6232",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 999448,
            "range": "± 10331",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "60b74e1f5165bfa7c32fb8af1bfc55b0b5431c91",
          "message": "Bump once_cell from 1.9.0 to 1.10.0 (#1893)\n\nBumps [once_cell](https://github.com/matklad/once_cell) from 1.9.0 to 1.10.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/matklad/once_cell/blob/master/CHANGELOG.md\">once_cell's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>1.11</h2>\n<ul>\n<li>Add <code>OnceCell::with_value</code> to create initialized <code>OnceCell</code> at compile time.</li>\n<li>Improve <code>Clone</code> implementation for <code>OnceCell</code>.</li>\n</ul>\n<h2>1.10</h2>\n<ul>\n<li>upgrade <code>parking_lot</code> to <code>0.12.0</code> (note that this bumps MSRV with <code>parking_lot</code> feature enabled to <code>1.49.0</code>).</li>\n</ul>\n<h2>1.9</h2>\n<ul>\n<li>Added an <code>atomic-polyfill</code> optional dependency to compile <code>race</code> on platforms without atomics</li>\n</ul>\n<h2>1.8.0</h2>\n<ul>\n<li>Add <code>try_insert</code> API -- a version of <code>set</code> that returns a reference.</li>\n</ul>\n<h2>1.7.2</h2>\n<ul>\n<li>Improve code size when using parking_lot feature.</li>\n</ul>\n<h2>1.7.1</h2>\n<ul>\n<li>Fix <code>race::OnceBox&lt;T&gt;</code> to also impl <code>Default</code> even if <code>T</code> doesn't impl <code>Default</code>.</li>\n</ul>\n<h2>1.7.0</h2>\n<ul>\n<li>Hide the <code>race</code> module behind (default) <code>race</code> feature.\nTurns out that adding <code>race</code> by default was a breaking change on some platforms without atomics.\nIn this release, we make the module opt-out.\nTechnically, this is a breaking change for those who use <code>race</code> with <code>no_default_features</code>.\nGiven that the <code>race</code> module itself only several days old, the breakage is deemed acceptable.</li>\n</ul>\n<h2>1.6.0</h2>\n<ul>\n<li>Add <code>Lazy::into_value</code></li>\n<li>Stabilize <code>once_cell::race</code> module for &quot;first one wins&quot; no_std-compatible initialization flavor.</li>\n<li>Migrate from deprecated <code>compare_and_swap</code> to <code>compare_exchange</code>.</li>\n</ul>\n<h2>1.5.2</h2>\n<ul>\n<li><code>OnceBox</code> API uses <code>Box&lt;T&gt;</code>.\nThis a breaking change to unstable API.</li>\n</ul>\n<h2>1.5.1</h2>\n<ul>\n<li>MSRV is increased to <code>1.36.0</code>.</li>\n<li>document <code>once_cell::race</code> module.</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c3a3ede16dc5c11df6be06fabd842795504e74b7\"><code>c3a3ede</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/174\">#174</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c3f11bb8bc7f9b688b80a8c46d0a25515f7e222f\"><code>c3f11bb</code></a> Bump version and add a changelog entry for parking_lot upgrade.</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/8737ec3713283154a55ad73c384583bab7c5ad4e\"><code>8737ec3</code></a> Upgrade parking_lot.</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/64ef4a0f3289b7e6891e6fc0cd7da1c7dd0193e0\"><code>64ef4a0</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/172\">#172</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/99cc25cb9302e80984ff14197aa63aa1addecd50\"><code>99cc25c</code></a> Switch badge to GitHub Actions and remove outdated file references</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/68b2d767038b3e43187b60519b9cb172ea961264\"><code>68b2d76</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/169\">#169</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/abd4c788df17f604abedd8e59bfdad67cf139b30\"><code>abd4c78</code></a> Fix typo</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/dd8ff8aeff46609ecf849e8685e32fd0660825a7\"><code>dd8ff8a</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/168\">#168</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/7a5fca7b5439f4020784c04e673e55ef550c78e4\"><code>7a5fca7</code></a> doc: fix a typo</li>\n<li>See full diff in <a href=\"https://github.com/matklad/once_cell/compare/v1.9.0...v1.10.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=once_cell&package-manager=cargo&previous-version=1.9.0&new-version=1.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-04T12:39:45Z",
          "tree_id": "efb7f8d2bc2f981215df8c2ba8f3d7eeb255ba85",
          "url": "https://github.com/boa-dev/boa/commit/60b74e1f5165bfa7c32fb8af1bfc55b0b5431c91"
        },
        "date": 1646399543231,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 240,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3773,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12075,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14182,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7990,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8690,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9214,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5643,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7481,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7126,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10236,
            "range": "± 810",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10385,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11725,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 113998,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6621,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9501,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4892,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9974,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12785,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14029,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4605,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25300,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22149,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 784,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1695,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1985,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1253,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1456,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1461,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1202,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1218,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1415,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1412,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1093,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1606,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3406,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1637,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1825,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1133,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 897,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 963,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1264,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 443,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2934,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2836,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3866,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37611,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1522657,
            "range": "± 13377",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5330,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5568,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5914,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8255,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8256,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11007,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12524,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9719,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2634378,
            "range": "± 5666",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1147995,
            "range": "± 5396",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4596,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5084,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4101,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3949,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5067,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6515,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1734,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 948562,
            "range": "± 4670",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 872910,
            "range": "± 3563",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3ec6f633db719aaec980b450c2390c72ee6250e1",
          "message": "Bump webpack from 5.69.1 to 5.70.0 (#1892)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.69.1 to 5.70.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.70.0</h2>\n<h1>Features</h1>\n<ul>\n<li>update node.js version constraints for ESM support</li>\n<li>add <code>baseUri</code> to <code>entry</code> options to configure a static base uri (the base of <code>new URL()</code>)</li>\n<li>alphabetically sort exports in namespace objects when possible</li>\n<li>add <code>__webpack_exports_info__.name.canMangle</code></li>\n<li>add proxy support to <code>experiments.buildHttp</code></li>\n<li><code>import.meta.webpackContext</code> as ESM alternative to <code>require.context</code></li>\n<li>handle multiple alternative directories (e. g. due to resolve.alias or resolve.modules) when creating an context module</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix problem when assigning <code>global</code> to a variable</li>\n<li>fix crash when using <code>experiments.outputModule</code> and <code>loaderContext.importModule</code> with multiple chunks</li>\n<li>avoid generating progress output before the compilation has started (ProgressPlugin)</li>\n<li>fix handling of non-static-ESM dependencies with using TLA and HMR in the same module</li>\n<li>include the asset module filename in hashing</li>\n<li><code>output.clean</code> will keep HMR assets for at least 10s to allow HMR to access them even when compilation is faster then the browser</li>\n</ul>\n<h1>Performance</h1>\n<ul>\n<li>fix asset caching when using the BannerPlugin</li>\n</ul>\n<h1>Developer Experience</h1>\n<ul>\n<li>improve typings</li>\n</ul>\n<h1>Contributing</h1>\n<ul>\n<li>capture caching errors when running the test suite</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/5a26b7c4a923c42022ca97fe9cbf46907a20d6d8\"><code>5a26b7c</code></a> 5.70.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/870fcadfd01beec431e598968f237b59350e475a\"><code>870fcad</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15423\">#15423</a> from webpack/fix/issue-15409</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/cbfea7605da4e40c1c4207778e253a8f0a595d38\"><code>cbfea76</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15463\">#15463</a> from webpack/fix/add-missing-option</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/f51e099a2d6f3c6e3d80336c4fbf0a22e64ad1dc\"><code>f51e099</code></a> add parserOptions.importMetaContext option</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/75383c93d2ab04e1ae7b54822292fee0ceafb67b\"><code>75383c9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15454\">#15454</a> from webpack/fix/issue-15447</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b53fe2f630c5dfb5852df9212666ad0a37f5d40f\"><code>b53fe2f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15446\">#15446</a> from webpack/feature/import-meta-webpack-context</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/0fe44700f74e6e29316bbb93dba9489245d78966\"><code>0fe4470</code></a> up enhanced-resolve version</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/12ecab44fccef88e8f00e52e030d2ce395d4cf36\"><code>12ecab4</code></a> use cache in BannerPlugin</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/d3c5d357ccbcef22abdcd88bb06d51637ddd9fdb\"><code>d3c5d35</code></a> add ImportMetaContextPlugin</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b89f397e3cc7ec411fdb7ba68e742933669426b1\"><code>b89f397</code></a> handle more options</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.69.1...v5.70.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.69.1&new-version=5.70.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-04T12:52:27Z",
          "tree_id": "ecc613ebd4d87ec053f5fcd0379dd2c92a50b3f1",
          "url": "https://github.com/boa-dev/boa/commit/3ec6f633db719aaec980b450c2390c72ee6250e1"
        },
        "date": 1646400437576,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 289,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4277,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13603,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16006,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9070,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9786,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10351,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6456,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8428,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8099,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10049,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11756,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13273,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129342,
            "range": "± 845",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7487,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10924,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5632,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11073,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12600,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13890,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4646,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25363,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 22250,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 789,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1682,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1977,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1251,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1266,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1430,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1200,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1200,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1620,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1433,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1125,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1573,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3428,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1406,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1835,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1130,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 897,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 957,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1267,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 439,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2922,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2811,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3852,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37345,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1517553,
            "range": "± 3811",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5319,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5557,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5974,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8197,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8245,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10957,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10932,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8557,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2646469,
            "range": "± 8993",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1148633,
            "range": "± 4694",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4586,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5101,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4642,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4028,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5192,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6603,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1725,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 953536,
            "range": "± 4016",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 876311,
            "range": "± 4084",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "9c2b1114c47867307f36e2131b6bbf438c9d61f2",
          "message": "Implement `Number.parseInt` and `Number.parseFloat` (#1894)\n\nThis PR add `Number.parseInt` and `Number.parseFloat` which according to spec are clones of the global objects `parseInt` and `parseFloat`.\r\n\r\nIt also fixes the last failing test of  the `NativeError` feature with this we get 100% spec complaint `NativeError`s :tada: \r\n\r\nIt changes the following:\r\n- Add `Number.parseInt()`\r\n- Add `Number.parseFloat()`\r\n- Fix length of `AggregateError`\r\n- Fix length of `Reflect.setPrototypeOf`",
          "timestamp": "2022-03-04T17:24:49Z",
          "tree_id": "5a8d2eac849941d3f6bb5965f8216fdfb1d701e2",
          "url": "https://github.com/boa-dev/boa/commit/9c2b1114c47867307f36e2131b6bbf438c9d61f2"
        },
        "date": 1646416674510,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 332,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4542,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15170,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17789,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10060,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10737,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11350,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6901,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9099,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8796,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10940,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12926,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14514,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 150015,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8160,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11948,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6024,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12227,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16033,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15683,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5782,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31561,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27355,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1085,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2296,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2652,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1699,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1714,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1931,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1684,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1682,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1992,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2011,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1534,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2138,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4682,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1970,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2534,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1559,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1127,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1179,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1610,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 613,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3941,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3805,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5263,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51131,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2048634,
            "range": "± 2891",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7271,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7574,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8029,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10642,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10655,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14216,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14292,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11550,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3594978,
            "range": "± 6962",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1576697,
            "range": "± 6085",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6260,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6946,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5590,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5432,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6857,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8871,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2354,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1294788,
            "range": "± 7396",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1195031,
            "range": "± 7423",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "3b53fec412ceaefc30fdfae6576c1b88ae037a9b",
          "message": "Extract `Intrinsics` struct from `Context` and cleanup names (#1890)\n\nBuilding up to #186, this PR extracts an `Intrinsics` struct from `Context`, facilitating a lot the extraction of a `Realm` struct.\r\nAlso, it adapts the `BuiltIn` trait to be useful for builtins that don't expose a global property on initialization (`Generator`, `TypedArray`, etc.)\r\n\r\nIt changes the following:\r\n\r\n- Creates an `Intrinsics` struct and refactors `Context` to transfer its intrinsic related fields to `Intrinsics`.\r\n- Renames some methods and parameters to better describe their functionality.\r\n- Makes `BuiltIn::init` return `Option<JsValue>` to skip global property initialization if the builtin initialization returns `None`",
          "timestamp": "2022-03-04T23:50:31Z",
          "tree_id": "30eaecae1224836b84b35d20ed710e3e77bd23f2",
          "url": "https://github.com/boa-dev/boa/commit/3b53fec412ceaefc30fdfae6576c1b88ae037a9b"
        },
        "date": 1646440008620,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 350,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5119,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16345,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19028,
            "range": "± 557",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10928,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11602,
            "range": "± 392",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12424,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7594,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10103,
            "range": "± 354",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9658,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11942,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14277,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15639,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 176222,
            "range": "± 5810",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8978,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13039,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6643,
            "range": "± 262",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13276,
            "range": "± 439",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17012,
            "range": "± 860",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16675,
            "range": "± 353",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6501,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34140,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30130,
            "range": "± 839",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1271,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2663,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3103,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1890,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1914,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2204,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1887,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1917,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2192,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2198,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1758,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2473,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4831,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2254,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2875,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1713,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1339,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1429,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1885,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 670,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4440,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4276,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5781,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53807,
            "range": "± 1858",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2239023,
            "range": "± 72344",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7943,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7848,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7992,
            "range": "± 375",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10315,
            "range": "± 520",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10433,
            "range": "± 492",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13970,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14369,
            "range": "± 541",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11629,
            "range": "± 657",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3464331,
            "range": "± 126724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1480466,
            "range": "± 71012",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5982,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6538,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5480,
            "range": "± 216",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5107,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6569,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8997,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2179,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1196585,
            "range": "± 62962",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1071925,
            "range": "± 41562",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "7fa37b50bcc67c960754c2fdb51d572c620290b9",
          "message": "Fix unreachable panics in compile_access (#1861)\n\nThis PR changes the following:\r\n\r\n- More elegantly handles illegal access statements in compile_access\r\n- Adds a slew of previously unhandled illegal access test cases\r\n\r\n### Caveats\r\n\r\nIt is very, very likely that you will want to simply restrict unary and assignment operations in the AST. However, this prevents crashes in the meantime with a error that is just slightly less detailed than if it were implemented in AST.",
          "timestamp": "2022-03-06T00:50:11Z",
          "tree_id": "e158ef453553ba34ba5b9fd72378793387a573ce",
          "url": "https://github.com/boa-dev/boa/commit/7fa37b50bcc67c960754c2fdb51d572c620290b9"
        },
        "date": 1646529586558,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 345,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4769,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15875,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18447,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10459,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11397,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12007,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7235,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9525,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9129,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11424,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13498,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15170,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159356,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8519,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12579,
            "range": "± 513",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6312,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12739,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16675,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16305,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6076,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32667,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28481,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1123,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2436,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2769,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1741,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1757,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1999,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1779,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1768,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2032,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2048,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1595,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2223,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4782,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2036,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2649,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1629,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1168,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1245,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1676,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 661,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4152,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4005,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5568,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53441,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2194877,
            "range": "± 3107",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7581,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7890,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8379,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11681,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11904,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15714,
            "range": "± 610",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15570,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12067,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 4041081,
            "range": "± 29603",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1730570,
            "range": "± 4245",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6525,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7231,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5803,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5635,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7196,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9269,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2516,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1379906,
            "range": "± 7159",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1262120,
            "range": "± 10168",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "cc755db485dba977c87c981e768b2694dec8d6e9",
          "message": "Continue panic fixes (#1896)\n\nThis PR changes the following:\r\n\r\n- Fixes the panics induced by incorrect continues.\r\n- Adds tests which demonstrate the various panics induced.\r\n- Actually rustfmts correctly?",
          "timestamp": "2022-03-06T21:54:31Z",
          "tree_id": "ba960f1c0810f75695d2deea13aaf57847ec8ed8",
          "url": "https://github.com/boa-dev/boa/commit/cc755db485dba977c87c981e768b2694dec8d6e9"
        },
        "date": 1646605325902,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 248,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3813,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12020,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15821,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9134,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9864,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9366,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6334,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7410,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7184,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10101,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10285,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13269,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 115768,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7477,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10818,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5573,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11007,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14199,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14103,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5187,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28162,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21684,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 805,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1715,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1993,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1230,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1231,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1426,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1231,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1236,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1436,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1417,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1115,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1599,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3318,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1651,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1847,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1137,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 918,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1471,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 451,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3386,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3265,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3879,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42805,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1558904,
            "range": "± 3395",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5341,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5561,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5932,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8261,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8241,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10968,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10996,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8564,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2859082,
            "range": "± 3923",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1221819,
            "range": "± 5783",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4599,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5060,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4094,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3943,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5050,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6611,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1760,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 973893,
            "range": "± 4388",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 895512,
            "range": "± 5982",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a49b57beb71c7997694ebdb06d9afb17ea479d22",
          "message": "Bump css-loader from 6.6.0 to 6.7.0 (#1904)\n\nBumps [css-loader](https://github.com/webpack-contrib/css-loader) from 6.6.0 to 6.7.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/releases\">css-loader's releases</a>.</em></p>\n<blockquote>\n<h2>v6.7.0</h2>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.6.0...v6.7.0\">6.7.0</a> (2022-03-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>re-export defaultGetLocalIdent (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1423\">#1423</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/207cf36d541423f12a8d6680b21530c52a2f07d5\">207cf36</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md\">css-loader's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.6.0...v6.7.0\">6.7.0</a> (2022-03-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>re-export defaultGetLocalIdent (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1423\">#1423</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/207cf36d541423f12a8d6680b21530c52a2f07d5\">207cf36</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/84b552ad8b2704c4ff38f8301ffdc364a6714541\"><code>84b552a</code></a> chore(release): 6.7.0</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/207cf36d541423f12a8d6680b21530c52a2f07d5\"><code>207cf36</code></a> feat: re-export defaultGetLocalIdent (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1423\">#1423</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/f0e20e63fb627f9e30bd730204f72af8e8986d11\"><code>f0e20e6</code></a> chore: upgrade dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1425\">#1425</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/4dede5553f981dc87931de996b47f7036a883e5d\"><code>4dede55</code></a> docs(readme): added types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1418\">#1418</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/e16ba4d15cd168f1a330f10b728869fe87dd9375\"><code>e16ba4d</code></a> chore(deps): bump nanoid from 3.1.30 to 3.2.0 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1412\">#1412</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/76ad29f38e99763d080ea1c85ebf2c89fd310755\"><code>76ad29f</code></a> docs: add yarn and pnpm installation commands (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1417\">#1417</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/67bb937e1054bba22812d83afaa5a2d30567a696\"><code>67bb937</code></a> chore: upgrade dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1416\">#1416</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.6.0...v6.7.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=6.6.0&new-version=6.7.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-07T12:54:15Z",
          "tree_id": "78d5abf2b3dcdb59f8d2aa6d22f3faa10c84fe0f",
          "url": "https://github.com/boa-dev/boa/commit/a49b57beb71c7997694ebdb06d9afb17ea479d22"
        },
        "date": 1646659522627,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 282,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3797,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11901,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15770,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9006,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8592,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9116,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5594,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7362,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7077,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9996,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11631,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13013,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 115380,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6469,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10665,
            "range": "± 544",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5507,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9756,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12601,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12297,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4594,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24802,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21729,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 932,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1943,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1212,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1243,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1411,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1375,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1223,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1432,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1434,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1117,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1610,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3313,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1425,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1854,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1124,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 912,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1300,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 450,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3382,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3255,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3915,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42928,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1750143,
            "range": "± 3388",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5310,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5556,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5944,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8212,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8203,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10822,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10870,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8631,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2856997,
            "range": "± 3351",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1220790,
            "range": "± 5342",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4617,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5063,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4084,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4034,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5080,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6781,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1757,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 973683,
            "range": "± 3949",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 895686,
            "range": "± 5971",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6378204052d8df44c02f978b550c37a02f270621",
          "message": "Bump test262 from `18ce639` to `f7fb969` (#1905)\n\nBumps [test262](https://github.com/tc39/test262) from `18ce639` to `f7fb969`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/f7fb969cc4934bbc5aa29a378d59325eaa84f475\"><code>f7fb969</code></a> Add tests for T time designator prefix not allowing space</li>\n<li><a href=\"https://github.com/tc39/test262/commit/131c396b6af8184a21bbe3fbfe5ea35152956f1e\"><code>131c396</code></a> Remove number test (yields a different error, not an exception)</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8ff1e510b99d8398b00b1c779a72206cb86e4f38\"><code>8ff1e51</code></a> Add a couple more types</li>\n<li><a href=\"https://github.com/tc39/test262/commit/9c6e3aff38ecce54fc945536e6b712a93145e0a9\"><code>9c6e3af</code></a> Move to more sensible location</li>\n<li><a href=\"https://github.com/tc39/test262/commit/10f9a692957319c3b0bbd5fa06b83a4a56fb1173\"><code>10f9a69</code></a> Move test to a more sensible location</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ecd24faa82961e0cc6c8420501b7e60193043e04\"><code>ecd24fa</code></a> Fix buggy error message</li>\n<li><a href=\"https://github.com/tc39/test262/commit/918cefcd09578cfe2afa914040f174fe6ac6d055\"><code>918cefc</code></a> Check <code>formatRange</code> on many pairs of invalid arguments</li>\n<li><a href=\"https://github.com/tc39/test262/commit/2f592de0aa7c0ea0e38e5d4f39acbb01a537c23e\"><code>2f592de</code></a> Port tests for PlainTime.</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/18ce639a4c4768de337fa30b83bbb6de02b0e1a5...f7fb969cc4934bbc5aa29a378d59325eaa84f475\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-07T12:39:59Z",
          "tree_id": "732e11bd9535fc309306143222edd8acc5837646",
          "url": "https://github.com/boa-dev/boa/commit/6378204052d8df44c02f978b550c37a02f270621"
        },
        "date": 1646659057826,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 281,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4517,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13992,
            "range": "± 1125",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16196,
            "range": "± 1315",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9722,
            "range": "± 1545",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10843,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10597,
            "range": "± 818",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6419,
            "range": "± 496",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8437,
            "range": "± 600",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7865,
            "range": "± 520",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9646,
            "range": "± 578",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12027,
            "range": "± 1135",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12770,
            "range": "± 825",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 138019,
            "range": "± 8511",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7941,
            "range": "± 890",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10905,
            "range": "± 1045",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5389,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10889,
            "range": "± 844",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15302,
            "range": "± 1248",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14937,
            "range": "± 1321",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5415,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29335,
            "range": "± 2827",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25961,
            "range": "± 1511",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1074,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2197,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2567,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1532,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1560,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1722,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1561,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1519,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1762,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1755,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1431,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1976,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3838,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1921,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2331,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1460,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1114,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1194,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1740,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 565,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3804,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3668,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4889,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 45071,
            "range": "± 3080",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1920456,
            "range": "± 140641",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6553,
            "range": "± 365",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6812,
            "range": "± 517",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7669,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9459,
            "range": "± 949",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9585,
            "range": "± 669",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13043,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13286,
            "range": "± 894",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10122,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3081691,
            "range": "± 174466",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1347855,
            "range": "± 76710",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5613,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6104,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4966,
            "range": "± 301",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4842,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6129,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7750,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1969,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1106279,
            "range": "± 113787",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 982964,
            "range": "± 56692",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "2a6ea9dad6de9b6c8c346178fd558ef6e1e1eba8",
          "message": "Deny const declarations without initializer inside for loops (#1903)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes/closes #1897.\r\n\r\nIt changes the following:\r\n\r\n- Rejects uninitialized const declarations inside the init value of a for loop statement.\r\n- Adds test for the case.",
          "timestamp": "2022-03-07T16:11:51Z",
          "tree_id": "df5ac4bb11781ac23c12b839b5e5fab312f61b3c",
          "url": "https://github.com/boa-dev/boa/commit/2a6ea9dad6de9b6c8c346178fd558ef6e1e1eba8"
        },
        "date": 1646671755279,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4896,
            "range": "± 215",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16265,
            "range": "± 1074",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18895,
            "range": "± 1206",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10993,
            "range": "± 529",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11491,
            "range": "± 660",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12064,
            "range": "± 782",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7250,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9746,
            "range": "± 537",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9542,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11798,
            "range": "± 538",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13864,
            "range": "± 716",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15706,
            "range": "± 805",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 168759,
            "range": "± 10364",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8684,
            "range": "± 711",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12959,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6586,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13098,
            "range": "± 742",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16347,
            "range": "± 850",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16010,
            "range": "± 829",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6223,
            "range": "± 320",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33402,
            "range": "± 1774",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30017,
            "range": "± 1399",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1216,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2569,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3038,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1824,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1932,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2098,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1832,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1816,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2066,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2168,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1737,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2337,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4589,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2181,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2751,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1733,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1344,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1415,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1864,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 659,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4443,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4187,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5967,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 53456,
            "range": "± 2161",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2276795,
            "range": "± 93220",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7833,
            "range": "± 387",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8185,
            "range": "± 412",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8418,
            "range": "± 380",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11154,
            "range": "± 552",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11744,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15775,
            "range": "± 959",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15777,
            "range": "± 741",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12136,
            "range": "± 690",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3599314,
            "range": "± 169161",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1570414,
            "range": "± 60893",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6753,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7340,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5948,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5583,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7136,
            "range": "± 293",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9394,
            "range": "± 482",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2456,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1330457,
            "range": "± 76456",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1194032,
            "range": "± 66412",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "9f9e36c9105426976594db8b8b9ef55cf2336be3",
          "message": "Fix try/catch/finally related bugs and add tests (#1901)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes some bugs related to try blocks:\r\n\r\n- Fixes a panic when a finally block contained variable declarations. (Thanks to @VTCAKAVSMoACE for the report!)\r\n- Fixes a bug where try blocks in the last position of a statement list didn't return its inner last value as the result of the evaluation.\r\n- Add tests for both cases and two other common cases.\r\n- Extract and cleanup some code.",
          "timestamp": "2022-03-07T17:13:39Z",
          "tree_id": "c93f8d05f0f5ff34cb5f5c30c19b6fba40b9e932",
          "url": "https://github.com/boa-dev/boa/commit/9f9e36c9105426976594db8b8b9ef55cf2336be3"
        },
        "date": 1646675324959,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4269,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13351,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15761,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8967,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9616,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10273,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6276,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8174,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8015,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9842,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11675,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12866,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130618,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7315,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10689,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5489,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10854,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13935,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13694,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5194,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27863,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24433,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1917,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2244,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1384,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1398,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1586,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1373,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1380,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1606,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1599,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1234,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1777,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3740,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1590,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2078,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1135,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 893,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1087,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1274,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 445,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3346,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3205,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4391,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41736,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1715451,
            "range": "± 3164",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5999,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6266,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6664,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8875,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8941,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12143,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12070,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9670,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3220052,
            "range": "± 5953",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1385533,
            "range": "± 5560",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5184,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5695,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4636,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4455,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5739,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7539,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1930,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1089399,
            "range": "± 7762",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1005263,
            "range": "± 6527",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "6ff36fb2a3ebfa28bbd4077281c1353876b0ff0f",
          "message": "Implement destructing assignments for assignment expressions (#1895)\n\nIt changes the following:\r\n\r\n- Implement destructing assignments for assignment expressions",
          "timestamp": "2022-03-07T19:47:11Z",
          "tree_id": "92dc8d366f8527ba62abd0e6e531042aa186d914",
          "url": "https://github.com/boa-dev/boa/commit/6ff36fb2a3ebfa28bbd4077281c1353876b0ff0f"
        },
        "date": 1646684256129,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 326,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5046,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16579,
            "range": "± 943",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20207,
            "range": "± 1301",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11299,
            "range": "± 683",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11917,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12769,
            "range": "± 661",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7561,
            "range": "± 544",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10239,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9812,
            "range": "± 308",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12279,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14470,
            "range": "± 649",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16121,
            "range": "± 1351",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 177564,
            "range": "± 7141",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9096,
            "range": "± 715",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13052,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6843,
            "range": "± 307",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13152,
            "range": "± 1708",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17115,
            "range": "± 928",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16793,
            "range": "± 979",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6455,
            "range": "± 933",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34611,
            "range": "± 2494",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30108,
            "range": "± 918",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1196,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2524,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2963,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1787,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1799,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2082,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1795,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1825,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2107,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2111,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1636,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2323,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4631,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2150,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2722,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1677,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1287,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1352,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1822,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 640,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4360,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4284,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5804,
            "range": "± 216",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 51036,
            "range": "± 1337",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2296071,
            "range": "± 124998",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7741,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8048,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8444,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11535,
            "range": "± 848",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11547,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15341,
            "range": "± 496",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15690,
            "range": "± 929",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12117,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3686441,
            "range": "± 160625",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1584849,
            "range": "± 25114",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6748,
            "range": "± 678",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7388,
            "range": "± 335",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5965,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5507,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7307,
            "range": "± 567",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9326,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2340,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1296209,
            "range": "± 50577",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1169113,
            "range": "± 33265",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "66966290+elasmojs@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "elasmojs"
          },
          "committer": {
            "email": "66966290+elasmojs@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "elasmojs"
          },
          "distinct": false,
          "id": "44b5617d8d7a3a1c2ddb38a8659d60885b51822a",
          "message": "Added boa examples (#1161)\n\nAdded boa examples as per issue #446\r\nOvertaken https://github.com/boa-dev/boa/pull/634\r\n\r\nSomehow screwed that branch up by rebasing it and losing access\r\npings @elasmojs \r\n\r\nThis Pull Request fixes/closes #446 .\r\n\n\nCo-authored-by: Jason Williams <jase.williams@gmail.com>\nCo-authored-by: Iban Eguia (Razican) <razican@protonmail.ch>\nCo-authored-by: jasonwilliams <jase.williams@gmail.com>\nCo-authored-by: jedel1043 <jedel0124@gmail.com>",
          "timestamp": "2022-03-08T01:09:46Z",
          "tree_id": "d88a256917bc28f5ebf832da6edd461bf68cb529",
          "url": "https://github.com/boa-dev/boa/commit/44b5617d8d7a3a1c2ddb38a8659d60885b51822a"
        },
        "date": 1646703874479,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 238,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4255,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11885,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14010,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7975,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8544,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9156,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5608,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7273,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7099,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8745,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10344,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11603,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 116509,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6548,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9557,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4885,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9699,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12399,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12122,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4644,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25015,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21780,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 816,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1703,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2011,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1234,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1246,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1413,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1238,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1236,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1619,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1635,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1273,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4006,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1444,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1868,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1162,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 908,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 967,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1284,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 466,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2949,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2859,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3967,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37617,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1760017,
            "range": "± 3481",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5353,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5611,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5965,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7963,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7959,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10587,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10620,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8644,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2848739,
            "range": "± 3883",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1229263,
            "range": "± 4556",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4655,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5147,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4201,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4506,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5079,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6617,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1936,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1096445,
            "range": "± 11245",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1012284,
            "range": "± 7194",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "7f90829f88c6b184bf8275fb389ce666d2347b2f",
          "message": "Compile StatementList after parse passes on negative tests (#1906)\n\nThis fixes an issue with 262 negative tests, that should produce a syntax errors. Currently we only parse the test code is such cases. If the parsing does not return an error, we do not compile the code further. This caused some panics. Most of them are fixed by now, the last ones will be fixed with #1860.",
          "timestamp": "2022-03-08T16:01:53Z",
          "tree_id": "0a70f69dd5cf0d7912f0e5d2b68f19cb9cd0c820",
          "url": "https://github.com/boa-dev/boa/commit/7f90829f88c6b184bf8275fb389ce666d2347b2f"
        },
        "date": 1646757479179,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 342,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5242,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16700,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20686,
            "range": "± 962",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11254,
            "range": "± 706",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11846,
            "range": "± 836",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12829,
            "range": "± 595",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7932,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10428,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9981,
            "range": "± 554",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12642,
            "range": "± 682",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14559,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17008,
            "range": "± 742",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 179868,
            "range": "± 19237",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9167,
            "range": "± 777",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13427,
            "range": "± 751",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6831,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13747,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17372,
            "range": "± 895",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17003,
            "range": "± 597",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6741,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36376,
            "range": "± 2319",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31896,
            "range": "± 2021",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1318,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2714,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3124,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1909,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1912,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2185,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1917,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2013,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2135,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2174,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1755,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2388,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4858,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2257,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2970,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1784,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1381,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1435,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1900,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 683,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4517,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4450,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6063,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 54212,
            "range": "± 2291",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2356188,
            "range": "± 101844",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8048,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8444,
            "range": "± 688",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8904,
            "range": "± 370",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12063,
            "range": "± 758",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12426,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16306,
            "range": "± 1264",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15959,
            "range": "± 730",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12496,
            "range": "± 515",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3911562,
            "range": "± 173831",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1610255,
            "range": "± 77670",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6861,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7820,
            "range": "± 387",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6691,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 6035,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7617,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 10029,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2492,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1407003,
            "range": "± 46105",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1251582,
            "range": "± 74622",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "committer": {
            "email": "me@addisoncrump.info",
            "name": "Addison Crump",
            "username": "VTCAKAVSMoACE"
          },
          "distinct": false,
          "id": "92dbba6c5d4b0d5e7f2e9d6efb09fc733ee83184",
          "message": "Prevent breaks without loop or switch from causing panics (#1860)\n\nThis PR changes the following:\r\n\r\n- Replaces a panic with a syntax error when a break is used outside of a loop or switch\r\n- Adds a test for that",
          "timestamp": "2022-03-08T18:17:15Z",
          "tree_id": "b35dc6b9ebfe70c2e0d98a131a3b895f3ef55f09",
          "url": "https://github.com/boa-dev/boa/commit/92dbba6c5d4b0d5e7f2e9d6efb09fc733ee83184"
        },
        "date": 1646765091599,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 252,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4593,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14420,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16799,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9732,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10376,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11116,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6777,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8812,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8541,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10653,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12584,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14042,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143384,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7997,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11517,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6064,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11299,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14485,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14163,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5544,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30201,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26143,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 941,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2106,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2420,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1460,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1465,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1725,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1456,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1455,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1701,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1703,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1321,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1959,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3652,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1679,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2255,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1323,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1052,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1127,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1499,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 494,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3632,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3538,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4841,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 39954,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1865950,
            "range": "± 15802",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6086,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6377,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6750,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9356,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9384,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12611,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12719,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10267,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3119701,
            "range": "± 6173",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1368292,
            "range": "± 12849",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5420,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6164,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4841,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4939,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6461,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7863,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1755,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1074063,
            "range": "± 13325",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 993000,
            "range": "± 16764",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f7920cdca8cff0d7c822fc3241913703e7773bdb",
          "message": "Bump regex from 1.5.4 to 1.5.5 (#1915)\n\nBumps [regex](https://github.com/rust-lang/regex) from 1.5.4 to 1.5.5.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-lang/regex/blob/master/CHANGELOG.md\">regex's changelog</a>.</em></p>\n<blockquote>\n<h1>1.5.5 (2022-03-08)</h1>\n<p>This releases fixes a security bug in the regex compiler. This bug permits a\nvector for a denial-of-service attack in cases where the regex being compiled\nis untrusted. There are no known problems where the regex is itself trusted,\nincluding in cases of untrusted haystacks.</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/regex/security/advisories/GHSA-m5pq-gvj9-9vr8\">SECURITY #GHSA-m5pq-gvj9-9vr8</a>:\nFixes a bug in the regex compiler where empty sub-expressions subverted the\nexisting mitigations in place to enforce a size limit on compiled regexes.\nThe Rust Security Response WG published an advisory about this:\n<a href=\"https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw\">https://groups.google.com/g/rustlang-security-announcements/c/NcNNL1Jq7Yw</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/regex/commit/d130381b150756ba7e5940efdc6ebdf47f4febc0\"><code>d130381</code></a> 1.5.5</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/ae70b41d4f46641dbc45c7a4f87954aea356283e\"><code>ae70b41</code></a> security: fix denial-of-service bug in compiler</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/b92ffd5471018419ec48dbdef32757424439f065\"><code>b92ffd5</code></a> cargo: use SPDX license format</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/f6e52dafdee305d16d6778e7bfe935bd9a6ae38b\"><code>f6e52da</code></a> syntax: fix 'unused' warnings</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/5197f21287344d2994f9cf06758a3ea30f5a26c3\"><code>5197f21</code></a> fuzz: do not use inherits in Cargo.toml</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/3662851482327e3642940981298150c93718de3c\"><code>3662851</code></a> doc: fix typo</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/63ee6699a27b294774af0154862e5cc35b495ee6\"><code>63ee669</code></a> syntax/doc: fix 'their' typo</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/d6bc7a4c3b58e1d618024aaededa722df32fa6e8\"><code>d6bc7a4</code></a> readme: remove broken badge</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/bd7466034f8cccc3b0918201d1eb099cc8be3c56\"><code>bd74660</code></a> fuzz: try to fix build issue</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/bd0a14231b8848669e0d257ba55526f62756c749\"><code>bd0a142</code></a> readme: fix badges</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/regex/compare/1.5.4...1.5.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=regex&package-manager=cargo&previous-version=1.5.4&new-version=1.5.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-09T16:26:05Z",
          "tree_id": "ef2110f2509ef0bc24325aa87d51feea86de1cc8",
          "url": "https://github.com/boa-dev/boa/commit/f7920cdca8cff0d7c822fc3241913703e7773bdb"
        },
        "date": 1646845285978,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4298,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13505,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15897,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9052,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9763,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10380,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6318,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8303,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8070,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9946,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11645,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13266,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130712,
            "range": "± 1174",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7397,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10674,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5531,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11075,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14176,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13853,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5235,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28301,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24758,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 916,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1961,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2285,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1390,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1432,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1631,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1404,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1411,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1634,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1644,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1280,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1839,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4003,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1630,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2133,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1296,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1091,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1469,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3370,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3269,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4460,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42956,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1776548,
            "range": "± 3524",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6053,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6299,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6721,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9369,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9412,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12471,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12578,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9713,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3179289,
            "range": "± 5669",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1378120,
            "range": "± 8362",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5277,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5811,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4707,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4475,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5733,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7476,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1955,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1095156,
            "range": "± 13066",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1008745,
            "range": "± 20623",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "51ae856c838ea95a20b96878f18b454b9517f9b5",
          "message": "Bump css-loader from 6.7.0 to 6.7.1 (#1914)\n\nBumps [css-loader](https://github.com/webpack-contrib/css-loader) from 6.7.0 to 6.7.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/releases\">css-loader's releases</a>.</em></p>\n<blockquote>\n<h2>v6.7.1</h2>\n<h3><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.7.0...v6.7.1\">6.7.1</a> (2022-03-08)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>defaultGetLocalIdent export (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1427\">#1427</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/74dac1e428569236d386ff4e0f971e35c334087a\">74dac1e</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/css-loader/blob/master/CHANGELOG.md\">css-loader's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.7.0...v6.7.1\">6.7.1</a> (2022-03-08)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>defaultGetLocalIdent export (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1427\">#1427</a>) (<a href=\"https://github.com/webpack-contrib/css-loader/commit/74dac1e428569236d386ff4e0f971e35c334087a\">74dac1e</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/830fe2ce372d5761ec01a000c626672ca8ef1658\"><code>830fe2c</code></a> chore(release): 6.7.1</li>\n<li><a href=\"https://github.com/webpack-contrib/css-loader/commit/74dac1e428569236d386ff4e0f971e35c334087a\"><code>74dac1e</code></a> fix: defaultGetLocalIdent export (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/css-loader/issues/1427\">#1427</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack-contrib/css-loader/compare/v6.7.0...v6.7.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=css-loader&package-manager=npm_and_yarn&previous-version=6.7.0&new-version=6.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-09T16:40:34Z",
          "tree_id": "95ad7850356b1237a74c42f5cca5089b6ce18c6d",
          "url": "https://github.com/boa-dev/boa/commit/51ae856c838ea95a20b96878f18b454b9517f9b5"
        },
        "date": 1646846019331,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 290,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4692,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15170,
            "range": "± 581",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18265,
            "range": "± 1239",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10215,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11128,
            "range": "± 771",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11705,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7832,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9825,
            "range": "± 749",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9717,
            "range": "± 823",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11442,
            "range": "± 1017",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14149,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16435,
            "range": "± 853",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 167029,
            "range": "± 8270",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8547,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12422,
            "range": "± 887",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6675,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12882,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16613,
            "range": "± 1324",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15478,
            "range": "± 616",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5788,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34342,
            "range": "± 2476",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27512,
            "range": "± 994",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1096,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2232,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2660,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1588,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1700,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1938,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1786,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1640,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1870,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1904,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1486,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2084,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4170,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1898,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2421,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1498,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1203,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1227,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1662,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 666,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4144,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3783,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5092,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 47867,
            "range": "± 2921",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2066310,
            "range": "± 133395",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7197,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7476,
            "range": "± 1277",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8037,
            "range": "± 287",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10626,
            "range": "± 949",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10536,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14118,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14274,
            "range": "± 484",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11022,
            "range": "± 568",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3657189,
            "range": "± 202976",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1432469,
            "range": "± 83881",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5941,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6526,
            "range": "± 320",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5382,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5052,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6355,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8458,
            "range": "± 511",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2100,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1172159,
            "range": "± 54214",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1057345,
            "range": "± 63564",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "a44be7073b678afd2ce0472108b6315ea4b81574",
          "message": "Fix postfix increment and decrement return values (#1913)\n\nThis fixes a bug with the postfix increment and decrement. Before those operators would return the left-hand-side value, but the spec specifies they should return ToNumeric(left-had-side value).",
          "timestamp": "2022-03-09T19:26:46Z",
          "tree_id": "5acd9e59cfbab9e8a863126106a92b91a02e9d7c",
          "url": "https://github.com/boa-dev/boa/commit/a44be7073b678afd2ce0472108b6315ea4b81574"
        },
        "date": 1646855830927,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 335,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5122,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15753,
            "range": "± 555",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19485,
            "range": "± 836",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11099,
            "range": "± 356",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12049,
            "range": "± 355",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12977,
            "range": "± 477",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7691,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10128,
            "range": "± 1038",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9850,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12397,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14693,
            "range": "± 451",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16415,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 173380,
            "range": "± 7340",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9415,
            "range": "± 365",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13445,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6865,
            "range": "± 490",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13829,
            "range": "± 419",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17952,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17252,
            "range": "± 760",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6456,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35673,
            "range": "± 1202",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30568,
            "range": "± 1367",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1227,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2584,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2960,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1811,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1916,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2156,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1903,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1860,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2165,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2197,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1740,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2429,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4776,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2191,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2891,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1801,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1369,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1369,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1820,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 671,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4381,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4276,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5659,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 52758,
            "range": "± 2324",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2302386,
            "range": "± 75478",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 8025,
            "range": "± 323",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 8213,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8642,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11821,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11948,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16080,
            "range": "± 819",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15999,
            "range": "± 368",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 12768,
            "range": "± 389",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3941037,
            "range": "± 168177",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1670749,
            "range": "± 66715",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6511,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 7226,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 6100,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5715,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7082,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9641,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2367,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1325733,
            "range": "± 51621",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1153491,
            "range": "± 41138",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "51f75d8ccbdd35a0918b5d5e413c9988dda751cd",
          "message": "Update `yarn.lock` and add `build:prod` command (#1910)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request makes it easier to build the Boa playground in production mode, with a new `build:prod` command.",
          "timestamp": "2022-03-10T09:30:47Z",
          "tree_id": "696ed7b2beb7dc797dc85bf39f9b1ea5c62fee29",
          "url": "https://github.com/boa-dev/boa/commit/51f75d8ccbdd35a0918b5d5e413c9988dda751cd"
        },
        "date": 1646906590698,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4309,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13453,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15866,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9029,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9795,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10354,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6392,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8320,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8050,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9903,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11756,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13292,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130955,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7373,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10647,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5523,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11132,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14282,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13985,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5250,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28440,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24820,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 900,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1926,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2253,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1371,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1399,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1606,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1385,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1409,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1632,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1597,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1253,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1806,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3834,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1642,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2115,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1087,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1463,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 494,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3367,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4404,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42104,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1767767,
            "range": "± 5747",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6066,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6306,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6674,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8941,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8990,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12037,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12082,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9679,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3074337,
            "range": "± 6380",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1359931,
            "range": "± 5952",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5260,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5759,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4685,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4476,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5706,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7536,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1928,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1079761,
            "range": "± 6130",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 991590,
            "range": "± 6460",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "09bfabb0b0204b0534d4616927d869d0221a3edd",
          "message": "Bump git2 from 0.14.1 to 0.14.2 (#1919)\n\nBumps [git2](https://github.com/rust-lang/git2-rs) from 0.14.1 to 0.14.2.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/0443adb5388b2a529c042256e7716c36dc567220\"><code>0443adb</code></a> Bump libgit2-sys to 0.13.2 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/820\">#820</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/871788d261f60b3b319f1d0d8a450b1cfc70c667\"><code>871788d</code></a> Add binding for git_odb_exists_ext (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/818\">#818</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/d703dd940f1302227a9efb6672dbdbf34f4cb0bc\"><code>d703dd9</code></a> Update to 1.4.2 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/815\">#815</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/8c6a26bd74f2a16c49a8187127152ff3c3b53276\"><code>8c6a26b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/814\">#814</a> from weihanglo/git2-curl-0.15.0</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/ce54dacf986e4ce309f1d982987621f496c40c62\"><code>ce54dac</code></a> Bump version of git2-curl</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/64d849b8436a6b77a2636693a7523b5cac9cd993\"><code>64d849b</code></a> Update to 1.4.1 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/811\">#811</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/af6fc41c2918c07d2c898c5630b552c2525c9951\"><code>af6fc41</code></a> Bump libgit2 in version probe and readme (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/808\">#808</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/509fe5832ea35f6a670333da9e98ba5571419318\"><code>509fe58</code></a> Bump libgit2 to 1.4.0 (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/806\">#806</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/58ed9c32e1dff518c0d408f1fc08b543f35b1bd7\"><code>58ed9c3</code></a> <code>libgit2-sys</code>: use <code>src</code> instead <code>.git</code> as vendored indicator (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/801\">#801</a>)</li>\n<li><a href=\"https://github.com/rust-lang/git2-rs/commit/ae02afdbf0a8ab352aad9f18c726a70a1e7ecf0b\"><code>ae02afd</code></a> Harmonize commitish and committish in docstrings (<a href=\"https://github-redirect.dependabot.com/rust-lang/git2-rs/issues/799\">#799</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/git2-rs/compare/git2-curl-0.14.1...0.14.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=git2&package-manager=cargo&previous-version=0.14.1&new-version=0.14.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-11T12:30:44Z",
          "tree_id": "ca2929b0a1203130194025cc497f9008e4eb92ae",
          "url": "https://github.com/boa-dev/boa/commit/09bfabb0b0204b0534d4616927d869d0221a3edd"
        },
        "date": 1647004101081,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 327,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4470,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15019,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17434,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9914,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10595,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11310,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6798,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9083,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8661,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10863,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12704,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14581,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149219,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8143,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12095,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5991,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11889,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15552,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15352,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5716,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30946,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26932,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1124,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2341,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2691,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1657,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1677,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1916,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1710,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1673,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1978,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1967,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1540,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2145,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4685,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1980,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2519,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1568,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1132,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1188,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1628,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 618,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4029,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3926,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5421,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50992,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2132374,
            "range": "± 16883",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7259,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7503,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8018,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11266,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11258,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14650,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14614,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11564,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3680226,
            "range": "± 24012",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1610862,
            "range": "± 13269",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6259,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6947,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5636,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5347,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6970,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8900,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2382,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1283437,
            "range": "± 6646",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1173903,
            "range": "± 6168",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "128f8366801e37fc4a7bec8e34cf196c2a96819b",
          "message": "Added funding information to the repository (#1871)\n\nThis will add the \"Sponsor\" button to the repository, which will redirect to the OpenCollective platform.",
          "timestamp": "2022-03-12T15:39:56Z",
          "tree_id": "6604e13145d45380bac87113a87ff5a56a64324e",
          "url": "https://github.com/boa-dev/boa/commit/128f8366801e37fc4a7bec8e34cf196c2a96819b"
        },
        "date": 1647101261519,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 240,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3699,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11751,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13740,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7889,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9562,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10242,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6155,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8133,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 6986,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8692,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10113,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11416,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129475,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6405,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9376,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5395,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10778,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13859,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13571,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4604,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24494,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21484,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 823,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1755,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2010,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1237,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1430,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1647,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1450,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1433,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1476,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1647,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1320,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1853,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3504,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1446,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2170,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1309,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1050,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 983,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1306,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 452,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3039,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2917,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3972,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37309,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1587084,
            "range": "± 4197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5280,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5506,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5872,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8321,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9430,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12431,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12512,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8545,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2703206,
            "range": "± 18203",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1185046,
            "range": "± 5066",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5221,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5765,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4173,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4488,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5764,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7371,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1979,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 942782,
            "range": "± 4413",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 865624,
            "range": "± 4151",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "nikodem@rabulinski.com",
            "name": "Nikodem Rabuliński",
            "username": "nrabulinski"
          },
          "committer": {
            "email": "nikodem@rabulinski.com",
            "name": "Nikodem Rabuliński",
            "username": "nrabulinski"
          },
          "distinct": false,
          "id": "9eb6a78abc86fcfd6d57d8cec906e771d87b489a",
          "message": "Implement Array.from (#1831)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes/closes #1784.\r\n\r\nThere're still a few tests failing, notably:\r\n- `iter-set-elem-prop-non-writable` - we don't have generator functions implemented\r\n- `calling-from-valid-1-noStrict`, `iter-map-fn-this-non-strict` - `thisArg` in non-strict mode, when undefined, should be inherited (that's what I'm guessing, I haven't confirmed this, but strict counterparts do pass with `thisArg` being `undefined`)\r\n- `source-array-boundary`, `elements-deleted-after` - ~~Not sure yet, still investigating, but they also include thisArg, so perhaps function calling has an underlying issue?~~ Failing because `this` on the top level evaluates to an empty object instead of containing everything from the top scope\n\nCo-authored-by: HalidOdat <halidodat@gmail.com>",
          "timestamp": "2022-03-12T19:33:16Z",
          "tree_id": "1057a11a7deb160dccc248f4bc01dbc062bbd903",
          "url": "https://github.com/boa-dev/boa/commit/9eb6a78abc86fcfd6d57d8cec906e771d87b489a"
        },
        "date": 1647115238759,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 274,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4222,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13334,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15604,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8835,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9458,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10179,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6197,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8126,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7842,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9813,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11399,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12956,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129138,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7403,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10816,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5487,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10849,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13878,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13659,
            "range": "± 532",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5207,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27965,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24332,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 909,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1943,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2268,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1369,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1414,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1609,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1398,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1402,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1637,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1628,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1266,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1830,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3936,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1622,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2083,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1264,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1045,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1103,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1469,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 492,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3431,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3273,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4573,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41035,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1726685,
            "range": "± 4162",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5997,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6310,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6667,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8821,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8809,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11992,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11993,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9654,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3049233,
            "range": "± 4006",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1334977,
            "range": "± 4054",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5258,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5803,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4727,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4432,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5641,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7549,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1916,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1059688,
            "range": "± 8504",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 973868,
            "range": "± 4062",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "23711a638b624ad7291a66ff5e5b74c96dc6ee13",
          "message": "Refresh vm docs and fix bytecode trace output (#1921)\n\nIt changes the following:\r\n\r\n- Refreshes the vm and debugging docs to represent the current state\r\n- Fix some bytecode trace output\r\n- Rename a field in the `CodeBlock`",
          "timestamp": "2022-03-13T18:51:00Z",
          "tree_id": "0f0ed7bb043bdd2e85afa505fd678c6ab1d61dab",
          "url": "https://github.com/boa-dev/boa/commit/23711a638b624ad7291a66ff5e5b74c96dc6ee13"
        },
        "date": 1647199088160,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4204,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13382,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15737,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8849,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9483,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10173,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6188,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8133,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7864,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9797,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11473,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13081,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129167,
            "range": "± 382",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7272,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10601,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5442,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10763,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13855,
            "range": "± 505",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13601,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5199,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28027,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24471,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 944,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1992,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2327,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1437,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1461,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1681,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1420,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1440,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1668,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1681,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1304,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1856,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3841,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1660,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2154,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1340,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1048,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1114,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1493,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 517,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3496,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3328,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4410,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41739,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1750605,
            "range": "± 4396",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5880,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6159,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6533,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8844,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8813,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12015,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12021,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9624,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3164148,
            "range": "± 4304",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1376395,
            "range": "± 3010",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5191,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5725,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4624,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4394,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5675,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7327,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1968,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1074016,
            "range": "± 5841",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 989142,
            "range": "± 5551",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "48f23b3c77f160230de4cc9faf5e16f6dc7e2b0b",
          "message": "Bump monaco-editor from 0.32.1 to 0.33.0 (#1927)\n\nBumps [monaco-editor](https://github.com/microsoft/monaco-editor) from 0.32.1 to 0.33.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/microsoft/monaco-editor/blob/main/CHANGELOG.md\">monaco-editor's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.33.0]</h2>\n<h3>Breaking Changes</h3>\n<ul>\n<li><code>InlayHintKind.Other</code> is removed.</li>\n</ul>\n<h3>Thank you</h3>\n<p>Contributions to <code>monaco-editor</code>:</p>\n<ul>\n<li><a href=\"https://github.com/Dan1ve\"><code>@​Dan1ve (Daniel Veihelmann)</code></a>: Make Vite sample code Firefox compatible [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2991\">#2991</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2991\">microsoft/monaco-editor#2991</a>)</li>\n<li><a href=\"https://github.com/philipturner\"><code>@​philipturner (Philip Turner)</code></a>: Add <code>@noDerivative</code> modifier to Swift [PR <a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/issues/2957\">#2957</a>](<a href=\"https://github-redirect.dependabot.com/microsoft/monaco-editor/pull/2957\">microsoft/monaco-editor#2957</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/microsoft/monaco-editor/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=monaco-editor&package-manager=npm_and_yarn&previous-version=0.32.1&new-version=0.33.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-14T13:42:09Z",
          "tree_id": "2578655c8e1d0cd28a1f1096261216d0280a6931",
          "url": "https://github.com/boa-dev/boa/commit/48f23b3c77f160230de4cc9faf5e16f6dc7e2b0b"
        },
        "date": 1647267194738,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4262,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13430,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15693,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8918,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9569,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10265,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6228,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8157,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7886,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9811,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11547,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13118,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129519,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7324,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10638,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5453,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10809,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13891,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13661,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5209,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28017,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24515,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1956,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2249,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1376,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1416,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1644,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1395,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1615,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1622,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1270,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1818,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3793,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1615,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2112,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1281,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1023,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1096,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1471,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 489,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3359,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3236,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4435,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 41871,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1752691,
            "range": "± 2717",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5917,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6228,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6573,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8892,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8897,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12081,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12093,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9612,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3173427,
            "range": "± 5546",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1381718,
            "range": "± 4457",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5250,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5760,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4647,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4389,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5640,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7457,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1939,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1081860,
            "range": "± 7841",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 998089,
            "range": "± 7677",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "40e35f101ba24ad0b58435c827e75932a9b39675",
          "message": "Bump test262 from `f7fb969` to `0bccacd` (#1928)\n\nBumps [test262](https://github.com/tc39/test262) from `f7fb969` to `0bccacd`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/0bccacda693ada2cd1736d35eb912b27291ac6ff\"><code>0bccacd</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3429\">#3429</a> from Igalia/roundingmode-invalid-string</li>\n<li><a href=\"https://github.com/tc39/test262/commit/104e5e8fab806c3a75fe6913f626cf13943698ca\"><code>104e5e8</code></a> Test more invalid values for roundingMode.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/51ce1fa00f55d28372c2592a03a2a32294c7c37e\"><code>51ce1fa</code></a> Expand some Duration#toString() tests.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/c6c31c8dac173f323546c05e5db048296ef51804\"><code>c6c31c8</code></a> Add and expand tests for Duration constructor / from().</li>\n<li><a href=\"https://github.com/tc39/test262/commit/d45476b9fde69b0036ef786e98f6b5fe8e488c1e\"><code>d45476b</code></a> Add a test for observable calls in Temporal.Duration constructor.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/50dc96e59e20c8d57ad0f2e5b7ccdfdf82e9b7a7\"><code>50dc96e</code></a> Split Array.prototype.Symbol.unscopables tests for features</li>\n<li><a href=\"https://github.com/tc39/test262/commit/d8fb00d741ae7ac5af47539819d623a5a4c8de01\"><code>d8fb00d</code></a> Add missing feature flag array-grouping</li>\n<li><a href=\"https://github.com/tc39/test262/commit/5fb0f5b6d2d526fb4c716042f62c912704126e1a\"><code>5fb0f5b</code></a> Remove SPACES before features</li>\n<li><a href=\"https://github.com/tc39/test262/commit/bc4af482b0292e868c55a0556dd32e6e5f0cd87a\"><code>bc4af48</code></a> Fix features by removing leading space</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/f7fb969cc4934bbc5aa29a378d59325eaa84f475...0bccacda693ada2cd1736d35eb912b27291ac6ff\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-14T13:53:07Z",
          "tree_id": "a4457854d75f8d5da66f615ad95fe81c0cc2d7fa",
          "url": "https://github.com/boa-dev/boa/commit/40e35f101ba24ad0b58435c827e75932a9b39675"
        },
        "date": 1647267817611,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 268,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3736,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13383,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13837,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7848,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8411,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9025,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5515,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7204,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 6989,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8710,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10118,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11561,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 113995,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6446,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9357,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4800,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9525,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12241,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12011,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4587,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24668,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21539,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 804,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1788,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2017,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1313,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1331,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1529,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1303,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1290,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1493,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1501,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1122,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1648,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3414,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1501,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1929,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1197,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 911,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 984,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1342,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 427,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3012,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2897,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3898,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 36882,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1549286,
            "range": "± 2283",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5234,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5422,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5739,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7822,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7775,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10480,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10540,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8425,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2791106,
            "range": "± 3415",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1217048,
            "range": "± 3235",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4595,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5013,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4061,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3888,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4969,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6556,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1705,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 954293,
            "range": "± 3839",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 878167,
            "range": "± 4220",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "17a6c8661e750721c1fae8dc3f1ec49fe6da7790",
          "message": "Fix `BigInt` and `Number` comparison (#1887)\n\nFixes `BigInt` and `Number` comparison, and vice versa. Before we were removing the decimal point of the floating-point number which was causing cases like `0.000001 > 0n` (or `0n < 0.000001`) to fail.",
          "timestamp": "2022-03-14T18:08:40Z",
          "tree_id": "dcffa8be1f1d230e7ba5aba404b5b7ae330d11e2",
          "url": "https://github.com/boa-dev/boa/commit/17a6c8661e750721c1fae8dc3f1ec49fe6da7790"
        },
        "date": 1647283929923,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 350,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4544,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14888,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17250,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9858,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10300,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11022,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6766,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9075,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8507,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10560,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12421,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14122,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 150978,
            "range": "± 2000",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8016,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11818,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5793,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11873,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15243,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15294,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5621,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30667,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26197,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1053,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2248,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2635,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1687,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1660,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1899,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1630,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1620,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1911,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1882,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1515,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2094,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4535,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1877,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2472,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1562,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1116,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1179,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1545,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 593,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3861,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3785,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5418,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 49987,
            "range": "± 986",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2059891,
            "range": "± 29285",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7144,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7372,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7658,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10924,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10964,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14082,
            "range": "± 410",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14262,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11237,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3680728,
            "range": "± 100885",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1602949,
            "range": "± 45856",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6347,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6880,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5480,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5116,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6628,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8731,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2358,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1263525,
            "range": "± 29070",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1165410,
            "range": "± 27340",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "936006+jasonwilliams@users.noreply.github.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "be901735e570025e1813b49d8aa2af39bc87bb98",
          "message": "generated changelog for 0.14 (#1882)\n\nCo-authored-by: João Borges <rageknify@gmail.com>",
          "timestamp": "2022-03-14T22:33:44Z",
          "tree_id": "da540e2987b341f108c1c8b8f7e42270aa26c4ec",
          "url": "https://github.com/boa-dev/boa/commit/be901735e570025e1813b49d8aa2af39bc87bb98"
        },
        "date": 1647298468197,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 279,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4169,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13352,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15652,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8840,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9540,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10223,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6208,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8094,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7917,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9752,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11455,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13000,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130848,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7289,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10579,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5393,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10680,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13830,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13447,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5244,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28039,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24569,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 942,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2032,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2340,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1438,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1442,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1670,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1444,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1461,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1670,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1653,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1327,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1877,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3963,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1668,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2164,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1316,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1056,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1129,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1492,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 486,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3562,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3352,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4541,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42411,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1812990,
            "range": "± 5433",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6073,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6314,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6764,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9378,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9406,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12634,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12567,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9715,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3182230,
            "range": "± 4851",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1389802,
            "range": "± 3057",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5319,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5869,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4766,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4598,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5867,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7438,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1979,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1088202,
            "range": "± 4828",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 999027,
            "range": "± 5868",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "jasonwilliams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "jasonwilliams",
            "username": "jasonwilliams"
          },
          "distinct": true,
          "id": "16f3a0bd294e9d2d3d2211035c54567b9d3aa211",
          "message": "give everything a version",
          "timestamp": "2022-03-15T16:50:02Z",
          "tree_id": "802aa6edfea85c625901a0085c77220332de1878",
          "url": "https://github.com/boa-dev/boa/commit/16f3a0bd294e9d2d3d2211035c54567b9d3aa211"
        },
        "date": 1647364289157,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4203,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13307,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15713,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8884,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9579,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10213,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6211,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8095,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7886,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9698,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11426,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13023,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130129,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7345,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10673,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5459,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10712,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13837,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13484,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5281,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27949,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24464,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 922,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1969,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2253,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1414,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1437,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1637,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1393,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1386,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1650,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1604,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1290,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1832,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3918,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1623,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2128,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1282,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1029,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1099,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1459,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 489,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3403,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3295,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4440,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42134,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1771880,
            "range": "± 4537",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6030,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6203,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6611,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9359,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9404,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12426,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12429,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9592,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3183187,
            "range": "± 4807",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1390501,
            "range": "± 7880",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5234,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5824,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4689,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4587,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5746,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7384,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1988,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1085730,
            "range": "± 5320",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1002256,
            "range": "± 8570",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "jasonwilliams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "jasonwilliams",
            "username": "jasonwilliams"
          },
          "distinct": true,
          "id": "44aed9703829e31421f94a392f96cb4bb0e0f90c",
          "message": "remove deps",
          "timestamp": "2022-03-15T17:53:21Z",
          "tree_id": "43c92685730683401ecc47cc658522bc9b2ee8d9",
          "url": "https://github.com/boa-dev/boa/commit/44aed9703829e31421f94a392f96cb4bb0e0f90c"
        },
        "date": 1647368102725,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 306,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4653,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15042,
            "range": "± 818",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17311,
            "range": "± 1018",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9922,
            "range": "± 613",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10716,
            "range": "± 484",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11495,
            "range": "± 873",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6879,
            "range": "± 354",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9238,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9083,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10997,
            "range": "± 707",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13068,
            "range": "± 1001",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14748,
            "range": "± 916",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 152076,
            "range": "± 10455",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8154,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11601,
            "range": "± 644",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6088,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12039,
            "range": "± 967",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15319,
            "range": "± 812",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15134,
            "range": "± 1006",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5978,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31260,
            "range": "± 1487",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27492,
            "range": "± 1385",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1200,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2412,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2872,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1773,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1765,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2035,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1833,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1792,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2030,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2038,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1600,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2262,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4369,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2074,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2633,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1640,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1235,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1316,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1770,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 629,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4262,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4112,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5877,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 50800,
            "range": "± 2961",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 2212619,
            "range": "± 107811",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7519,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7640,
            "range": "± 394",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 8021,
            "range": "± 468",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10925,
            "range": "± 1034",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10812,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14948,
            "range": "± 1366",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14880,
            "range": "± 880",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11924,
            "range": "± 771",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3595966,
            "range": "± 158125",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1528955,
            "range": "± 57046",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6350,
            "range": "± 397",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6975,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5831,
            "range": "± 297",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 5347,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 7026,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 9138,
            "range": "± 768",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2203,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1245375,
            "range": "± 82441",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1097385,
            "range": "± 54240",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "jasonwilliams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "jasonwilliams",
            "username": "jasonwilliams"
          },
          "distinct": true,
          "id": "bbd6529f65419fdf3d00c8b52a06418893c2c1b3",
          "message": "remove push",
          "timestamp": "2022-03-15T18:25:18Z",
          "tree_id": "8128b579f2b801725ea0ee561c259d70691d5456",
          "url": "https://github.com/boa-dev/boa/commit/bbd6529f65419fdf3d00c8b52a06418893c2c1b3"
        },
        "date": 1647369960278,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 272,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4178,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13234,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15640,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8810,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9527,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10168,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6203,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8066,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7871,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9683,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11398,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12951,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130108,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7268,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10597,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5453,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9488,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13874,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13526,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5245,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27943,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24506,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 921,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1959,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2254,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1390,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1414,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1634,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1395,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1401,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1604,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1613,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1131,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1816,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3901,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1649,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2099,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1279,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1023,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1095,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1466,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 499,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3387,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3266,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4422,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42219,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1764308,
            "range": "± 3995",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5919,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6204,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6582,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9359,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9376,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12534,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12554,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9644,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3183339,
            "range": "± 4505",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1392045,
            "range": "± 5245",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5184,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5745,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4633,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4527,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5709,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7303,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1987,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1086744,
            "range": "± 7771",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1001253,
            "range": "± 5689",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "noreply@github.com",
            "name": "GitHub",
            "username": "web-flow"
          },
          "distinct": true,
          "id": "ebab0ecd67a2a0d2a438803484c2a0e24e9f09f1",
          "message": "Deploy playground to custom destination dir (#1943)",
          "timestamp": "2022-03-16T04:30:25Z",
          "tree_id": "555aaf044e87a7d212770b6258a0732fe42d7d70",
          "url": "https://github.com/boa-dev/boa/commit/ebab0ecd67a2a0d2a438803484c2a0e24e9f09f1"
        },
        "date": 1647406216615,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 281,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4173,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13307,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15621,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8816,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9509,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10165,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6198,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8060,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7878,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9690,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11436,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13011,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130184,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7272,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10611,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5413,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10778,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13826,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13606,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5254,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28041,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24479,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 903,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1964,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2238,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1409,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1404,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1625,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1417,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1393,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1616,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1614,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1276,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1803,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3917,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1639,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2114,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1312,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1023,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1101,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1453,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 492,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3379,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3267,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4423,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42350,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1760058,
            "range": "± 4906",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5942,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6233,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6625,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9358,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9318,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12476,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12460,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9664,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3179478,
            "range": "± 9414",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1387648,
            "range": "± 4588",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5239,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5772,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4652,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4632,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5801,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7437,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 2021,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1081885,
            "range": "± 10321",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 999149,
            "range": "± 6611",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "ebf2bc64cbbb114cab459cfec998ee202c86a222",
          "message": "Bump dyn-clone from 1.0.4 to 1.0.5 (#1946)\n\nBumps [dyn-clone](https://github.com/dtolnay/dyn-clone) from 1.0.4 to 1.0.5.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/1500eb86a675c0b5852c4ef0ae63c05541902233\"><code>1500eb8</code></a> Release 1.0.5</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/91b11c3e66cc4baa4e18d24e98719a2650737345\"><code>91b11c3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/dyn-clone/issues/14\">#14</a> from dtolnay/compiletest</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/68725087106863f4f11050eb8358b6edbde7bd32\"><code>6872508</code></a> Add ui test for missing DynClone supertrait</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/358e75127e1674f89e25e0f12f6f26220a1a945a\"><code>358e751</code></a> Detect warnings in CI</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/61ddd087b6438b28352734223d923d3995566c7d\"><code>61ddd08</code></a> Track raw pointers in miri CI run</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/c5d644a3fa0fa86c1f47a01560ea49b8e2e68593\"><code>c5d644a</code></a> Add a miri test job in CI</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/6c2e4585f25c9e1e70786cb537ba1d79ebd0b871\"><code>6c2e458</code></a> Declare minimum Rust version in Cargo metadata</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/943c9296d437297c8e285975d598afd07567c59d\"><code>943c929</code></a> Resolve semicolon_if_nothing_returned pedantic clippy lint</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/07b1c418d747782f2f1bf581697bb6c583555733\"><code>07b1c41</code></a> Run clippy on test suite too</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/15c588114affb18cbe7131c59d72716b414b032c\"><code>15c5881</code></a> Skip clippy job on pull requests</li>\n<li>Additional commits viewable in <a href=\"https://github.com/dtolnay/dyn-clone/compare/1.0.4...1.0.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=dyn-clone&package-manager=cargo&previous-version=1.0.4&new-version=1.0.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-16T14:26:29Z",
          "tree_id": "8183f53ebd761eacc70cf8a27f5a7f521463b0d4",
          "url": "https://github.com/boa-dev/boa/commit/ebf2bc64cbbb114cab459cfec998ee202c86a222"
        },
        "date": 1647443659974,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 264,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4247,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13460,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15672,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9001,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9662,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10288,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6342,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8240,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7995,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9782,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11562,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13123,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130196,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7372,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10795,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5473,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10880,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13953,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13688,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5259,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28039,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24552,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1934,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2282,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1394,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1419,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1613,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1405,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1397,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1608,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1603,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1806,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3791,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1619,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2080,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1302,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1043,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1109,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1481,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 503,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3361,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3268,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4512,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42666,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1788819,
            "range": "± 3397",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5945,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6225,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6707,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9287,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9269,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12529,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12515,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9670,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3161950,
            "range": "± 5146",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1388879,
            "range": "± 2859",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5246,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5800,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4647,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4510,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5705,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7472,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1964,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1083619,
            "range": "± 5874",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 992953,
            "range": "± 5503",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "dbfd42d0a98fa2719f0ba96478d642d21c992b30",
          "message": "Fix link to the playground (#1947)\n\nFixes the link to the playground in the Readme",
          "timestamp": "2022-03-16T17:12:46Z",
          "tree_id": "ebb0d73701e328891de1fe8bf7d6ef091df6d56d",
          "url": "https://github.com/boa-dev/boa/commit/dbfd42d0a98fa2719f0ba96478d642d21c992b30"
        },
        "date": 1647453783585,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 264,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4296,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13502,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15719,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8945,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9630,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10279,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6319,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8210,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8037,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9834,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11518,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13098,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130020,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7406,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10797,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5481,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10930,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14020,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13765,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5365,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28382,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24822,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 952,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2017,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2315,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1439,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1476,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1676,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1448,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1459,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1675,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1660,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1303,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1884,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3893,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1678,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2174,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1362,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1088,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1162,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1564,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 551,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3433,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3303,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4407,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42636,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1772803,
            "range": "± 2144",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5988,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6251,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6657,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9290,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9260,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12414,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12441,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9637,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3165219,
            "range": "± 5936",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1378362,
            "range": "± 3576",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5215,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5727,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4614,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4474,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5660,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7569,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1969,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1082561,
            "range": "± 6167",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 989638,
            "range": "± 4359",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "aaa07cf8266a89fab73f6b6b254328cc1f164aa1",
          "message": "Bump prettier from 2.5.1 to 2.6.0 (#1945)\n\nBumps [prettier](https://github.com/prettier/prettier) from 2.5.1 to 2.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/releases\">prettier's releases</a>.</em></p>\n<blockquote>\n<h2>2.6.0</h2>\n<p>🔗 <a href=\"https://prettier.io/blog/2022/03/16/2.6.0.html\">Release note</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/blob/main/CHANGELOG.md\">prettier's changelog</a>.</em></p>\n<blockquote>\n<h1>2.6.0</h1>\n<p><a href=\"https://github.com/prettier/prettier/compare/2.5.1...2.6.0\">diff</a></p>\n<p>🔗 <a href=\"https://prettier.io/blog/2022/03/16/2.6.0.html\">Release Notes</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/prettier/prettier/commit/cba25e6b095eb33e9185eb0657680fed3456e688\"><code>cba25e6</code></a> Release 2.6.0</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/4cae7e15a79429e29b1e36fad4b7d2d2f2dabd8d\"><code>4cae7e1</code></a> Build: Remove an extra new line in UMD bundle (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12467\">#12467</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/9a070503a340f83319385ea02c69f301b8d9bd1f\"><code>9a07050</code></a> Build: Remove <code>mainFields</code> override (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12466\">#12466</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/6cdf21af085e42a3e058d10835689cdfdcd89ad0\"><code>6cdf21a</code></a> Fix comment (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12464\">#12464</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/b26a24558aa72af0b19be2b1702ccff4b8e84f52\"><code>b26a245</code></a> Build(deps-dev): Bump esbuild from 0.14.26 to 0.14.27 (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12461\">#12461</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/34dcd96922efaff08ad72820da9efc2fb66d914f\"><code>34dcd96</code></a> Build: Add a plugin to throw unexpected warnings (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12463\">#12463</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/6fa3966d8a6cb13c20b49190613fffbdbd580858\"><code>6fa3966</code></a> Build(deps-dev): Bump <code>@​typescript-eslint/eslint-plugin</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12457\">#12457</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/901c21915578da2425f8a509213d4c24fb23e675\"><code>901c219</code></a> Build(deps): Bump <code>@​typescript-eslint/typescript-estree</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12458\">#12458</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/1bf2fa32a2b27d352546783a6459ddb870ba7fa9\"><code>1bf2fa3</code></a> Build(deps-dev): Bump <code>@​babel/core</code> from 7.17.5 to 7.17.7 (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12459\">#12459</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/cae195187f524dd74e60849e0a4392654423415b\"><code>cae1951</code></a> Fix <code>diff</code> package import (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12462\">#12462</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/prettier/prettier/compare/2.5.1...2.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=prettier&package-manager=npm_and_yarn&previous-version=2.5.1&new-version=2.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-16T18:18:48Z",
          "tree_id": "052f6905f4b7d8289c7ce669af3d3674b776c6f8",
          "url": "https://github.com/boa-dev/boa/commit/aaa07cf8266a89fab73f6b6b254328cc1f164aa1"
        },
        "date": 1647458064724,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 264,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4243,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13502,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15695,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8925,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9624,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10260,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6328,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8235,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8033,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9898,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11652,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13173,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129866,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7521,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11025,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5583,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10974,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13990,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13716,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5305,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28177,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24698,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 922,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1966,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2294,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1417,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1424,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1636,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1416,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1443,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1634,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1629,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1286,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1843,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3812,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1641,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2117,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1293,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1051,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1115,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1495,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 503,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3393,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3280,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4425,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42796,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1786714,
            "range": "± 2408",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6040,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6239,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6742,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9381,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9342,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12492,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12577,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9590,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3163074,
            "range": "± 5201",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1385494,
            "range": "± 4709",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5243,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5759,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4657,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4515,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5652,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7458,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1971,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1084379,
            "range": "± 23145",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995228,
            "range": "± 6085",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "superhawk610@gmail.com",
            "name": "Aaron Ross",
            "username": "superhawk610"
          },
          "committer": {
            "email": "superhawk610@gmail.com",
            "name": "Aaron Ross",
            "username": "superhawk610"
          },
          "distinct": false,
          "id": "520b81ea667233ab726f510cd52192ec6c67fbb4",
          "message": "add README for crates.io publish (#1952)\n\nThis Pull Request closes #1948.\r\n\r\nIt changes the following:\r\n\r\n- set `readme` in `boa_engine` so `README.md` will be published to crates.io\r\n- remove unnecessary `exclude` field from `Cargo.toml` in all apps\r\n\r\nI was unsure whether using a path outside of the workspace root was allowed for `readme` since it [doesn't get included in the release tarball](https://github.com/rust-lang/cargo/issues/5911), but this exact path is used by [juniper](https://github.com/graphql-rust/juniper/blob/master/juniper/Cargo.toml#L13) and [seems to work there](https://crates.io/crates/juniper). I believe `cargo publish` does a bit more than just uploading the tarball, including pulling the `readme` from any arbitrary path.\r\n\r\nThe default behaviour of `cargo package`/`cargo publish` if neither `exclude` or `include` is specified is to include all files from the package root, excluding\r\n\r\n- dotfiles\r\n- .gitignore'd files\r\n- subpackages (any subdirectory with a `Cargo.toml` file)\r\n- the `/target` directory\r\n\r\nThere's no need to explicitly exclude files from the parent directory since they're already excluded by default. This can be verified by running `cargo package --list` inside any workspace app:\r\n\r\n```plain\r\n$ cd boa_wasm\r\n$ cargo package --list\r\n.gitignore\r\nCargo.toml\r\nCargo.toml.orig\r\nsrc/lib.rs\r\n```\r\n\r\nYou can read more [here](https://doc.rust-lang.org/cargo/reference/manifest.html#the-exclude-and-include-fields).",
          "timestamp": "2022-03-17T17:09:13Z",
          "tree_id": "9615832980e1ff2e1cff32cc58547581cf515de4",
          "url": "https://github.com/boa-dev/boa/commit/520b81ea667233ab726f510cd52192ec6c67fbb4"
        },
        "date": 1647538715117,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 264,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4244,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13288,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15669,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9007,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9580,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10261,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6337,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8231,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8028,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9819,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11542,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13060,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129931,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7303,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10777,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5480,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10926,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14147,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13733,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5256,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28220,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24671,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 915,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1942,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2259,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1416,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1611,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1395,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1416,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1602,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1609,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1277,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1823,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3804,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1622,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2117,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1291,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1109,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1477,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 506,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3368,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3254,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4691,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42841,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1824294,
            "range": "± 3377",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6172,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6466,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6991,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9576,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9621,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12749,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12818,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9890,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3230851,
            "range": "± 3640",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1397229,
            "range": "± 3107",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5489,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5992,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4825,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4679,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5730,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7764,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1965,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1092747,
            "range": "± 6719",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1002256,
            "range": "± 5182",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "superhawk610@gmail.com",
            "name": "Aaron Ross",
            "username": "superhawk610"
          },
          "committer": {
            "email": "superhawk610@gmail.com",
            "name": "Aaron Ross",
            "username": "superhawk610"
          },
          "distinct": false,
          "id": "6498216c3f3842a8d2c38d34fcfd04a1fb804ccb",
          "message": "convert inner datetime to local in `to_date_string` (#1953)\n\nThis Pull Request fixes/closes #1942.\r\n\r\n`Date.prototype.toDateString` should return a value representing the local date. The Rust `Date` inner value represents UTC time, so it should be adjusted to local time before formatting (see equivalent conversions performed by `to_string` and `to_time_string`).\r\n\r\nTo verify this is working as intended, run the test suite with your OS timezone set to `GMT+0`, then again with `GMT+10`. The test `date_proto_to_date_string` should pass for each. For me (Ubuntu via WSL), this can be done with `sudo dpkg-reconfigure tzdata`.\r\n\r\nThis PR also fixes a couple other test cases that used the wrong month value (as noted at the top of the file, JS months are 0-based while `chrono` months are 1-based).",
          "timestamp": "2022-03-17T17:18:46Z",
          "tree_id": "0566c35369508d8eafe707462b63b4774f663c93",
          "url": "https://github.com/boa-dev/boa/commit/6498216c3f3842a8d2c38d34fcfd04a1fb804ccb"
        },
        "date": 1647539271729,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4283,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13280,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15569,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8804,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9516,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10165,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6206,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8119,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7910,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9740,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11465,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13000,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129078,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7334,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10682,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5468,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10811,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13719,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13483,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5212,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27755,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24400,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 914,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1963,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2283,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1373,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1392,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1600,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1399,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1401,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1635,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1606,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1272,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1821,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3788,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1637,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2098,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1276,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1115,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1477,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 507,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3377,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3227,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4435,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42705,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1776034,
            "range": "± 2971",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6037,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6291,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6666,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9305,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9318,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12618,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12598,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9696,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3179947,
            "range": "± 5178",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1386063,
            "range": "± 4031",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5187,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5739,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4668,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4513,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5686,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7429,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1973,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1084017,
            "range": "± 8592",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 997170,
            "range": "± 7624",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "ademilsonft@outlook.com",
            "name": "Ademílson F. Tonato",
            "username": "ftonato"
          },
          "committer": {
            "email": "ademilsonft@outlook.com",
            "name": "Ademílson F. Tonato",
            "username": "ftonato"
          },
          "distinct": false,
          "id": "3b4708ce2f7275f607e061e6c5d070f78f246c77",
          "message": "docs: update README by structuring the topics (#1958)\n\nIt changes the following:\r\n\r\n- Updates (structuring) the readme to make it easier for first-time users to read the repository.",
          "timestamp": "2022-03-19T21:46:16Z",
          "tree_id": "9aff1e6f27b6893696b32269a7d9c99c71f6aea7",
          "url": "https://github.com/boa-dev/boa/commit/3b4708ce2f7275f607e061e6c5d070f78f246c77"
        },
        "date": 1647728343176,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 284,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4195,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13310,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15516,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8813,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9501,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10166,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6299,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8149,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7989,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9775,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11422,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12923,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129060,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7276,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10569,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5383,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10824,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13776,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13497,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5268,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27700,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24318,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 912,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1972,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2289,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1382,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1407,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1617,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1411,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1404,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1626,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1635,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1267,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1830,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3811,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1663,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2112,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1314,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1106,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1468,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 518,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3415,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3274,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4581,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42750,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1771474,
            "range": "± 3664",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5966,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6240,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6684,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9286,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9344,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12552,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12448,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9633,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3173907,
            "range": "± 10610",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1387561,
            "range": "± 8882",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5252,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5789,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4653,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4516,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5718,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7493,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1976,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1088477,
            "range": "± 5669",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 999900,
            "range": "± 7426",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "f25ce46a1e9750e9d1276a631d2508ffbbac5de7",
          "message": "Migrate to NPM and cleanup Playground (#1951)\n\nThis Pull Request closes #1912 by migrating to a NPM based build, hopefully making it easier to contribute to the Playground.\r\n\r\nAlso, reduces the number of features of the editor, since most of them were support for other languages or features that don't make sense in a playground environment. This considerably reduces the number of fetched files per page load and the total size of the playground.",
          "timestamp": "2022-03-20T14:01:27Z",
          "tree_id": "6b0c7bf360fe79e3d925eaf192ba596a35187327",
          "url": "https://github.com/boa-dev/boa/commit/f25ce46a1e9750e9d1276a631d2508ffbbac5de7"
        },
        "date": 1647786493007,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4213,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13241,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15524,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8774,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9456,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10109,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6203,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8122,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7905,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9735,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11431,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13022,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129170,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7279,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10595,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5418,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10765,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13766,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13505,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5241,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27817,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24402,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 902,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1975,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2261,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1388,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1409,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1385,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1407,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1628,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1613,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1265,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1819,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3804,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1622,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2122,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1308,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1040,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1121,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1485,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 509,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3360,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3246,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4432,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42460,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1786400,
            "range": "± 1437",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5964,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6249,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6703,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9313,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9334,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12521,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12576,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9754,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3219246,
            "range": "± 4799",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1387609,
            "range": "± 4249",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5299,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5809,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4697,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4691,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5675,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7463,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1973,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1085249,
            "range": "± 8924",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 993758,
            "range": "± 6935",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "kilotaras@gmail.com",
            "name": "Taras Boiko",
            "username": "kilotaras"
          },
          "committer": {
            "email": "kilotaras@gmail.com",
            "name": "Taras Boiko",
            "username": "kilotaras"
          },
          "distinct": false,
          "id": "e73c3fd65ac6441965141c929c3f4526abbfe978",
          "message": "Fix panic on AST dump in JSON format (#1959)\n\nSome of the fields in AST structs were both\r\n\r\n1. Arrays\r\n2. Marked as 'flatten'\r\n\r\nThis is illegal per serde docs (and doesn't really make sense).\r\nThe fix is to remove the attribute.\r\n\r\nSee: https://serde.rs/attr-flatten.html\r\nFixes: #1920\n\nCo-authored-by: Taras Boiko <me@tboiko.com>",
          "timestamp": "2022-03-20T22:51:55Z",
          "tree_id": "a2a6f0ec63d217c78588258a5b9853e76a7e2ccc",
          "url": "https://github.com/boa-dev/boa/commit/e73c3fd65ac6441965141c929c3f4526abbfe978"
        },
        "date": 1647818321525,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4196,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13244,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15524,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8851,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9589,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10197,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6233,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8165,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7887,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9755,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11471,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12955,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129542,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7306,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10724,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5444,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10735,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13772,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13510,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5222,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27794,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24342,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 931,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1955,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2276,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1429,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1601,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1379,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1385,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1627,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1639,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1261,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1840,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3806,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1649,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2115,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1317,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1048,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1113,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1468,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 506,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3360,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3237,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4397,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42424,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1789298,
            "range": "± 3277",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5973,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6327,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6777,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9232,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9232,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12535,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12549,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9640,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3171221,
            "range": "± 5770",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1397874,
            "range": "± 4543",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5204,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5770,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4626,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4513,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5791,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7491,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1976,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1090728,
            "range": "± 12614",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1000932,
            "range": "± 14094",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "manthanmji@gmail.com",
            "name": "Magic Panda",
            "username": "manthanabc"
          },
          "committer": {
            "email": "manthanmji@gmail.com",
            "name": "Magic Panda",
            "username": "manthanabc"
          },
          "distinct": false,
          "id": "5fa16685ec29cd74edbde33afbcd998abe3c443e",
          "message": "migrated to clap 3 (#1957)\n\nThis Pull Request fixes/closes #1955.\r\n\r\nIt changes the following:\r\n\r\n- changes structopt to clap",
          "timestamp": "2022-03-20T23:05:19Z",
          "tree_id": "951b227be8306f868259ce392ed94036da5956a8",
          "url": "https://github.com/boa-dev/boa/commit/5fa16685ec29cd74edbde33afbcd998abe3c443e"
        },
        "date": 1647819441511,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4201,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13222,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15572,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8741,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9429,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10092,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6222,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8136,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7906,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9756,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11442,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13093,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129033,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7240,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10575,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5416,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10768,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13753,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13490,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5243,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27752,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24359,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 916,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1980,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2257,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1407,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1413,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1616,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1382,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1380,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1621,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1621,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1803,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3813,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1644,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2100,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1304,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1043,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1125,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1477,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 505,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3346,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3234,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4468,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42605,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1792982,
            "range": "± 2029",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5976,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6269,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6785,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9336,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9360,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12550,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12545,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9640,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3168415,
            "range": "± 4391",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1386588,
            "range": "± 3261",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5239,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5776,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4661,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4543,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5675,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7510,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1975,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1082604,
            "range": "± 7447",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995866,
            "range": "± 5453",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "2d01d122a3699b4995e3791de23f2501e6b467b7",
          "message": "Bump actions/cache from 2.1.7 to 3 (#1966)\n\nBumps [actions/cache](https://github.com/actions/cache) from 2.1.7 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>\n<p>This change adds a minimum runner version(node12 -&gt; node16), which can break users using an out-of-date/fork of the runner. This would be most commonly affecting users on GHES 3.3 or before, as those runners do not support node16 actions and they can use actions from github.com via <a href=\"https://docs.github.com/en/enterprise-server@3.0/admin/github-actions/managing-access-to-actions-from-githubcom/enabling-automatic-access-to-githubcom-actions-using-github-connect\">github connect</a> or manually copying the repo to their GHES instance.</p>\n</li>\n<li>\n<p>Few dependencies and cache action usage examples have also been updated.</p>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/4b0cf6cc4619e737324ddfcec08fff2413359514\"><code>4b0cf6c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/769\">#769</a> from actions/users/ashwinsangem/bump_major_version</li>\n<li><a href=\"https://github.com/actions/cache/commit/60c606a2b4c5358e11c2ca7b4694e59049d008d1\"><code>60c606a</code></a> Update licensed files</li>\n<li><a href=\"https://github.com/actions/cache/commit/b6e9a919a7da3606e9b2db756823ee1c39c7b48d\"><code>b6e9a91</code></a> Revert &quot;Updated to the latest version.&quot;</li>\n<li><a href=\"https://github.com/actions/cache/commit/c8425035834f98c304ecf92f5d50f41d433885c1\"><code>c842503</code></a> Updated to the latest version.</li>\n<li><a href=\"https://github.com/actions/cache/commit/2b7da2a62c3af9fa2692cd8d2d117da76faf31ac\"><code>2b7da2a</code></a> Bumped up to a major version.</li>\n<li><a href=\"https://github.com/actions/cache/commit/deae296ab340574da1ec86242984dfc91f0a7b81\"><code>deae296</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/651\">#651</a> from magnetikonline/fix-golang-windows-example</li>\n<li><a href=\"https://github.com/actions/cache/commit/c7c46bcb6db3c571021a3a2dc2d2557b512ecace\"><code>c7c46bc</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/707\">#707</a> from duxtland/main</li>\n<li><a href=\"https://github.com/actions/cache/commit/6535c5fb5fe2870754afba7bd4e514867ac9cb98\"><code>6535c5f</code></a> Regenerated <code>examples.md</code> TOC</li>\n<li><a href=\"https://github.com/actions/cache/commit/3fdafa472e0db16435add384585aa138ffdd16d3\"><code>3fdafa4</code></a> Update GitHub Actions status badge markdown in <code>README.md</code></li>\n<li><a href=\"https://github.com/actions/cache/commit/341e6d75d9826beb2fa659263d862f6aec63a064\"><code>341e6d7</code></a> Merge branch 'actions:main' into fix-golang-windows-example</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/cache/compare/v2.1.7...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2.1.7&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-22T12:46:31Z",
          "tree_id": "a375c4e4505fb39f169b1fa4601a741e6f44a8a2",
          "url": "https://github.com/boa-dev/boa/commit/2d01d122a3699b4995e3791de23f2501e6b467b7"
        },
        "date": 1647954853711,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4204,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13230,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15535,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8832,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9550,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10151,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6197,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8134,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7926,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9739,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11400,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12878,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 128995,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7260,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10604,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5425,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10753,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13782,
            "range": "± 274",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13483,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5228,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27832,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24320,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 915,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1952,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2266,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1407,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1620,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1408,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1390,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1631,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1615,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1266,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1821,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3817,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1613,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2081,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1295,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1047,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1117,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1488,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 511,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3346,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3240,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4447,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42688,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1783065,
            "range": "± 3391",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6024,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6281,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6714,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9308,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9291,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12501,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12574,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9646,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3176630,
            "range": "± 5348",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1384739,
            "range": "± 3345",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5262,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5784,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4635,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4557,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5775,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7527,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1977,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1083387,
            "range": "± 4907",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 989163,
            "range": "± 4454",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6c9e210088c748507f126d5620c7299d8d0cf053",
          "message": "Bump peter-evans/create-or-update-comment from 1.4.5 to 2 (#1967)\n\nBumps [peter-evans/create-or-update-comment](https://github.com/peter-evans/create-or-update-comment) from 1.4.5 to 2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/peter-evans/create-or-update-comment/releases\">peter-evans/create-or-update-comment's releases</a>.</em></p>\n<blockquote>\n<h2>Create or Update Comment v2.0.0</h2>\n<h2>What's new</h2>\n<ul>\n<li>Updated runtime to Node.js 16\n<ul>\n<li>The action now requires a minimum version of v2.285.0 for the <a href=\"https://github.com/actions/runner/releases/tag/v2.285.0\">Actions Runner</a>.</li>\n<li>If using GitHub Enterprise Server, the action requires <a href=\"https://docs.github.com/en/enterprise-server@3.4/admin/release-notes\">GHES 3.4</a> or later.</li>\n</ul>\n</li>\n</ul>\n<h2>What's Changed</h2>\n<ul>\n<li>Use double quotes to preserve adjacent spaces correctly by <a href=\"https://github.com/mfn\"><code>@​mfn</code></a> in <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/pull/95\">peter-evans/create-or-update-comment#95</a></li>\n<li>Remove workflow by <a href=\"https://github.com/peter-evans\"><code>@​peter-evans</code></a> in <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/pull/101\">peter-evans/create-or-update-comment#101</a></li>\n<li>Update runtime to node 16 by <a href=\"https://github.com/peter-evans\"><code>@​peter-evans</code></a> in <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/pull/105\">peter-evans/create-or-update-comment#105</a></li>\n<li>7 dependency updates by <a href=\"https://github.com/actions-bot\"><code>@​actions-bot</code></a> and <a href=\"https://github.com/dependabot\"><code>@​dependabot</code></a></li>\n</ul>\n<h2>New Contributors</h2>\n<ul>\n<li><a href=\"https://github.com/mfn\"><code>@​mfn</code></a> made their first contribution in <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/pull/95\">peter-evans/create-or-update-comment#95</a></li>\n</ul>\n<p><strong>Full Changelog</strong>: <a href=\"https://github.com/peter-evans/create-or-update-comment/compare/v1.4.5...v2.0.0\">https://github.com/peter-evans/create-or-update-comment/compare/v1.4.5...v2.0.0</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/c9fcb64660bc90ec1cc535646af190c992007c32\"><code>c9fcb64</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/issues/105\">#105</a> from peter-evans/v2</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/862a968b6893951e455b61df4607c63be927e5c1\"><code>862a968</code></a> Update runtime to node 16</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/63e171afd597dc4be7b89306575bccc262e512ef\"><code>63e171a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/issues/101\">#101</a> from peter-evans/rm-workflow</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/741ee284046258eaf09101cb150ba8e25a054371\"><code>741ee28</code></a> Remove workflow</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/ad0c5a210255bfe327cd550bc3f11b49e318be3a\"><code>ad0c5a2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/issues/97\">#97</a> from peter-evans/update-distribution</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/d7438411f0dd7ae2aa34902cceec4d8ebc4ce334\"><code>d743841</code></a> Update distribution</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/fed340e087b2f1e43996ab11e1faeaf4b1ab3ead\"><code>fed340e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/issues/94\">#94</a> from peter-evans/update-dependencies</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/dacf24c705ea9d73835355f4b471a67f69a17cfe\"><code>dacf24c</code></a> Update dependencies</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/85a7ce63456c26d56a5ea525941e3d89f9e6e20a\"><code>85a7ce6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/peter-evans/create-or-update-comment/issues/95\">#95</a> from mfn/mfn-bash-fixes</li>\n<li><a href=\"https://github.com/peter-evans/create-or-update-comment/commit/6484e4d98fefc8e4a43ae035ac90b762463002ad\"><code>6484e4d</code></a> Use double quotes to preserve adjacent spaces correctly</li>\n<li>Additional commits viewable in <a href=\"https://github.com/peter-evans/create-or-update-comment/compare/v1.4.5...v2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=peter-evans/create-or-update-comment&package-manager=github_actions&previous-version=1.4.5&new-version=2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-22T12:54:20Z",
          "tree_id": "25098a485ebb688cb960771119ec114ff56feaf7",
          "url": "https://github.com/boa-dev/boa/commit/6c9e210088c748507f126d5620c7299d8d0cf053"
        },
        "date": 1647955519827,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 234,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3708,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11721,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13808,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7817,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8434,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 8993,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5477,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7176,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 6966,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8608,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10072,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11458,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 113892,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6421,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10589,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4780,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9505,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12138,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 11902,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4647,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24456,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21377,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 810,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1722,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2036,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1225,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1240,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1428,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1265,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1258,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1443,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1418,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1105,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1603,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3363,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1438,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1845,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1148,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1059,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1116,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1309,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 458,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2970,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2867,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3944,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 37558,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1576150,
            "range": "± 3541",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5347,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5568,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5966,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8220,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8221,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11107,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12585,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9725,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3190310,
            "range": "± 7914",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1234046,
            "range": "± 3509",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4651,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5211,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4148,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3996,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5035,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6684,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1742,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 961232,
            "range": "± 4156",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 997722,
            "range": "± 6967",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3ad9d18d74cda3c2bdc1e01b9e1857c20e0d25d4",
          "message": "Bump node-forge from 1.2.1 to 1.3.0 (#1969)\n\nBumps [node-forge](https://github.com/digitalbazaar/forge) from 1.2.1 to 1.3.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/digitalbazaar/forge/blob/main/CHANGELOG.md\">node-forge's changelog</a>.</em></p>\n<blockquote>\n<h2>1.3.0 - 2022-03-17</h2>\n<h3>Security</h3>\n<ul>\n<li>Three RSA PKCS#1 v1.5 signature verification issues were reported by Moosa\nYahyazadeh (<a href=\"mailto:moosa-yahyazadeh@uiowa.edu\">moosa-yahyazadeh@uiowa.edu</a>).</li>\n<li><strong>HIGH</strong>: Leniency in checking <code>digestAlgorithm</code> structure can lead to\nsignature forgery.\n<ul>\n<li>The code is lenient in checking the digest algorithm structure. This can\nallow a crafted structure that steals padding bytes and uses unchecked\nportion of the PKCS#1 encoded message to forge a signature when a low\npublic exponent is being used. For more information, please see\n<a href=\"https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/\">&quot;Bleichenbacher's RSA signature forgery based on implementation\nerror&quot;</a>\nby Hal Finney.</li>\n<li>CVE ID: <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24771\">CVE-2022-24771</a></li>\n<li>GHSA ID: <a href=\"https://github.com/digitalbazaar/forge/security/advisories/GHSA-cfm4-qjh2-4765\">GHSA-cfm4-qjh2-4765</a></li>\n</ul>\n</li>\n<li><strong>HIGH</strong>: Failing to check tailing garbage bytes can lead to signature\nforgery.\n<ul>\n<li>The code does not check for tailing garbage bytes after decoding a\n<code>DigestInfo</code> ASN.1 structure. This can allow padding bytes to be removed\nand garbage data added to forge a signature when a low public exponent is\nbeing used.  For more information, please see <a href=\"https://mailarchive.ietf.org/arch/msg/openpgp/5rnE9ZRN1AokBVj3VqblGlP63QE/\">&quot;Bleichenbacher's RSA\nsignature forgery based on implementation\nerror&quot;</a>\nby Hal Finney.</li>\n<li>CVE ID: <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24772\">CVE-2022-24772</a></li>\n<li>GHSA ID: <a href=\"https://github.com/digitalbazaar/forge/security/advisories/GHSA-x4jg-mjrx-434g\">GHSA-x4jg-mjrx-434g</a></li>\n</ul>\n</li>\n<li><strong>MEDIUM</strong>: Leniency in checking type octet.\n<ul>\n<li><code>DigestInfo</code> is not properly checked for proper ASN.1 structure. This can\nlead to successful verification with signatures that contain invalid\nstructures but a valid digest.</li>\n<li>CVE ID: <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-24773\">CVE-2022-24773</a></li>\n<li>GHSA ID: <a href=\"https://github.com/digitalbazaar/forge/security/advisories/GHSA-2r2c-g63r-vccr\">GHSA-2r2c-g63r-vccr</a></li>\n</ul>\n</li>\n</ul>\n<h3>Fixed</h3>\n<ul>\n<li>[asn1] Add fallback to pretty print invalid UTF8 data.</li>\n<li>[asn1] <code>fromDer</code> is now more strict and will default to ensuring all input\nbytes are parsed or throw an error. A new option <code>parseAllBytes</code> can disable\nthis behavior.\n<ul>\n<li><strong>NOTE</strong>: The previous behavior is being changed since it can lead to\nsecurity issues with crafted inputs. It is possible that code doing custom\nDER parsing may need to adapt to this new behavior and optional flag.</li>\n</ul>\n</li>\n<li>[rsa] Add and use a validator to check for proper structure of parsed ASN.1\n<code>RSASSA-PKCS-v1_5</code> <code>DigestInfo</code> data. Additionally check that the hash\nalgorithm identifier is a known value from RFC 8017\n<code>PKCS1-v1-5DigestAlgorithms</code>. An invalid <code>DigestInfo</code> or algorithm identifier\nwill now throw an error.\n<ul>\n<li><strong>NOTE</strong>: The previous lenient behavior is being changed to be more strict\nsince it could lead to security issues with crafted inputs. It is possible\nthat code may have to handle the errors from these stricter checks.</li>\n</ul>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/6c5b90133d46af63d139b98bf65371732c8c7dad\"><code>6c5b901</code></a> Release 1.3.0.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/0f3972ad5883a9869703c6f54a0627bc454bca47\"><code>0f3972a</code></a> Update changelog.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/dc77b39dd347e7f8b60a0f25a311fe5f06130579\"><code>dc77b39</code></a> Fix error checking.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/bb822c02df0b61211836472e29b9790cc541cdb2\"><code>bb822c0</code></a> Add advisory links.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/d4395fec831622837ecfec9e428d4620e208f9a8\"><code>d4395fe</code></a> Update changelog.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/a4405bb9d6b638084df478fa4ac60a410332c2d8\"><code>a4405bb</code></a> Improve signature verification tests.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/aa9372d6dd78eb1479392b9274457036c2404b66\"><code>aa9372d</code></a> Add missing RFC 8017 algorithm identifiers.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/3f0b49a0573ef1bb7af7f5673c0cfebf00424df1\"><code>3f0b49a</code></a> Fix signature verification issues.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/c20f309311d83445e11abe7c313cc4b467c18914\"><code>c20f309</code></a> Adjust remaining length.</li>\n<li><a href=\"https://github.com/digitalbazaar/forge/commit/e27f61230f19fb9f085a163f31d0573305271b84\"><code>e27f612</code></a> Remove unused option.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/digitalbazaar/forge/compare/v1.2.1...v1.3.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=node-forge&package-manager=npm_and_yarn&previous-version=1.2.1&new-version=1.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/boa-dev/boa/network/alerts).\n\n</details>",
          "timestamp": "2022-03-22T18:55:39Z",
          "tree_id": "1ae2ebb4d5fd1ab1a5f558f500e052e8edf43d01",
          "url": "https://github.com/boa-dev/boa/commit/3ad9d18d74cda3c2bdc1e01b9e1857c20e0d25d4"
        },
        "date": 1647976994662,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 265,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4214,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13181,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15544,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8767,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9422,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10075,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6184,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8133,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7882,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9736,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11400,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12932,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129049,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7249,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10557,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5388,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10763,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13784,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13510,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5272,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27786,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24338,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 909,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1949,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2269,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1395,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1400,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1606,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1419,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1397,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1634,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1623,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1263,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1814,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3798,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2120,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1306,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1040,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1116,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1479,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 511,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3362,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4453,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42542,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1776054,
            "range": "± 3182",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6006,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6250,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6715,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9280,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9232,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12474,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12486,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9661,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3177005,
            "range": "± 5016",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1387694,
            "range": "± 3954",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5210,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5771,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4630,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4521,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5707,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7521,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1973,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1086470,
            "range": "± 8930",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995945,
            "range": "± 6187",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "e1c2e14b6b3f8970cd1d0cf8185e92e0a70a0400",
          "message": "Preserve ints when executing int operations (#1964)\n\nThis Pull Request fixes/closes #1962.\r\n\r\nIt changes the following:\r\n\r\n- When executing arithmetic operations on `JsValue`s, try to use integer operations and fallback to `f64` operations on error.\r\n- Adds tests for serde_json conversions from integer operations.",
          "timestamp": "2022-03-22T19:03:31Z",
          "tree_id": "4924c1f67af7e8c56b44bf52491774db3b74cc41",
          "url": "https://github.com/boa-dev/boa/commit/e1c2e14b6b3f8970cd1d0cf8185e92e0a70a0400"
        },
        "date": 1647977567397,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 264,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4240,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13351,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15521,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8988,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9673,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10321,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6271,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8182,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7996,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9859,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11518,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13003,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130279,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7346,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10793,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5453,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10822,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13984,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13610,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5197,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27884,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24523,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 903,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1940,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2248,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1368,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1385,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1608,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1408,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1403,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1609,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1600,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1262,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1802,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3803,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1619,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2101,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1301,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1049,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1107,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1461,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 504,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3407,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3262,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4520,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42398,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1787798,
            "range": "± 4245",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6009,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6268,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6717,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9293,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9345,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12484,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12567,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9609,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3211033,
            "range": "± 4660",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1390207,
            "range": "± 3865",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5321,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5820,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4700,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4640,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5677,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7570,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1981,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1078598,
            "range": "± 9852",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 995464,
            "range": "± 7175",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "pawan.dogra99@gmail.com",
            "name": "pd",
            "username": "pdogr"
          },
          "committer": {
            "email": "pawan.dogra99@gmail.com",
            "name": "pd",
            "username": "pdogr"
          },
          "distinct": false,
          "id": "e2630faf82a27e958d0ca6c9b1c81554bcc07ff3",
          "message": "Fix panic in do while  (#1968)\n\n `Node::DoWhileLoop` ast node had a buggy bytecode generation where `self.patch_jump(exit)` was called after emitting `LoopEnd` opcode. This would patch the loop exit to the instruction following the do while code, which would panic in cases where do while was enclosed in a block statement.\r\n\r\nThis Pull Request fixes #1929.\r\n\r\nIt changes the following:\r\n- Patch jump before emitting `Opcode::LoopEnd`\r\n- Add test which has do while statement inside a block statement to demonstrate that the change fixes the panic.",
          "timestamp": "2022-03-22T19:28:14Z",
          "tree_id": "ee26129b760106ee28ae944f8cf07d38ba032c94",
          "url": "https://github.com/boa-dev/boa/commit/e2630faf82a27e958d0ca6c9b1c81554bcc07ff3"
        },
        "date": 1647979280841,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4281,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13333,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15658,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8987,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9636,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10332,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6351,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8280,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7992,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9919,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11535,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13076,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130191,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7390,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10774,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5465,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10984,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14082,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13775,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5192,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27981,
            "range": "± 632",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24765,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 902,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1946,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2249,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1357,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1404,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1603,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1381,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1374,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1614,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1597,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1264,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1780,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3802,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1632,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2081,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1271,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1026,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1090,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1450,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3384,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3268,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4442,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 42173,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1773552,
            "range": "± 3727",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5972,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6188,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6717,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8843,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8837,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12059,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12012,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9639,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3201521,
            "range": "± 6362",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1404382,
            "range": "± 3869",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5237,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5751,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4607,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4528,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5811,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7429,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 1947,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 1090406,
            "range": "± 11073",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 1003943,
            "range": "± 6688",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "pawan.dogra99@gmail.com",
            "name": "pd",
            "username": "pdogr"
          },
          "committer": {
            "email": "pawan.dogra99@gmail.com",
            "name": "pd",
            "username": "pdogr"
          },
          "distinct": false,
          "id": "4133801220b10dc4ddcb81e0e5ffbfc8a1e3a007",
          "message": "[perf][vm] (#1973)\n\nThis Pull Request fixes/closes #1972 .\r\n\r\nIt changes the following:\r\n- remove `format!` macro in `execute_instruction` and replace by `&'static str`",
          "timestamp": "2022-03-25T14:43:51Z",
          "tree_id": "dcb88b9e9356806e75429a58050a6cd2fe83c229",
          "url": "https://github.com/boa-dev/boa/commit/4133801220b10dc4ddcb81e0e5ffbfc8a1e3a007"
        },
        "date": 1648221383251,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 319,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4588,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14921,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17377,
            "range": "± 373",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9824,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10500,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11138,
            "range": "± 300",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6866,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9029,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8675,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10789,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12765,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14432,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147944,
            "range": "± 1949",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8008,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11835,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5936,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11968,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15683,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15387,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5629,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30958,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26832,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1069,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2264,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2615,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1620,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1661,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1886,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1658,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1650,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1921,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1905,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1495,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2106,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4651,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1948,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2476,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1531,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1105,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1156,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1583,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 608,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3952,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3815,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4559,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17737,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1501356,
            "range": "± 18860",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5602,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5743,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5890,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9371,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9356,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12484,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12670,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8747,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2857804,
            "range": "± 22317",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1286672,
            "range": "± 20584",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4757,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5014,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4447,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3570,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4701,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6629,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 808,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 811132,
            "range": "± 11752",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 771300,
            "range": "± 12989",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3549ea504608850d8b7d961aa5d257a14f2bbeaf",
          "message": "Bump minimist from 1.2.5 to 1.2.6 (#1978)\n\nBumps [minimist](https://github.com/substack/minimist) from 1.2.5 to 1.2.6.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/substack/minimist/commit/7efb22a518b53b06f5b02a1038a88bd6290c2846\"><code>7efb22a</code></a> 1.2.6</li>\n<li><a href=\"https://github.com/substack/minimist/commit/ef88b9325f77b5ee643ccfc97e2ebda577e4c4e2\"><code>ef88b93</code></a> security notice for additional prototype pollution issue</li>\n<li><a href=\"https://github.com/substack/minimist/commit/c2b981977fa834b223b408cfb860f933c9811e4d\"><code>c2b9819</code></a> isConstructorOrProto adapted from PR</li>\n<li><a href=\"https://github.com/substack/minimist/commit/bc8ecee43875261f4f17eb20b1243d3ed15e70eb\"><code>bc8ecee</code></a> test from prototype pollution PR</li>\n<li>See full diff in <a href=\"https://github.com/substack/minimist/compare/1.2.5...1.2.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=minimist&package-manager=npm_and_yarn&previous-version=1.2.5&new-version=1.2.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/boa-dev/boa/network/alerts).\n\n</details>",
          "timestamp": "2022-03-25T17:24:22Z",
          "tree_id": "677ee39edceb4234845ee5f01051408979fc4b28",
          "url": "https://github.com/boa-dev/boa/commit/3549ea504608850d8b7d961aa5d257a14f2bbeaf"
        },
        "date": 1648230827073,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4674,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14438,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16804,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9709,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10456,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11071,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7025,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9040,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8775,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10681,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12626,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14180,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 139293,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7983,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11525,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5977,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11775,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15155,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14751,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5444,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30225,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26511,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 950,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2093,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2420,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1499,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1459,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1741,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1483,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1450,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1734,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1716,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1300,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1978,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3838,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1719,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2277,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1375,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1081,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1140,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1538,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 493,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3760,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3617,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3986,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14693,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1334100,
            "range": "± 1276",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4745,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4912,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4933,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8243,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8243,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11246,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11231,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7655,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2452891,
            "range": "± 2330",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1082760,
            "range": "± 3124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4103,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4343,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3859,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3112,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4153,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5773,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 444,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 700606,
            "range": "± 4798",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 665099,
            "range": "± 5795",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3f3f0aae6ec975221c25f884307950fe95991598",
          "message": "Bump prettier from 2.6.0 to 2.6.1 (#1977)\n\nBumps [prettier](https://github.com/prettier/prettier) from 2.6.0 to 2.6.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/releases\">prettier's releases</a>.</em></p>\n<blockquote>\n<h2>2.6.1</h2>\n<p>🔗 <a href=\"https://github.com/prettier/prettier/blob/main/CHANGELOG.md#261\">Changelog</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/blob/main/CHANGELOG.md\">prettier's changelog</a>.</em></p>\n<blockquote>\n<h1>2.6.1</h1>\n<p><a href=\"https://github.com/prettier/prettier/compare/2.6.0...2.6.1\">diff</a></p>\n<h4>Ignore <code>loglevel</code> when printing information (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/pull/12477\">#12477</a> by <a href=\"https://github.com/fisker\"><code>@​fisker</code></a>)</h4>\n<!-- raw HTML omitted -->\n<pre lang=\"bash\"><code></code></pre>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/prettier/prettier/commit/ad505bf771126f39688b13a1319dfeef49fb4d5b\"><code>ad505bf</code></a> Release 2.6.1</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/6128c5c4e4bf4f03e965561d6191ee99550db287\"><code>6128c5c</code></a> Build: Fix <code>esbuildPluginReplaceModule</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12530\">#12530</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/11649270f676b6d2ec40c09a95e2714f74939ea7\"><code>1164927</code></a> Enable <code>unicorn/text-encoding-identifier-case</code> rule (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12526\">#12526</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/0e6c1d58d836fa4f3c388aa5c4fa9bd87173300d\"><code>0e6c1d5</code></a> Enter OTP via <code>enquirer</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12528\">#12528</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/67edeeaf72cba521aae1ad5f93fd17ac7e4d7ef0\"><code>67edeea</code></a> Build(deps): Bump minimist from 1.2.5 to 1.2.6 (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12513\">#12513</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/6664253b9ef24e7f0d6744c56424705ff2307537\"><code>6664253</code></a> Fix error when bundle prettier with webpack (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12511\">#12511</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/9e7f7b9295a0e7c34ac0c03ccfb79a2a6aad9abd\"><code>9e7f7b9</code></a> Updated the State of JS Survey Results (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12350\">#12350</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/becb6c9b74c60291b7fd964b9fe88d5ed4148a23\"><code>becb6c9</code></a> Fix non-idempotent formatting of function calls with complex type arguments (...</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/1939f92be583a2c5317cb044e3d4243e1a591c01\"><code>1939f92</code></a> Build(deps): Bump <code>@​typescript-eslint/typescript-estree</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12514\">#12514</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/6fece964c8ab3e3c0657476949f9c3bdf1e9887c\"><code>6fece96</code></a> Build(deps): Bump json5 from 2.2.0 to 2.2.1 (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12515\">#12515</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/prettier/prettier/compare/2.6.0...2.6.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=prettier&package-manager=npm_and_yarn&previous-version=2.6.0&new-version=2.6.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-25T17:34:01Z",
          "tree_id": "83bb2e789214fcc5af08b974607a947954aaa61d",
          "url": "https://github.com/boa-dev/boa/commit/3f3f0aae6ec975221c25f884307950fe95991598"
        },
        "date": 1648231570839,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 321,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4568,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14862,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17583,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9871,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10588,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11264,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6924,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9562,
            "range": "± 459",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8704,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10826,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12724,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14462,
            "range": "± 221",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149962,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8454,
            "range": "± 489",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12245,
            "range": "± 1132",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5948,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11996,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15818,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15413,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5724,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31129,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27085,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1097,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2329,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2629,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1640,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1658,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1910,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1678,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1662,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1908,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1906,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1500,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2157,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4662,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1918,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2448,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1529,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1114,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1164,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1602,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 602,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3987,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3796,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4624,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17724,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1503288,
            "range": "± 8815",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5655,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5809,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6003,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9588,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9584,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12738,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12693,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8719,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3032986,
            "range": "± 13725",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1334628,
            "range": "± 3751",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4843,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5075,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4567,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3534,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4579,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6790,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 858,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 866492,
            "range": "± 56313",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 787180,
            "range": "± 47247",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "committer": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "distinct": false,
          "id": "5d2420ea59d23008a7689ba3943c4e83418c5277",
          "message": "Support numbers with multiple leading zeroes (#1979)\n\nThis Pull Request makes the non-octal-decimal-integer test pass. The test would previously fail for values with multiple leading zeroes.\r\n\r\nIt changes the following:\r\n\r\n- Number lexer",
          "timestamp": "2022-03-27T12:24:27Z",
          "tree_id": "018ac6cad2eb7cc57b1e94399faaeb1904de8d55",
          "url": "https://github.com/boa-dev/boa/commit/5d2420ea59d23008a7689ba3943c4e83418c5277"
        },
        "date": 1648385491518,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 266,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4213,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13356,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15709,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8876,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9591,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10237,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6315,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8228,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8041,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9918,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11454,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13138,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129647,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7391,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10734,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5502,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10879,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13951,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13666,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5255,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28056,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24588,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 908,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1958,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2279,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1405,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1423,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1663,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1447,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1451,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1677,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1650,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1286,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1851,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3814,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1635,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2094,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1309,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1048,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1126,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1479,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 516,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3396,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3270,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3831,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14831,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1283611,
            "range": "± 14037",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4731,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4850,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5023,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8444,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8466,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11309,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11372,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7347,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2528841,
            "range": "± 4515",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1108312,
            "range": "± 3533",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4059,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4283,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3803,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2951,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3777,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5549,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 685,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 681172,
            "range": "± 3491",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 648354,
            "range": "± 3288",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "committer": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "distinct": false,
          "id": "5a2703b2d3a0c0fb382c7f4cfda41c17575e77d9",
          "message": "Retrieve feature-based results for Test262 runs (#1980)\n\nThis Pull Request fixes/closes #1645.\r\n\r\nIt changes the following:\r\n\r\n- Add `features` field to `SuiteResult` structure\r\n- Fetch features from `TestSuite` and propagate them via `SuiteResult`\r\n- Add `FeaturesInfo` structure and serialize it to `features.json`",
          "timestamp": "2022-03-28T22:28:54Z",
          "tree_id": "454fbdcd52d2a762bdaabeec70b87080aa5f46eb",
          "url": "https://github.com/boa-dev/boa/commit/5a2703b2d3a0c0fb382c7f4cfda41c17575e77d9"
        },
        "date": 1648508406275,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 315,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4441,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14871,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17424,
            "range": "± 312",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9623,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10423,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11154,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6791,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8935,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8681,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10664,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12583,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14245,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148902,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8018,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11732,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5891,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11821,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15485,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15138,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5779,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30756,
            "range": "± 323",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26799,
            "range": "± 294",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1105,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2308,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2652,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1646,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1683,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1931,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1677,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1664,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1929,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1932,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1520,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2121,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4461,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1923,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2457,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1549,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1109,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1175,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1603,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 605,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3952,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3803,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4599,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17830,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1501671,
            "range": "± 12441",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5649,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5738,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5971,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9836,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9899,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13149,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13070,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8656,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3000422,
            "range": "± 22095",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1307799,
            "range": "± 16500",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4832,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5138,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4539,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3486,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4556,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6631,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 805,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 816887,
            "range": "± 7694",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 762117,
            "range": "± 9101",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "committer": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "distinct": false,
          "id": "5498a0ea5492d9acb1a3af49af0724c3de480f5c",
          "message": "Fix length properties on array methods (#1983)\n\nThis Pull Request fixes length properties on multiple array prototype methods that were including rest parameters in the count. More tests should pass.\r\n\r\nIt changes the following:\r\n\r\n- Length properties on some array prototype methods",
          "timestamp": "2022-03-29T00:17:01Z",
          "tree_id": "ac319c1ed219090ca0f5c0259daa0ff0b5fb36b2",
          "url": "https://github.com/boa-dev/boa/commit/5498a0ea5492d9acb1a3af49af0724c3de480f5c"
        },
        "date": 1648514678081,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 302,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4164,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13760,
            "range": "± 1005",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16213,
            "range": "± 909",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8569,
            "range": "± 506",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9354,
            "range": "± 490",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10381,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6099,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8002,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8571,
            "range": "± 626",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9882,
            "range": "± 742",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12984,
            "range": "± 1339",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13317,
            "range": "± 750",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 140346,
            "range": "± 9222",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7381,
            "range": "± 762",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11268,
            "range": "± 978",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6156,
            "range": "± 504",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10540,
            "range": "± 644",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14467,
            "range": "± 1312",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14281,
            "range": "± 768",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5816,
            "range": "± 619",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29357,
            "range": "± 2015",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 23884,
            "range": "± 1455",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1117,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2174,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2731,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1713,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1545,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1892,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1558,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1721,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1815,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1857,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1508,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2167,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4048,
            "range": "± 229",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1909,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2547,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1417,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1099,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1184,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1704,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 577,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3730,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3679,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4550,
            "range": "± 500",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16467,
            "range": "± 957",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1449554,
            "range": "± 91505",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5641,
            "range": "± 420",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6053,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5783,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8948,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8950,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12147,
            "range": "± 835",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12451,
            "range": "± 657",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8601,
            "range": "± 557",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2591627,
            "range": "± 250963",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1104213,
            "range": "± 84388",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4941,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4588,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4198,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3470,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4704,
            "range": "± 297",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6082,
            "range": "± 510",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 647,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 683782,
            "range": "± 37449",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 666582,
            "range": "± 42778",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "6fb144520fdc5ec460eb283de1573c8936719bb8",
          "message": "Added better error handling for the Boa tester (#1984)\n\nTrying to fix the issue in #1982, I noticed that we didn't have a proper error handling for the boa tester.\r\n\r\nThis adds the `anyhow` dependency to the tester, which makes it much easier to handle errors and bubble them up with attached context. Thanks to this I was able to easily find out the issue, and I think it could be useful to have it. It gives errors such as this one:\r\n\r\n```\r\nError: could not read the suite test\r\n    caused by: error reading sub-suite ./test262/test/built-ins\r\n    caused by: error reading sub-suite ./test262/test/built-ins/ShadowRealm\r\n    caused by: error reading sub-suite ./test262/test/built-ins/ShadowRealm/WrappedFunction\r\n    caused by: error reading test ./test262/test/built-ins/ShadowRealm/WrappedFunction/throws-typeerror-on-revoked-proxy.js\r\n    caused by: while scanning a block scalar, found a tab character where an indentation space is expected at line 4 column 3\r\n    caused by: while scanning a block scalar, found a tab character where an indentation space is expected at line 4 column 3\r\n```",
          "timestamp": "2022-03-29T03:50:07Z",
          "tree_id": "5a2b539d9ecd89722b730c8a879db3cc2bb0acfd",
          "url": "https://github.com/boa-dev/boa/commit/6fb144520fdc5ec460eb283de1573c8936719bb8"
        },
        "date": 1648527834971,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 247,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4537,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14177,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16478,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9285,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9986,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10723,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6754,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8721,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8533,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10430,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12206,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13953,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 140194,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7938,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11525,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5975,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11173,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14436,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14116,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5563,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29694,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26119,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 943,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2085,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2460,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1432,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1464,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1752,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1484,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1472,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1709,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1702,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1302,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1965,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3782,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1697,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2256,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1367,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1090,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1154,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1555,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3647,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3531,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4083,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14568,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1353791,
            "range": "± 2718",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4750,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4980,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5018,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8347,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8409,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11342,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11391,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7812,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2410255,
            "range": "± 2242",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1053295,
            "range": "± 2000",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4137,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4383,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3903,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3079,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4042,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5857,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 450,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 710082,
            "range": "± 5137",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 661406,
            "range": "± 3397",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "committer": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "distinct": false,
          "id": "405038d140cd6b3af3040a7c1b8b6a02b913ad1d",
          "message": "Allow boolean/null as property identifier by dot operator assignment (#1985)\n\nThis Pull Request lets true/false/null be used as object property identifiers, when using dot assignment.\r\n\r\n`foo.null = 'bar';`\r\n\r\nIt changes the following:\r\n\r\n- AST parsing of member expressions",
          "timestamp": "2022-03-29T06:23:36Z",
          "tree_id": "1287fb279c4f0a5baca4879aae9d3eb905b391ba",
          "url": "https://github.com/boa-dev/boa/commit/405038d140cd6b3af3040a7c1b8b6a02b913ad1d"
        },
        "date": 1648536749455,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4245,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13295,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15765,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8910,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9650,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10286,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6306,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8253,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7994,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9901,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11529,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13067,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129283,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7297,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10644,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5441,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11055,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14375,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13990,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5189,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28248,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24698,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 904,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1921,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2241,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1362,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1402,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1590,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1384,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1386,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1598,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1604,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1275,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1790,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3917,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1604,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2092,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1261,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1026,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1090,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1454,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 506,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3382,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3252,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3930,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14887,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1271568,
            "range": "± 1474",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4792,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4837,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4998,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8062,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8092,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10819,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10863,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7395,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2528309,
            "range": "± 3297",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1110372,
            "range": "± 6432",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4054,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4242,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3775,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3067,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3830,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5652,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 678,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 682086,
            "range": "± 2979",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 645568,
            "range": "± 4285",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "c23d32b977a52ce3d3100755f7f38ec578b6f660",
          "message": "Bump getrandom from 0.2.5 to 0.2.6 (#1986)\n\nBumps [getrandom](https://github.com/rust-random/getrandom) from 0.2.5 to 0.2.6.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-random/getrandom/blob/master/CHANGELOG.md\">getrandom's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.2.6] - 2022-03-28</h2>\n<h3>Added</h3>\n<ul>\n<li>Nintendo 3DS (<code>armv6k-nintendo-3ds</code>) support <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/248\">#248</a></li>\n</ul>\n<h3>Changed</h3>\n<ul>\n<li>Retry <code>open</code> when interrupted <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/252\">#252</a></li>\n</ul>\n<p><a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/248\">#248</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/248\">rust-random/getrandom#248</a>\n<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/252\">#252</a>: <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/pull/252\">rust-random/getrandom#252</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/fcece06dd5dc5580b79a3bc7a6310c0c48b9406f\"><code>fcece06</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/255\">#255</a> from rust-random/release/v0.2.6</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/0830ba66be8a5c019fc5ced5747c9d0a023e4d3e\"><code>0830ba6</code></a> Disable Solaris CI job</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/2630158149a1926da374a4433b212af34c5c94bc\"><code>2630158</code></a> Release v0.2.6</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/fcae1d2626bf947943a3270ea946cee46f91cccf\"><code>fcae1d2</code></a> libc: retry open when interrupted (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/252\">#252</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/d40ec2c7e4981b64d2964d7d4c99ad6245db526d\"><code>d40ec2c</code></a> Add support for the Nintendo 3DS (armv6k-nintendo-3ds) (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/248\">#248</a>)</li>\n<li><a href=\"https://github.com/rust-random/getrandom/commit/157d6f23dc53ea995294646c4f6301116aaa2bfa\"><code>157d6f2</code></a> Fix v0.2.5 release date (<a href=\"https://github-redirect.dependabot.com/rust-random/getrandom/issues/250\">#250</a>)</li>\n<li>See full diff in <a href=\"https://github.com/rust-random/getrandom/compare/v0.2.5...v0.2.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=getrandom&package-manager=cargo&previous-version=0.2.5&new-version=0.2.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-29T11:13:39Z",
          "tree_id": "f0bf0dcd7bb825bed0355770574d8b04b71763aa",
          "url": "https://github.com/boa-dev/boa/commit/c23d32b977a52ce3d3100755f7f38ec578b6f660"
        },
        "date": 1648554478850,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 333,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4563,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15037,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17681,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9923,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10645,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11190,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6976,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9179,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8764,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10885,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12796,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14553,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148662,
            "range": "± 1234",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7973,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11887,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5928,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12014,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15749,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15484,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5711,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30980,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26871,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1107,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2335,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2698,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1697,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1686,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1939,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1697,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1715,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1966,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1963,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1534,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2140,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4591,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1935,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2490,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1554,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1122,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1218,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1633,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 605,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4032,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3879,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4596,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17805,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1512601,
            "range": "± 4518",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5611,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5792,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6056,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9973,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9976,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13070,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13223,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8778,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2883775,
            "range": "± 5907",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1274268,
            "range": "± 8086",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4846,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5073,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4540,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3572,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4693,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6750,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 809,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 815348,
            "range": "± 6344",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 772871,
            "range": "± 3569",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "76ef1a88292bca840999c653bef04a4fe8cbcfed",
          "message": "Remove `git2` and `hex`  dependencies (#1992)\n\nThis removes the only use of the `git2` and `hex` dependencies by reading the test262 submodule commit id directly from the `.git` directory.\r\n\r\nBecause `git2` depends on a lot of other crates, this removes a bunch of dependencies.",
          "timestamp": "2022-03-31T14:02:20Z",
          "tree_id": "27619596bbeeb972b5610d0be103521cc3f7624d",
          "url": "https://github.com/boa-dev/boa/commit/76ef1a88292bca840999c653bef04a4fe8cbcfed"
        },
        "date": 1648737258366,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 327,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4478,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14174,
            "range": "± 868",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16456,
            "range": "± 1017",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9526,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10413,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10997,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6448,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8692,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8655,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10743,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12559,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14011,
            "range": "± 592",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 141748,
            "range": "± 6414",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7870,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11663,
            "range": "± 431",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5255,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10742,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15615,
            "range": "± 918",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15177,
            "range": "± 624",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5642,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29893,
            "range": "± 1631",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24394,
            "range": "± 1666",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1108,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2261,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2587,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1614,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1665,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1913,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1663,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1547,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1804,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1952,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1545,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2094,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4286,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1846,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2514,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1585,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1103,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1133,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1584,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 601,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5278,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3508,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4271,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17655,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1513206,
            "range": "± 49229",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5552,
            "range": "± 247",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5636,
            "range": "± 229",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5995,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9890,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9843,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12489,
            "range": "± 721",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12693,
            "range": "± 433",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8877,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2874972,
            "range": "± 17403",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1190961,
            "range": "± 72361",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4679,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4632,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4589,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3610,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4294,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6391,
            "range": "± 394",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 808,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 821134,
            "range": "± 10256",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 744485,
            "range": "± 36812",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a5337a93d03b774eefdc2369b9e4804b97bc1053",
          "message": "Bump indexmap from 1.8.0 to 1.8.1 (#1988)\n\nBumps [indexmap](https://github.com/bluss/indexmap) from 1.8.0 to 1.8.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/bluss/indexmap/blob/master/RELEASES.md\">indexmap's changelog</a>.</em></p>\n<blockquote>\n<ul>\n<li>\n<p>1.8.1</p>\n<ul>\n<li>The new <code>IndexSet::replace_full</code> will return the index of the item along\nwith the replaced value, if any, by <a href=\"https://github.com/zakcutner\"><code>@​zakcutner</code></a> in PR <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/pull/222\">222</a>.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/bluss/indexmap/commit/275379c489b483e69d9a61265e9026f42a415219\"><code>275379c</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/222\">#222</a> from zakcutner/replace-full</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/12162abeb0924c0a48c4bb89c12a9bc84460973c\"><code>12162ab</code></a> Release 1.8.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/feb816c4b885406fecdac751a480ee1bd269085a\"><code>feb816c</code></a> Add a <code>replace_full</code> method on <code>IndexSet</code></li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/d6a9dd6c919798ff25220660a6603b7c89b85b5d\"><code>d6a9dd6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/218\">#218</a> from erickt/miri</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/4dd6619b4ce609f196c0b521b6382225c348a365\"><code>4dd6619</code></a> Add miri builder</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/10ee11e56c624964ffc1f4da76c8d6e84bdea43d\"><code>10ee11e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/216\">#216</a> from cuviper/dev-dependencies</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/98de9abe37965efa73daf533fd92b799a5a25947\"><code>98de9ab</code></a> Update dev-dependencies</li>\n<li>See full diff in <a href=\"https://github.com/bluss/indexmap/compare/1.8.0...1.8.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=indexmap&package-manager=cargo&previous-version=1.8.0&new-version=1.8.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-03-31T17:40:35Z",
          "tree_id": "7529e71e45fb4b795b85812b876e0aa2e91954c2",
          "url": "https://github.com/boa-dev/boa/commit/a5337a93d03b774eefdc2369b9e4804b97bc1053"
        },
        "date": 1648750529474,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 321,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4453,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14867,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17324,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9749,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10385,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10880,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6540,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8443,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8435,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10530,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12399,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14171,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148412,
            "range": "± 1196",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7959,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11772,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5885,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11765,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15236,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15004,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5689,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30147,
            "range": "± 651",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26854,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1083,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2322,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2649,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1647,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1655,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1921,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1693,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1697,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1930,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1950,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1562,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2158,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4473,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1960,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2506,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1544,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1115,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1171,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1623,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 589,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3998,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3939,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4535,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17749,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1504456,
            "range": "± 9064",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5556,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5718,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5925,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9981,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9976,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13115,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13143,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8728,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3021928,
            "range": "± 25043",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1339271,
            "range": "± 14601",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4814,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5078,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4506,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3521,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4474,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6599,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 805,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 830624,
            "range": "± 6038",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 767011,
            "range": "± 11243",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f233e9cfcacb5e8c2889b76766f10dc32ffc9176",
          "message": "Bump clap from 3.1.6 to 3.1.7 (#1996)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.6 to 3.1.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.7</h2>\n<h2>[3.1.7] - 2022-03-31</h2>\n<h3>Fixes</h3>\n<ul>\n<li><code>*(derive)* Abort, rather than ignore, when deriving </code>ArgEnum` with non-unit unskipped variants</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.7] - 2022-03-31</h2>\n<h3>Fixes</h3>\n<ul>\n<li><code>*(derive)* Abort, rather than ignore, when deriving </code>ArgEnum` with non-unit unskipped variants</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/c75d2642ef7612da7f42d599989a8228b5b44e71\"><code>c75d264</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/b774370565ec5f61ece7b3f4f520b1c164d259b4\"><code>b774370</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/71ef8878c5b71adb986f149cd07b2c735696a556\"><code>71ef887</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3591\">#3591</a> from Shir0kamii/fix-ArgEnum-non-unit</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/fb4755d1c3ef8819fa1927b5f418357bb6a9e266\"><code>fb4755d</code></a> feat(derive): Don't abort when non-unit variant is skipped</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ee3d12ec56656a764d00d8126326aca637036c7f\"><code>ee3d12e</code></a> fix(derive): Abort on non-unit variant</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/06f855f2abc36408c996b7472d7fad3e5d28f251\"><code>06f855f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3582\">#3582</a> from ducaale/fix-docs</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/d55e46f65f4cb11104db306cd9d2a74f23d05e87\"><code>d55e46f</code></a> docs(mangen): Fix docs for Man::section()</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/731d18f300919a396eee62253f31239b9b02a943\"><code>731d18f</code></a> docs(examples): Fix help output</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6835dfa978f18cae94909c30faa761722cca1e9e\"><code>6835dfa</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3577\">#3577</a> from samueltardieu/fix-arg-help-doc</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ef3c2c73d5114ab507a90cdc85b0282720b6b7f3\"><code>ef3c2c7</code></a> docs: arg! macro uses double quotes for help string</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.6...v3.1.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.6&new-version=3.1.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-02T06:12:26Z",
          "tree_id": "f03de261ca7c36beef234779a09bf38cb349f3f6",
          "url": "https://github.com/boa-dev/boa/commit/f233e9cfcacb5e8c2889b76766f10dc32ffc9176"
        },
        "date": 1648881840569,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 337,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4466,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14952,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17312,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9687,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10379,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11039,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6732,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8860,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8528,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10570,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12563,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14249,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148582,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7949,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11861,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5890,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11787,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15378,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15043,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5688,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30767,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26780,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1083,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2331,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2638,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1648,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1674,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1904,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1673,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1653,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1949,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1970,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1515,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2132,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4476,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1926,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2515,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1564,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1112,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1168,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1619,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 596,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4003,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3855,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4588,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17623,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1498721,
            "range": "± 2265",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5559,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5771,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5887,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9957,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10009,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13161,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13248,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8682,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3022029,
            "range": "± 5243",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1338689,
            "range": "± 7659",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4800,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5037,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4484,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3537,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4665,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6690,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 804,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 813728,
            "range": "± 5375",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 771181,
            "range": "± 4080",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "tsutton125@gmail.com",
            "name": "Taylor Sutton",
            "username": "tsutton"
          },
          "committer": {
            "email": "tsutton125@gmail.com",
            "name": "Taylor Sutton",
            "username": "tsutton"
          },
          "distinct": false,
          "id": "998a7b17a5cf9201fd9f94478fe624bb75688eb3",
          "message": "fix(vm): off-by-one in code block stringification. (#1999)\n\nAcked-by: Taylor Sutton <tsutton125@gmail.com>\r\n\r\nThis Pull Request fixes/closes #1998 \r\n\r\nThe call to retrieve operands modifies pc, setting it to the index of\r\nthe *next* instruction. So, we save its initial value and use that\r\nfor printing.",
          "timestamp": "2022-04-02T20:07:18Z",
          "tree_id": "3317f4e81645b928c2dc0f03dd69999ab391fa55",
          "url": "https://github.com/boa-dev/boa/commit/998a7b17a5cf9201fd9f94478fe624bb75688eb3"
        },
        "date": 1648931817268,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 331,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5043,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16447,
            "range": "± 715",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19212,
            "range": "± 994",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10960,
            "range": "± 649",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11757,
            "range": "± 731",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12183,
            "range": "± 716",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7473,
            "range": "± 408",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9976,
            "range": "± 585",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9606,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11743,
            "range": "± 545",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13986,
            "range": "± 980",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15373,
            "range": "± 1096",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 160163,
            "range": "± 8339",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8469,
            "range": "± 721",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12875,
            "range": "± 445",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6517,
            "range": "± 814",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13015,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16918,
            "range": "± 828",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16525,
            "range": "± 796",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6025,
            "range": "± 706",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33046,
            "range": "± 2103",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29363,
            "range": "± 3521",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1185,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2532,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2863,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1786,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1833,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2104,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1838,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1746,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1981,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2063,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1606,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2353,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4570,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2044,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2735,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1699,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1261,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1300,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1800,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 628,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4242,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3993,
            "range": "± 397",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4764,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18008,
            "range": "± 1433",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1608611,
            "range": "± 83196",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5756,
            "range": "± 354",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6225,
            "range": "± 437",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6283,
            "range": "± 325",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9704,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9889,
            "range": "± 593",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13743,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13162,
            "range": "± 702",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8942,
            "range": "± 713",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2714614,
            "range": "± 142962",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1234859,
            "range": "± 48834",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4964,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5153,
            "range": "± 335",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4827,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3588,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4620,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6836,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 714,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 763460,
            "range": "± 69869",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 719173,
            "range": "± 42533",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jordan.michael.last@gmail.com",
            "name": "Jordan Last",
            "username": "lastmjs"
          },
          "committer": {
            "email": "jordan.michael.last@gmail.com",
            "name": "Jordan Last",
            "username": "lastmjs"
          },
          "distinct": false,
          "id": "6baf4550880a5c7a202c51c9b8314ff977afade1",
          "message": "Add From<f32> for JsValue (#1990)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes/closes #1989.\r\n\r\nIt changes the following:\r\n\r\n- Implements From<f32> for JsValue",
          "timestamp": "2022-04-02T22:11:16Z",
          "tree_id": "1d9b804cbb60884f91cb1b7bdc35d9aa4d7a8c86",
          "url": "https://github.com/boa-dev/boa/commit/6baf4550880a5c7a202c51c9b8314ff977afade1"
        },
        "date": 1648939156448,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 323,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4545,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14812,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17584,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10814,
            "range": "± 877",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10640,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11179,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6926,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9115,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8721,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10875,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12765,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14480,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148893,
            "range": "± 1158",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8050,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11917,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5968,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12020,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15823,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15442,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5628,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30894,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26774,
            "range": "± 684",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1065,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2240,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2635,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1632,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1651,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1886,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1663,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1655,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1916,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1933,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1499,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2103,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4679,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1949,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2518,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1548,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1116,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1167,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1590,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 614,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3955,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3835,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4579,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17528,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1493876,
            "range": "± 6406",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5611,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5767,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5938,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9482,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9560,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12594,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12705,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8851,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3054027,
            "range": "± 4948",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1349873,
            "range": "± 10342",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4761,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5046,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4416,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3493,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4594,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6610,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 827,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 802267,
            "range": "± 12357",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 759774,
            "range": "± 13072",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "aaf67c13ae9ea2620fc2c6b15e0b2cf051640093",
          "message": "Bump clap from 3.1.7 to 3.1.8 (#2006)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.7 to 3.1.8.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.8</h2>\n<h2>[3.1.8] - 2022-04-01</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Add <code>Debug</code> impls to more types</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.8] - 2022-04-01</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Add <code>Debug</code> impls to more types</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/08f74046dcec2b626a34d3fdc6c8b12b707c4173\"><code>08f7404</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6aa40ad2cbc4fc749aa5d2bc8ef0fe69f42ce1b9\"><code>6aa40ad</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/732830a98c0b96d91bffd8cb0faebd8a204f6399\"><code>732830a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3598\">#3598</a> from dragonrider7225/bring-back-debug-impls</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/17fed36da3e281e17467a1bcc58b42d3b18b988e\"><code>17fed36</code></a> fix: Bring forward Debug impls from v2</li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.7...v3.1.8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.7&new-version=3.1.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-05T04:30:12Z",
          "tree_id": "ad8bb20830ba3891d2a10fe275bd172ccb9cda78",
          "url": "https://github.com/boa-dev/boa/commit/aaf67c13ae9ea2620fc2c6b15e0b2cf051640093"
        },
        "date": 1649134850405,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 271,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4303,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13321,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15887,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8989,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9697,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10331,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6392,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8338,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8028,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9901,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10218,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13118,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 115184,
            "range": "± 195",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7339,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10708,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5521,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10960,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14185,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13803,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5197,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28387,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24796,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 907,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1950,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2281,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1388,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1388,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1597,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1247,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1428,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1631,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1116,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1805,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4031,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2114,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1290,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1029,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1102,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1457,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3367,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3255,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3791,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14649,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1259666,
            "range": "± 1375",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4656,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4820,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4982,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8111,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8083,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10904,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10922,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7409,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2521095,
            "range": "± 2862",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1116291,
            "range": "± 3025",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3546,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4243,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3795,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2964,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3803,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 4916,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 597,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 596991,
            "range": "± 2766",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 642659,
            "range": "± 4117",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "ffc7a3e07023226f8eb7c57445bbde26785554a0",
          "message": "Bump test262 from `0bccacd` to `926b096` (#2007)\n\nBumps [test262](https://github.com/tc39/test262) from `0bccacd` to `926b096`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/926b0960d737b9f1dfd0ec0c1dfd95d836016d33\"><code>926b096</code></a> update nfv3 test for roundingIncrement (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3441\">#3441</a>)</li>\n<li><a href=\"https://github.com/tc39/test262/commit/4c7c24646a395085a4a1bd006d686f6b52e1b517\"><code>4c7c246</code></a> Check a variety of offset Etc/GMT timezones (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3403\">#3403</a>)</li>\n<li><a href=\"https://github.com/tc39/test262/commit/fe40aea50c23fbccb7bb4bef23f64af3a3239715\"><code>fe40aea</code></a> Emit fallback day 1</li>\n<li><a href=\"https://github.com/tc39/test262/commit/9aaa22cb06cedecf5395c5b644c102f554d3f15d\"><code>9aaa22c</code></a> Ensure fallback years values are present</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ee1f96235b8fffb25141b812f3cee4f8863d4553\"><code>ee1f962</code></a> Ensure reference data is emitted when calendarName = 'always'</li>\n<li><a href=\"https://github.com/tc39/test262/commit/76b0bafba67dcfda8e4eafc5c3b9ea72efa78833\"><code>76b0baf</code></a> Update test/built-ins/Temporal/Duration/compare/twenty-five-hour-day.js</li>\n<li><a href=\"https://github.com/tc39/test262/commit/2aa754b7cf1c83999370a6a800fe261448315e9d\"><code>2aa754b</code></a> Add test for DST balancing</li>\n<li><a href=\"https://github.com/tc39/test262/commit/3ab8adc237a026f7e249ee5e64e6b654e7fcfc08\"><code>3ab8adc</code></a> Require String.prototype.localeCompare to check for canonical equivalence</li>\n<li><a href=\"https://github.com/tc39/test262/commit/3eea1a7959696aef42f935baf7ab54f4840b59f4\"><code>3eea1a7</code></a> Add tests for various invalid ISO strings for PlainDate</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ad74a4ebbaac5bd6e96a9e990d6ce90da70594ca\"><code>ad74a4e</code></a> Rename some &quot;argument-string&quot; tests to be more specific</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/0bccacda693ada2cd1736d35eb912b27291ac6ff...926b0960d737b9f1dfd0ec0c1dfd95d836016d33\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-05T04:40:44Z",
          "tree_id": "a131c1019b36fc33c5e17259b8482495835a330b",
          "url": "https://github.com/boa-dev/boa/commit/ffc7a3e07023226f8eb7c57445bbde26785554a0"
        },
        "date": 1649135654719,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 310,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4344,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14332,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15608,
            "range": "± 589",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9050,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9437,
            "range": "± 385",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10871,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6336,
            "range": "± 236",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8948,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8311,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10274,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12149,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13902,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145659,
            "range": "± 3377",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7722,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11111,
            "range": "± 758",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5436,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11130,
            "range": "± 492",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14951,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14109,
            "range": "± 565",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5065,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29010,
            "range": "± 1296",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26647,
            "range": "± 545",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1084,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2264,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2490,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1488,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1530,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1702,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1515,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1500,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1913,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1888,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1441,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2013,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4223,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1756,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2314,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1479,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1054,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1122,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1569,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 567,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3778,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3685,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4384,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16952,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1414473,
            "range": "± 50511",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5269,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5162,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5673,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8758,
            "range": "± 330",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8732,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12101,
            "range": "± 410",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11868,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7838,
            "range": "± 386",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2675511,
            "range": "± 93624",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1241662,
            "range": "± 44702",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4511,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4832,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4307,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3241,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4232,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6480,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 761,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 786964,
            "range": "± 28582",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 734053,
            "range": "± 27556",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "committer": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "distinct": false,
          "id": "bb98bd3567aac12234b4fdd5e9768231c758c18b",
          "message": "Indicate bigint has constructor (#2008)\n\nThis Pull Request changes BigInt so that isConstructor returns true.\r\n\r\nIt changes a single boolean value for BigInt's ConstructorBuilder.",
          "timestamp": "2022-04-05T12:32:52Z",
          "tree_id": "dee17c66f520fa315e7231b738bed264b87efdfc",
          "url": "https://github.com/boa-dev/boa/commit/bb98bd3567aac12234b4fdd5e9768231c758c18b"
        },
        "date": 1649163784050,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 242,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3793,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11766,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13967,
            "range": "± 789",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9010,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9667,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9113,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6351,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7358,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7052,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9925,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 10183,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11586,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130400,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6482,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10704,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5451,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9680,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 12508,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12226,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4586,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25117,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24830,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 808,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1715,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2243,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1391,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1241,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1608,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1224,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1411,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1450,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1451,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1135,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1601,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3929,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1639,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1854,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1309,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 909,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1082,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1438,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 462,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3399,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3264,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3384,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14802,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1266951,
            "range": "± 2780",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4125,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4270,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4389,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7205,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7136,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10749,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10790,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7404,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2227904,
            "range": "± 2365",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1123948,
            "range": "± 2496",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3539,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4216,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3312,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2647,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3809,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5522,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 677,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 613310,
            "range": "± 2976",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 577409,
            "range": "± 3439",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "c2fb25db0ac3f2eff049a5c653cd89ba50b836a6",
          "message": "Bump codecov/codecov-action from 2.1.0 to 3 (#2012)\n\nBumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 2.1.0 to 3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/releases\">codecov/codecov-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<h3>Breaking Changes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/689\">#689</a> Bump to node16 and small fixes</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/688\">#688</a> Incorporate <code>gcov</code> arguments for the Codecov uploader</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/548\">#548</a> build(deps-dev): bump jest-junit from 12.2.0 to 13.0.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/603\">#603</a> [Snyk] Upgrade <code>@​actions/core</code> from 1.5.0 to 1.6.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/628\">#628</a> build(deps): bump node-fetch from 2.6.1 to 3.1.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/634\">#634</a> build(deps): bump node-fetch from 3.1.1 to 3.2.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/636\">#636</a> build(deps): bump openpgp from 5.0.1 to 5.1.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/652\">#652</a> build(deps-dev): bump <code>@​vercel/ncc</code> from 0.30.0 to 0.33.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/653\">#653</a> build(deps-dev): bump <code>@​types/node</code> from 16.11.21 to 17.0.18</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/659\">#659</a> build(deps-dev): bump <code>@​types/jest</code> from 27.4.0 to 27.4.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/667\">#667</a> build(deps): bump actions/checkout from 2 to 3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/673\">#673</a> build(deps): bump node-fetch from 3.2.0 to 3.2.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/683\">#683</a> build(deps): bump minimist from 1.2.5 to 1.2.6</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/685\">#685</a> build(deps): bump <code>@​actions/github</code> from 5.0.0 to 5.0.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/681\">#681</a> build(deps-dev): bump <code>@​types/node</code> from 17.0.18 to 17.0.23</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/682\">#682</a> build(deps-dev): bump typescript from 4.5.5 to 4.6.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/676\">#676</a> build(deps): bump <code>@​actions/exec</code> from 1.1.0 to 1.1.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/675\">#675</a> build(deps): bump openpgp from 5.1.0 to 5.2.1</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md\">codecov/codecov-action's changelog</a>.</em></p>\n<blockquote>\n<h2>3.0.0</h2>\n<h3>Breaking Changes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/689\">#689</a> Bump to node16 and small fixes</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/688\">#688</a> Incorporate <code>gcov</code> arguments for the Codecov uploader</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/548\">#548</a> build(deps-dev): bump jest-junit from 12.2.0 to 13.0.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/603\">#603</a> [Snyk] Upgrade <code>@​actions/core</code> from 1.5.0 to 1.6.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/628\">#628</a> build(deps): bump node-fetch from 2.6.1 to 3.1.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/634\">#634</a> build(deps): bump node-fetch from 3.1.1 to 3.2.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/636\">#636</a> build(deps): bump openpgp from 5.0.1 to 5.1.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/652\">#652</a> build(deps-dev): bump <code>@​vercel/ncc</code> from 0.30.0 to 0.33.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/653\">#653</a> build(deps-dev): bump <code>@​types/node</code> from 16.11.21 to 17.0.18</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/659\">#659</a> build(deps-dev): bump <code>@​types/jest</code> from 27.4.0 to 27.4.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/667\">#667</a> build(deps): bump actions/checkout from 2 to 3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/673\">#673</a> build(deps): bump node-fetch from 3.2.0 to 3.2.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/683\">#683</a> build(deps): bump minimist from 1.2.5 to 1.2.6</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/685\">#685</a> build(deps): bump <code>@​actions/github</code> from 5.0.0 to 5.0.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/681\">#681</a> build(deps-dev): bump <code>@​types/node</code> from 17.0.18 to 17.0.23</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/682\">#682</a> build(deps-dev): bump typescript from 4.5.5 to 4.6.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/676\">#676</a> build(deps): bump <code>@​actions/exec</code> from 1.1.0 to 1.1.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/675\">#675</a> build(deps): bump openpgp from 5.1.0 to 5.2.1</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/e3c560433a6cc60aec8812599b7844a7b4fa0d71\"><code>e3c5604</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/689\">#689</a> from codecov/feat/gcov</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/174efc598490d1245b8d667c6e2631e30eb4b311\"><code>174efc5</code></a> Update package-lock.json</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/6243a75ef39b2e25a9bfb867790f1a81ce1c722b\"><code>6243a75</code></a> bump to 3.0.0</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/0d6466ff9c15e01d8fcfb5f5bd91922cf59d0320\"><code>0d6466f</code></a> Bump to node16</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/d4729eeb392fd500c2392885a651ae1f45d5ea8a\"><code>d4729ee</code></a> fetch.default</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/351baf62fa07c9dec46a75a8b52f76313e7ff25e\"><code>351baf6</code></a> fix: bash</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/d8cf6802a833acb75bafac8995c5fbaafa9a5a14\"><code>d8cf680</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/675\">#675</a> from codecov/dependabot/npm_and_yarn/openpgp-5.2.1</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/b775e9013c1e00b6331270c897245790ec90e907\"><code>b775e90</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/676\">#676</a> from codecov/dependabot/npm_and_yarn/actions/exec-1.1.1</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/2ebc2f0f6fe9275f002dfa6144ed6861a17bf3d6\"><code>2ebc2f0</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/682\">#682</a> from codecov/dependabot/npm_and_yarn/typescript-4.6.3</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/8e2ef2bfcc869b428be4066466997e36c6793e8a\"><code>8e2ef2b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/681\">#681</a> from codecov/dependabot/npm_and_yarn/types/node-17.0.23</li>\n<li>Additional commits viewable in <a href=\"https://github.com/codecov/codecov-action/compare/v2.1.0...v3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=codecov/codecov-action&package-manager=github_actions&previous-version=2.1.0&new-version=3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-06T09:50:15Z",
          "tree_id": "78699eb6d1f565ea88e2a4ce1162ad6233084f8a",
          "url": "https://github.com/boa-dev/boa/commit/c2fb25db0ac3f2eff049a5c653cd89ba50b836a6"
        },
        "date": 1649240296791,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4727,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14523,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17269,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9807,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10557,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11153,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7024,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9170,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8701,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10827,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12850,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14356,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 140179,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8070,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11660,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6051,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11614,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15180,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14721,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5472,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30686,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26860,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 948,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2152,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2427,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1476,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1498,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1766,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1516,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1482,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1712,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1721,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1337,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2007,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3877,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1702,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2258,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1347,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1065,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1137,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1511,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 506,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3644,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3508,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3917,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14626,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1333048,
            "range": "± 2789",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4732,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4905,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5031,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8478,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8434,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11276,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11291,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7741,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2407417,
            "range": "± 2976",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1069633,
            "range": "± 3072",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4136,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4378,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3870,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3095,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3964,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5792,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 453,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 703191,
            "range": "± 5149",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 662521,
            "range": "± 4677",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "committer": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "distinct": false,
          "id": "e6d12f835c16483fa862a4e71d5b25a29675dcf4",
          "message": "Change `ArrayBuffer` `byteLength` to accessor property (#2010)\n\nThis Pull Request fixes `byteLength` for `ArrayBuffer`. It should be an accessor property rather than a method, per the spec.\r\n\r\nIt changes the following:\r\n\r\n- Removes `byteLength` method for `ArrayBuffer` built-in.\r\n- Add `byteLength` accessor property for `ArrayBuffer`.\r\n- Change `byte_length` function name to `get_byte_length`, to match other function names used for accessor properties.",
          "timestamp": "2022-04-06T14:56:46Z",
          "tree_id": "b404fe957ee5f3a4ebd522e9dfcc68adfde942ba",
          "url": "https://github.com/boa-dev/boa/commit/e6d12f835c16483fa862a4e71d5b25a29675dcf4"
        },
        "date": 1649258653954,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 288,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4124,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13978,
            "range": "± 562",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16073,
            "range": "± 790",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8540,
            "range": "± 460",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9204,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9503,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5838,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7879,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7524,
            "range": "± 447",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9366,
            "range": "± 500",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12054,
            "range": "± 638",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13864,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 139565,
            "range": "± 6277",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7439,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11232,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5602,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11485,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14507,
            "range": "± 842",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13379,
            "range": "± 718",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4827,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29493,
            "range": "± 1295",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25185,
            "range": "± 1106",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1024,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2238,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2579,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1504,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1472,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1668,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1592,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1481,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1785,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1785,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1352,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1851,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4332,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1893,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2408,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1471,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1025,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1035,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1446,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 556,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3657,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3355,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3990,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15502,
            "range": "± 816",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1366547,
            "range": "± 78211",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5159,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5208,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5305,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8269,
            "range": "± 394",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8782,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11685,
            "range": "± 491",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11273,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7916,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2819972,
            "range": "± 66087",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1242119,
            "range": "± 39001",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4412,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4566,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4265,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3047,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4081,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5810,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 719,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 716976,
            "range": "± 27089",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 703811,
            "range": "± 30786",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "223966981c112477678f42f47fcf9458171fb6c0",
          "message": "Implement Classes (#1976)\n\nThis Pull Request fixes/closes #337.\r\n\r\nIt changes the following:\r\n\r\n- Implement class declaration parsing.\r\n- Implement class expression parsing.\r\n- Implement class execution.\r\n\r\nThere are still some features like `super` missing and there are some early errors that are not implemented yet. But I think it makes sense to merge this, as we can branch out the missing features from here.",
          "timestamp": "2022-04-07T07:10:32Z",
          "tree_id": "ae53ce3cc27daa874fdddb09de0cf38192f1341b",
          "url": "https://github.com/boa-dev/boa/commit/223966981c112477678f42f47fcf9458171fb6c0"
        },
        "date": 1649317267000,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 275,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4557,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14631,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17254,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9646,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10386,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11184,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6786,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8898,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8747,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10775,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12645,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14260,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145166,
            "range": "± 810",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8079,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11775,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5993,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11716,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15151,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14961,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5721,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31004,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27141,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 901,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1990,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2284,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1384,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1381,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1598,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1402,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1426,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1648,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1628,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1277,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1817,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3804,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1631,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2093,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1336,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1016,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1092,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1467,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 498,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3358,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3270,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4179,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15192,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1327894,
            "range": "± 1587",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5012,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5142,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5297,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8376,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8369,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11300,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11267,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7665,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2504360,
            "range": "± 3180",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1102166,
            "range": "± 3444",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4338,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4521,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4085,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3082,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3992,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5849,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 652,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 681786,
            "range": "± 4661",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 642990,
            "range": "± 3160",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "5ab3bf858b3e60a7fc12c75f63743bd8a67375c1",
          "message": "Fix rust 1.60 clippy lints (#2014)\n\nThis Pull Request fixes new / improved clippy lints with rust 1.60.",
          "timestamp": "2022-04-08T10:37:58Z",
          "tree_id": "88f460354b00863b4b9df397185dafd0cd86d76c",
          "url": "https://github.com/boa-dev/boa/commit/5ab3bf858b3e60a7fc12c75f63743bd8a67375c1"
        },
        "date": 1649416264070,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4586,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 12893,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15227,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9778,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10505,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11246,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6900,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8956,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7673,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9578,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11169,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12894,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143500,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8008,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11635,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5986,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10508,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13380,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13109,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5157,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30924,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27580,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 922,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1953,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2258,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1393,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1378,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1609,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1391,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1424,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1640,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1617,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1270,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1793,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3609,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1643,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2091,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1351,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1020,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1055,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1405,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 504,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2941,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2860,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3699,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13419,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1330397,
            "range": "± 47084",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5131,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5262,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5422,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7340,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8284,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10991,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10948,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7823,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2573602,
            "range": "± 3069",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1128278,
            "range": "± 24556",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4427,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4044,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3680,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2882,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3675,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5868,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 647,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 694153,
            "range": "± 5025",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 662149,
            "range": "± 3871",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "aeb5460bd69b8d8ffff05fc8342f90bbccdf9c2b",
          "message": "Bump webpack from 5.71.0 to 5.72.0 (#2016)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.71.0 to 5.72.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.72.0</h2>\n<h1>Features</h1>\n<ul>\n<li>make cache warnings caused by build errors less verbose</li>\n<li>Allow banner to be placed as a footer with the BannerPlugin</li>\n<li>allow to concatenate asset modules</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix RemoteModules when using HMR (Module Federation + HMR)</li>\n<li>throw error when using module concatenation and cacheUnaffected</li>\n<li>fix <code>in</code> operator with nested exports</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/d3a0f8de03f26a83b4d5db3cfe177617a3801df3\"><code>d3a0f8d</code></a> 5.72.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/360373d76e775c74e53a3b25686b33a964da2dde\"><code>360373d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15563\">#15563</a> from cool-little-fish/fix-12408</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b9b73c5418bdddd86bc25436779b33ed628e6594\"><code>b9b73c5</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15634\">#15634</a> from webpack/fix/issue-15633</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/216c3daa4ed7c85806465bc140fb885f45791b79\"><code>216c3da</code></a> fix ExportsInfo</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/cb639b3efcd76e5a9cf07ceb98357d029430319b\"><code>cb639b3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15624\">#15624</a> from webpack/add-warning-when-cache-unaffected-and-...</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/c38caa2d82c5f8e87c5fc19e2cca012c9f5087c3\"><code>c38caa2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15515\">#15515</a> from webpack/feat/concatenate-assets</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/99a5793ca8923679f32c97ce187fa7cf918605ce\"><code>99a5793</code></a> throw error when using module concatenation and cacheUnaffected</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/19d1a9384e7637d07f4f25094fc5bb1db2959787\"><code>19d1a93</code></a> fix lint and tests</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/05ebf5bba670152101d1cc0f42f165b9fd295164\"><code>05ebf5b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15617\">#15617</a> from DavidTanner/bannerAsFooter</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/2a58ce7883b42e1ebcfde617ec4a27c7feb035e6\"><code>2a58ce7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15542\">#15542</a> from wangjinyang/bugfix/mf-hmr-error</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.71.0...v5.72.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.71.0&new-version=5.72.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-08T12:51:10Z",
          "tree_id": "b63fb582bd510479efa07e630d8b83818175e28c",
          "url": "https://github.com/boa-dev/boa/commit/aeb5460bd69b8d8ffff05fc8342f90bbccdf9c2b"
        },
        "date": 1649424344027,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 283,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5017,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15743,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18579,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10683,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11440,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12276,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7574,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9756,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9506,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11698,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13792,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15821,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154486,
            "range": "± 345",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8765,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12660,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6585,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12668,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16063,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15869,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5999,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33151,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29326,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 945,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2112,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2460,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1439,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1469,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1738,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1477,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1493,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1677,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1704,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1367,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1957,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3758,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1720,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2238,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1345,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1036,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1123,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1506,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 520,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3643,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3535,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4355,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14767,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1423088,
            "range": "± 2980",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5189,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5352,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5589,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8633,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8607,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11519,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11603,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8415,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2447136,
            "range": "± 3306",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1079652,
            "range": "± 3841",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4472,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4755,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4284,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3545,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4508,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6172,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 455,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 702465,
            "range": "± 3071",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 667201,
            "range": "± 3436",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a1b5191ec6fe6319d900a52b972c5ffcea9a81a1",
          "message": "Bump webpack-dev-server from 4.8.0 to 4.8.1 (#2013)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.8.0 to 4.8.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.8.1</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.8.0...v4.8.1\">4.8.1</a> (2022-04-06)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>types (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4373\">#4373</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f6fe6be27656c9cc1e65a894a889d7443be7e6a8\">f6fe6be</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.8.0...v4.8.1\">4.8.1</a> (2022-04-06)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>types (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4373\">#4373</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/f6fe6be27656c9cc1e65a894a889d7443be7e6a8\">f6fe6be</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/cfbba4a7e397f168d77d0fdc338b5c4ad673ab66\"><code>cfbba4a</code></a> chore(release): 4.8.1</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/f6fe6be27656c9cc1e65a894a889d7443be7e6a8\"><code>f6fe6be</code></a> fix: types (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4373\">#4373</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/56410ba7f92fb3e7f3cd75cbdec7ac37b0b67ac4\"><code>56410ba</code></a> chore(deps-dev): bump eslint-plugin-import</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/58bdd5155dd58049e5bc749dab7281baf817e26c\"><code>58bdd51</code></a> chore(deps-dev): bump prettier from 2.6.1 to 2.6.2 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4364\">#4364</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.8.0...v4.8.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.8.0&new-version=4.8.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-08T19:45:42Z",
          "tree_id": "e7992d624163fbf49b7edcfdf43ddd5f616ce7b8",
          "url": "https://github.com/boa-dev/boa/commit/a1b5191ec6fe6319d900a52b972c5ffcea9a81a1"
        },
        "date": 1649449158451,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 269,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4593,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14714,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17332,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9802,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10494,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11310,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6848,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8983,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8775,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10843,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12690,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14605,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143500,
            "range": "± 846",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8043,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11784,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5972,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11811,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15311,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15028,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5810,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31304,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27536,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 916,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1945,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2261,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1386,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1402,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1618,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1405,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1417,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1639,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1640,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1267,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1828,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3621,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1648,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2075,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1283,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1012,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1052,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1411,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 515,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3346,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3225,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4175,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15248,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1326499,
            "range": "± 27688",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5098,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5231,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5429,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8301,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8232,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10966,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11005,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7855,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2572200,
            "range": "± 2175",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1128121,
            "range": "± 3016",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4403,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4584,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4192,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3214,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4110,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5855,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 647,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 686329,
            "range": "± 3765",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 651531,
            "range": "± 3916",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "8d746ecc0bd909e333082f3813300f5e0f04ec2e",
          "message": "Upgraded wasm-bindgen (#2020)\n\nThis Pull Request supersedes #2018 and #2017.\r\n\r\nIt changes the following:\r\n\r\n- Updates the wasm-bindgen dependency now that a new version without the clippy bug has been released\r\n- Updates all dependencies to their latest versions",
          "timestamp": "2022-04-08T20:27:14Z",
          "tree_id": "5d6cf860dac783195fd9701c1cf1393ec2d52d83",
          "url": "https://github.com/boa-dev/boa/commit/8d746ecc0bd909e333082f3813300f5e0f04ec2e"
        },
        "date": 1649451882197,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 364,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5443,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17818,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20778,
            "range": "± 615",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11942,
            "range": "± 420",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12988,
            "range": "± 488",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14322,
            "range": "± 595",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8318,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11133,
            "range": "± 839",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10460,
            "range": "± 702",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13101,
            "range": "± 468",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15115,
            "range": "± 910",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17993,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 184648,
            "range": "± 8202",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9687,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14003,
            "range": "± 930",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7347,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14595,
            "range": "± 611",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18216,
            "range": "± 720",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18449,
            "range": "± 923",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7279,
            "range": "± 396",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37155,
            "range": "± 1726",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 32612,
            "range": "± 1851",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1309,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2548,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3135,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1897,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1897,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2197,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1983,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1927,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2189,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2179,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1786,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2368,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4709,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2175,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2829,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1778,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1324,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1385,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1820,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 701,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4563,
            "range": "± 221",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4301,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5600,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20646,
            "range": "± 622",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1785414,
            "range": "± 60223",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6784,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6946,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7132,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10751,
            "range": "± 370",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11000,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14996,
            "range": "± 559",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14527,
            "range": "± 915",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10172,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2954568,
            "range": "± 71319",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1264844,
            "range": "± 52044",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5848,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6029,
            "range": "± 382",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5486,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4288,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5467,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7774,
            "range": "± 269",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 806,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 838654,
            "range": "± 27348",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 782637,
            "range": "± 37814",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "314e4ca656b8eef2ee042ca767c92c8987ee334c",
          "message": "Allow `PropertyName`s in `BindingProperty`in `ObjectBindingPattern` (#2022)\n\nThis Pull Request changes the following:\r\n\r\n- Allow `PropertyName`s in `BindingProperty`in `ObjectBindingPattern`. Previously only `BindingIdentifier`s where allowed.",
          "timestamp": "2022-04-09T15:01:55Z",
          "tree_id": "935956ede5217186ac276da11934946d28e752a6",
          "url": "https://github.com/boa-dev/boa/commit/314e4ca656b8eef2ee042ca767c92c8987ee334c"
        },
        "date": 1649518331722,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 247,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4211,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13079,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15443,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8636,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9365,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10089,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6232,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8058,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7766,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9559,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11317,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12792,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 126730,
            "range": "± 1545",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7231,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10506,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5436,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10482,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13395,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13201,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5244,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27799,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24702,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 827,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1720,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2018,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1234,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1246,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1406,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1223,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1232,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1446,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1434,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1158,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1625,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3589,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1459,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2070,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1302,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 894,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 946,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1242,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 453,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2956,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2878,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3735,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13462,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1164420,
            "range": "± 16127",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4418,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4569,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4781,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7370,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7321,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 9795,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 9846,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 6877,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2330677,
            "range": "± 12901",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1013766,
            "range": "± 9715",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3833,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4041,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3626,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2805,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3588,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5244,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 589,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 616627,
            "range": "± 3222",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 581182,
            "range": "± 6480",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "2e0254b6186b005cc464982d6afb8a0dcaca9d92",
          "message": "Allow `Initializer` after `ArrayBindingPattern` in `FormalParameter` (#2002)\n\nThis Pull Request changes the following:\r\n\r\n- Allow `Initializer` after `ArrayBindingPattern` in `FormalParameter`\r\n- Refactor `Initializer` detection in `FormalParameter` to avoid clones",
          "timestamp": "2022-04-09T15:13:10Z",
          "tree_id": "c83dbc5bfeb07a152e4442ad7339a143a87b9102",
          "url": "https://github.com/boa-dev/boa/commit/2e0254b6186b005cc464982d6afb8a0dcaca9d92"
        },
        "date": 1649519027232,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 278,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4660,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14780,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17361,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9845,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10585,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11351,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6937,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9029,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8800,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10846,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12774,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14517,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146597,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8118,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11790,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6025,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11991,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15398,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15037,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5867,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31435,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27565,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 898,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1951,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2271,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1397,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1440,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1690,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1428,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1444,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1684,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1697,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1254,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1838,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4033,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1613,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2065,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1270,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1011,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1050,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1432,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 520,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3340,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3241,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4191,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15204,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1312046,
            "range": "± 1933",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5046,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5211,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5359,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8299,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8345,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11118,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11052,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7745,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2639684,
            "range": "± 58331",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1163521,
            "range": "± 4156",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4325,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4514,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4090,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3166,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4024,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5938,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 657,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 700580,
            "range": "± 3827",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 661207,
            "range": "± 3918",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "2a63de3d6800c8343a7f21d4ce0a998ebe7ccf90",
          "message": "Allow unicode escaped characters in identifiers that are keywords (#2021)\n\nThis Pull Request changes the following:\r\n\r\n- Remove syntax error for unicode escaped characters in keywords from the lexer.\r\n- Adjust the lexer tokens for keywords to indicate if they contain unicode escaped characters.\r\n- Throw syntax errors in parser, when keywords cannot contain unicode escaped characters.",
          "timestamp": "2022-04-09T17:52:39Z",
          "tree_id": "d47bc43f1c785f799a1ddf9ff38dab59c095986b",
          "url": "https://github.com/boa-dev/boa/commit/2a63de3d6800c8343a7f21d4ce0a998ebe7ccf90"
        },
        "date": 1649528444288,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 281,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4655,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14804,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17548,
            "range": "± 688",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9780,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10478,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11312,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6958,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9048,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8832,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10808,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12835,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14583,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144485,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8265,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11973,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6174,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11773,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14955,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14902,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5863,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31220,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27731,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 916,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1936,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2270,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1377,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1389,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1623,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1469,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1417,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1663,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1651,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1256,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1802,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3611,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1651,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2131,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1093,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1012,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1044,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1426,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 504,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3400,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3209,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4145,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15195,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1315031,
            "range": "± 2509",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5044,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5191,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5466,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8274,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8281,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10965,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10949,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7765,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2712312,
            "range": "± 106023",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1154921,
            "range": "± 4845",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4365,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4597,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4125,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3137,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4119,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5115,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 567,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 622344,
            "range": "± 5336",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 663226,
            "range": "± 4759",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "34303f150c38fcb59e6cbd58d146eddeeb48974b",
          "message": "Bump test262 from `926b096` to `d7c0a20` (#2024)\n\nBumps [test262](https://github.com/tc39/test262) from `926b096` to `d7c0a20`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/d7c0a2076c2b0c1531aef7069d4abe70eec44ee3\"><code>d7c0a20</code></a> Remove check for per-comparator call detach check in TypedArray.prototype.sort</li>\n<li><a href=\"https://github.com/tc39/test262/commit/3ac6b7336987d329a750c5093beb8f55d5bbad12\"><code>3ac6b73</code></a> Add test that TypedArray.prototype.set doesn't throw if a getter for an eleme...</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8b29141224f42ac13f247cfd553aeda798bd49e0\"><code>8b29141</code></a> Remove check for per-iteration detach check in TypedArray.prototype.set</li>\n<li><a href=\"https://github.com/tc39/test262/commit/f60d7cf67d98996f750c8acee4b2f28600bf3ddb\"><code>f60d7cf</code></a> fixup! Fix false negative in for-in test</li>\n<li><a href=\"https://github.com/tc39/test262/commit/384a4e1368523ce959c8b7c376036a734decd6ca\"><code>384a4e1</code></a> Fix false negative in for-in test</li>\n<li><a href=\"https://github.com/tc39/test262/commit/3c88e9b6193b124e7cc993867f05cf0f25e049d2\"><code>3c88e9b</code></a> Fix false negative in for-in test</li>\n<li><a href=\"https://github.com/tc39/test262/commit/833a784f205c1dfe2c12af4e9f8753b9ab4f606e\"><code>833a784</code></a> Tests for computing PlainYearMonth addition and subtraction in correct calend...</li>\n<li><a href=\"https://github.com/tc39/test262/commit/c58ac691ebb16ce23af564d64c1f8c0a63479afa\"><code>c58ac69</code></a> Test that &quot;infinity&quot; is not recognized as numeric</li>\n<li><a href=\"https://github.com/tc39/test262/commit/c572588ea91e040a7fc9b639ae74a90810644892\"><code>c572588</code></a> Test that &quot;INFINITY&quot; is not recognized as numeric</li>\n<li><a href=\"https://github.com/tc39/test262/commit/51822ff2d8aa0687c76a0fef85f288f34156c4fa\"><code>51822ff</code></a> Update Symbol.species tests for TypedArray constructor</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/926b0960d737b9f1dfd0ec0c1dfd95d836016d33...d7c0a2076c2b0c1531aef7069d4abe70eec44ee3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-11T13:30:30Z",
          "tree_id": "b467b9bd4e1cdeccf18bc730d022ae869b6953f8",
          "url": "https://github.com/boa-dev/boa/commit/34303f150c38fcb59e6cbd58d146eddeeb48974b"
        },
        "date": 1649685712809,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 262,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4928,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15725,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18364,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10763,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11463,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12405,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7553,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9675,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9533,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11563,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13705,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15556,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154940,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8654,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12484,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6455,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12342,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15786,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15596,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6059,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33255,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29266,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 965,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2116,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2434,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1465,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1498,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1767,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1461,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1471,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1692,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1721,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1335,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1951,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3677,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1700,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2193,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1372,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1041,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1095,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1497,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 502,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3638,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3512,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4251,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15234,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1410127,
            "range": "± 53204",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5070,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5330,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5364,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8655,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8675,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11391,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11361,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8289,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2462741,
            "range": "± 3291",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1090838,
            "range": "± 10068",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4498,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4626,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4186,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3357,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4350,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6309,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 469,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 704255,
            "range": "± 4810",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 663552,
            "range": "± 5506",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "committer": {
            "email": "93457935+lupd@users.noreply.github.com",
            "name": "lupd",
            "username": "lupd"
          },
          "distinct": false,
          "id": "781561e04790b3b55a14c261efa928b3dc9d7341",
          "message": "Fix casting negative number to usize in `Array.splice` (#2030)\n\nThis Pull Request fixes a faulty cast for `Array.splice`. \r\n\r\nNegative values for delete_count were being directly casted to usize, which was not the intended behavior. This pull request fixes the issue by using a fallible conversion, defaulting to 0 if the conversion fails.\r\n\r\nIt changes the following:\r\n\r\n- Replace cast in `Array.splice` prototype method with fallible conversion.",
          "timestamp": "2022-04-14T23:07:24Z",
          "tree_id": "a18aa9b51b98a9a4b01151471395cc295e44c517",
          "url": "https://github.com/boa-dev/boa/commit/781561e04790b3b55a14c261efa928b3dc9d7341"
        },
        "date": 1649979464698,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 271,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4645,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14635,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17114,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9713,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10397,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11234,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6859,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8949,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8740,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10734,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12696,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14447,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144413,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8197,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11814,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6100,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11581,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14780,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14586,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5881,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31025,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27421,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 903,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1913,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2243,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1350,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1359,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1611,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1427,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1436,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1615,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1628,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1253,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1801,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3629,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1630,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2079,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1284,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1009,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1056,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1413,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 504,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3333,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3211,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4143,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15347,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1313476,
            "range": "± 1320",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5044,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5172,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5422,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8250,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8261,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11027,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10970,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7645,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2658593,
            "range": "± 4564",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1157738,
            "range": "± 6293",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4372,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4538,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4111,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3141,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4076,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5928,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 632,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 706716,
            "range": "± 3089",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 661104,
            "range": "± 3379",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a357a18fcc91f720679d163a1531175f0001ebb0",
          "message": "Bump rayon from 1.5.1 to 1.5.2 (#2029)\n\nBumps [rayon](https://github.com/rayon-rs/rayon) from 1.5.1 to 1.5.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rayon-rs/rayon/blob/master/RELEASES.md\">rayon's changelog</a>.</em></p>\n<blockquote>\n<h1>Release rayon 1.5.2 / rayon-core 1.9.2 (2022-04-13)</h1>\n<ul>\n<li>The new <code>ParallelSlice::par_rchunks()</code> and <code>par_rchunks_exact()</code> iterate\nslice chunks in reverse, aligned the against the end of the slice if the\nlength is not a perfect multiple of the chunk size. The new\n<code>ParallelSliceMut::par_rchunks_mut()</code> and <code>par_rchunks_exact_mut()</code> are the\nsame for mutable slices.</li>\n<li>The <code>ParallelIterator::try_*</code> methods now support <code>std::ops::ControlFlow</code> and\n<code>std::task::Poll</code> items, mirroring the unstable <code>Try</code> implementations in the\nstandard library.</li>\n<li>The <code>ParallelString</code> pattern-based methods now support <code>&amp;[char]</code> patterns,\nwhich match when any character in that slice is found in the string.</li>\n<li>A soft limit is now enforced on the number of threads allowed in a single\nthread pool, respecting internal bit limits that already existed. The current\nmaximum is publicly available from the new function <code>max_num_threads()</code>.</li>\n<li>Fixed several Stacked Borrow and provenance issues found by <code>cargo miri</code>.</li>\n</ul>\n<h2>Contributors</h2>\n<p>Thanks to all of the contributors for this release!</p>\n<ul>\n<li><a href=\"https://github.com/atouchet\"><code>@​atouchet</code></a></li>\n<li><a href=\"https://github.com/bluss\"><code>@​bluss</code></a></li>\n<li><a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a></li>\n<li><a href=\"https://github.com/fzyzcjy\"><code>@​fzyzcjy</code></a></li>\n<li><a href=\"https://github.com/nyanzebra\"><code>@​nyanzebra</code></a></li>\n<li><a href=\"https://github.com/paolobarbolini\"><code>@​paolobarbolini</code></a></li>\n<li><a href=\"https://github.com/RReverser\"><code>@​RReverser</code></a></li>\n<li><a href=\"https://github.com/saethlin\"><code>@​saethlin</code></a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/rayon-rs/rayon/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rayon&package-manager=cargo&previous-version=1.5.1&new-version=1.5.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-14T23:17:54Z",
          "tree_id": "6ad287f5555f19082b3506fd1af4a24f72681918",
          "url": "https://github.com/boa-dev/boa/commit/a357a18fcc91f720679d163a1531175f0001ebb0"
        },
        "date": 1649980246634,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 275,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4699,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14809,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17378,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9923,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10631,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11438,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6967,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9073,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8838,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10934,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12905,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14573,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146860,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8186,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11852,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6135,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11956,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15351,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15027,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5965,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31709,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27756,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 911,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1953,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2307,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1393,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1404,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1581,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1390,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1401,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1623,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1632,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1269,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1846,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3745,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1624,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2071,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1315,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1012,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1045,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1410,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 529,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3362,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3290,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4214,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15275,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1333142,
            "range": "± 2555",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5105,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5240,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5366,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8263,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8264,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11065,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11110,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7706,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2527092,
            "range": "± 3328",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1120709,
            "range": "± 4387",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4317,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4532,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4070,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3172,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4125,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5910,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 652,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 688163,
            "range": "± 2704",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 650751,
            "range": "± 3882",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "2d6e93cc83685a0f6b8efa88bb3bfbb14011701d",
          "message": "Fix `Symbol` and `BigInt` constructors (#2032)\n\nIt changes the following:\r\n- `Symbol` object has `[[Construct]]` internal method\r\n- Fix and comment step 1 in `Symbol` constructor.\r\n- Implement step 1 in `BigInt` constructor.",
          "timestamp": "2022-04-17T08:03:09Z",
          "tree_id": "2c232d08e0ce83e0e21614ecd257d0196b6f560e",
          "url": "https://github.com/boa-dev/boa/commit/2d6e93cc83685a0f6b8efa88bb3bfbb14011701d"
        },
        "date": 1650184414156,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 282,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4648,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14749,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17141,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9775,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10461,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11286,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6841,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8927,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8657,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10803,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12799,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14446,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147409,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8094,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11697,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6029,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11772,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15072,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14813,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5922,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31212,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27582,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 908,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1949,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2287,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1389,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1398,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1611,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1428,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1397,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1616,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1634,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1273,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1784,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3608,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1630,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2066,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1009,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1050,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1401,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 523,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3358,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3244,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4178,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15133,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1360956,
            "range": "± 8545",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5099,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5246,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5382,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8285,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8226,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10869,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10948,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7677,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2520577,
            "range": "± 3158",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1117031,
            "range": "± 3221",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4366,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4560,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4109,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3166,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4096,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5851,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 642,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 690328,
            "range": "± 5059",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 651561,
            "range": "± 3175",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "5a9ced380629db85a9fc7dee3ec93bf15c0ff6ed",
          "message": "Implement `get RegExp.prototype.hasIndices` (#2031)\n\nIt changes the following:\r\n- Implement `get RegExp.prototype.hasIndices`\r\n- Update Implement `get RegExp.prototype.flags` to currect spec\r\n- Update `RegExpFlags`",
          "timestamp": "2022-04-17T19:50:53Z",
          "tree_id": "0c1d45fa774e8e988f33bcdbe4f623c6538fbbf4",
          "url": "https://github.com/boa-dev/boa/commit/5a9ced380629db85a9fc7dee3ec93bf15c0ff6ed"
        },
        "date": 1650226750169,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 323,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4761,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15728,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18268,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10260,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11185,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11823,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7163,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9365,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8968,
            "range": "± 213",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10909,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13025,
            "range": "± 398",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15025,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154161,
            "range": "± 4071",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8482,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12327,
            "range": "± 332",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6102,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12090,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15958,
            "range": "± 423",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15761,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6080,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32857,
            "range": "± 1220",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28420,
            "range": "± 801",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1011,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2249,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2504,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1540,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1630,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1877,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1604,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1603,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1964,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1884,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1512,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1980,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4485,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1918,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2481,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1525,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1098,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1113,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1482,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 588,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3811,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3701,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4875,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17497,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1550084,
            "range": "± 25998",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6045,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6177,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6187,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9247,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9285,
            "range": "± 326",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12271,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12528,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8681,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2854913,
            "range": "± 85354",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1328296,
            "range": "± 35561",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4959,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5045,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4594,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3690,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4941,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6814,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 741,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 835876,
            "range": "± 23045",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 774585,
            "range": "± 21164",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "6bffe3e9c6b288e538add5a3ed75639dbabb01a0",
          "message": "Make `Array.prototype` an array object (#2033)\n\n\r\nIt changes the following:\r\n- Make `Array.prototype` an array object",
          "timestamp": "2022-04-17T19:58:18Z",
          "tree_id": "5fa701b2ecaeed9402c4997cb409f5761a940661",
          "url": "https://github.com/boa-dev/boa/commit/6bffe3e9c6b288e538add5a3ed75639dbabb01a0"
        },
        "date": 1650227038670,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 256,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4182,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13174,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15467,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8836,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9493,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10192,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6206,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8131,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7902,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9670,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11293,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12968,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130298,
            "range": "± 635",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7300,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10505,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5411,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10668,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13762,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13372,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5198,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27877,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24671,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 801,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1758,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1993,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1237,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1253,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1465,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1219,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1280,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1446,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1442,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1127,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1605,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3329,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1434,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1819,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1137,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 890,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 932,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1250,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 457,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2951,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2917,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3691,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13586,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1193264,
            "range": "± 14001",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4453,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4617,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4682,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7806,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7808,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10244,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10162,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 6796,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2241124,
            "range": "± 18474",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1001813,
            "range": "± 9447",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3846,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 3985,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3621,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2803,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3609,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5161,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 557,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 612183,
            "range": "± 7373",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 574565,
            "range": "± 3279",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "8ffb84ef489f409794e52d5a8bfbe373698ebcba",
          "message": "Bump test262 from `d7c0a20` to `f0bf5df` (#2035)\n\nBumps [test262](https://github.com/tc39/test262) from `d7c0a20` to `f0bf5df`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/f0bf5dfcea7bce15eb4f7e0b0e97b2a5f3e830c5\"><code>f0bf5df</code></a> parseInt: fix description typo</li>\n<li><a href=\"https://github.com/tc39/test262/commit/4bbe20d52cf415fc8536f2352a49d9af20b24414\"><code>4bbe20d</code></a> add missing TypedArray feature</li>\n<li><a href=\"https://github.com/tc39/test262/commit/33a5433d1bd1f38af7967fca0dd0665fd1f7f1cc\"><code>33a5433</code></a> Temporal: PlainDateTime: Port Demitasse <code>until</code> and <code>since</code> tests</li>\n<li><a href=\"https://github.com/tc39/test262/commit/84679fd7ed342e51e0b9de6573d94e099fa0bc6f\"><code>84679fd</code></a> Temporal: Add a test for PlainDateTime#withPlainDate with intl calendars. (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3\">#3</a>...</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ff5af6fccf53bb004b3f6ac4ec49d72377f46b03\"><code>ff5af6f</code></a> Temporal: Consolidate tests for invalid string argument to round().</li>\n<li><a href=\"https://github.com/tc39/test262/commit/1c19242ae42d1f5e1de6ca43d6a7cb84e88ae964\"><code>1c19242</code></a> Remove check for per-iteration detach check in TypedArray.prototype.set</li>\n<li><a href=\"https://github.com/tc39/test262/commit/4dafd2158b5982730e49c6ed2abf55db0a4315ad\"><code>4dafd21</code></a> Temporal: Remove some stray arguments to TemporalHelpers.assertDuration.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/c35ae2099d507365c3227d8c7a6084d4399b1692\"><code>c35ae20</code></a> Temporal: Some more tests for PlainDateTime#with. (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3481\">#3481</a>)</li>\n<li><a href=\"https://github.com/tc39/test262/commit/d9616ed91f1b76a1c2bea0c15efb89a9053faef0\"><code>d9616ed</code></a> Add tests for direction of rounding functionality</li>\n<li><a href=\"https://github.com/tc39/test262/commit/3905c0c80afb5d6cf0c433fa9232d63f42ef6141\"><code>3905c0c</code></a> Expand toString() rounding tests from PlainTime to cover other types</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/d7c0a2076c2b0c1531aef7069d4abe70eec44ee3...f0bf5dfcea7bce15eb4f7e0b0e97b2a5f3e830c5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-18T12:14:59Z",
          "tree_id": "e27f7fd5151cc8470282e700b40f70b99882fe53",
          "url": "https://github.com/boa-dev/boa/commit/8ffb84ef489f409794e52d5a8bfbe373698ebcba"
        },
        "date": 1650285958634,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 312,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4395,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14131,
            "range": "± 642",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16666,
            "range": "± 850",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9498,
            "range": "± 488",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10102,
            "range": "± 513",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10721,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6983,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8908,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8304,
            "range": "± 379",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10225,
            "range": "± 431",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12683,
            "range": "± 499",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14034,
            "range": "± 636",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143102,
            "range": "± 7482",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8093,
            "range": "± 393",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11836,
            "range": "± 535",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6319,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11539,
            "range": "± 699",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14997,
            "range": "± 652",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14693,
            "range": "± 741",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5667,
            "range": "± 280",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29812,
            "range": "± 1492",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26293,
            "range": "± 1180",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 980,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2023,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2583,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1610,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1499,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1717,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1487,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1538,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1768,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1687,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1345,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1847,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3942,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1703,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2170,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1394,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1013,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1023,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1430,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 577,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3658,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3632,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4438,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16605,
            "range": "± 681",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1455435,
            "range": "± 51197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5764,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5731,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5874,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9337,
            "range": "± 434",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9180,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11795,
            "range": "± 599",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11981,
            "range": "± 519",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8130,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2631466,
            "range": "± 102266",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1247226,
            "range": "± 76206",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4748,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5039,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4571,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3781,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4896,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6454,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 688,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 788017,
            "range": "± 22992",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 789765,
            "range": "± 4896",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "c605fad549593461ab028620d9638f5ace02c2cf",
          "message": "Bump clap from 3.1.8 to 3.1.9 (#2034)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.8 to 3.1.9.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.9</h2>\n<h2>[3.1.9] - 2022-04-15</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Pin the <code>clap_derive</code> version so a compatible version is always used with <code>clap</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.9] - 2022-04-15</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Pin the <code>clap_derive</code> version so a compatible version is always used with <code>clap</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/7598c000f9da5698fc00985dea1b8ba17e9572c5\"><code>7598c00</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/d05c5dac4123d76b5695dfc4dce40bedfd3b981e\"><code>d05c5da</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/4abf9d7f2eec07e9c57a33fbd6a29d9d67847ae9\"><code>4abf9d7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3636\">#3636</a> from epage/derive</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/027f2511c65b3035027ca2a3f45591556f66557e\"><code>027f251</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3634\">#3634</a> from turrisxyz/naveen/feat/set-perms-actions</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ed57342bdd38615e0e357eb7ad2ef6772af6e85b\"><code>ed57342</code></a> fix(derive): Couple derive version to clap</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/297b9cf594d1e136ed54862533c12e4f9ebd11ad\"><code>297b9cf</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/b3cbfd0ae033458f70ac588ebd13782cb5a0cf08\"><code>b3cbfd0</code></a> docs(man): Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/7849c35a3e67e106e14543b000001eefc8d91579\"><code>7849c35</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3635\">#3635</a> from epage/port</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/15d8b3b0cd6ba884e1b3fb0d429a11712c3026b1\"><code>15d8b3b</code></a> style: Make clippy happy</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/2f0d91688aa6920d50597ff0290c03b92525abbc\"><code>2f0d916</code></a> docs(lex): Fix links</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.8...v3.1.9\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.8&new-version=3.1.9)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-18T12:25:52Z",
          "tree_id": "5d981dc5fb656c1263037dadbcd64ccca9218279",
          "url": "https://github.com/boa-dev/boa/commit/c605fad549593461ab028620d9638f5ace02c2cf"
        },
        "date": 1650286641602,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 289,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4709,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14832,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17466,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9917,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10670,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11439,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6977,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9098,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8862,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11037,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12868,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14597,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147713,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8253,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11927,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6130,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11994,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15452,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15161,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5937,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31543,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27771,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 926,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2000,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2301,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1422,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1475,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1663,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1448,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1433,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1665,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1704,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1338,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1869,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3788,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1663,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2104,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1315,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1016,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1057,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1445,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 525,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3430,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3326,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4196,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15195,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1340690,
            "range": "± 1791",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5128,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5285,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5414,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8818,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8842,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11563,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11587,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7808,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2540189,
            "range": "± 3425",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1140500,
            "range": "± 6472",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4359,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4552,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4091,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3190,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4094,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5878,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 643,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 693017,
            "range": "± 4269",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 655716,
            "range": "± 4832",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "committer": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "distinct": false,
          "id": "df19f7f6066942043806fc2e97a2e11ead76cfc6",
          "message": "Partial implementation for Intl.DateTimeFormat (#2025)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request provides initial implementation for DateTimeFormat constructor. It relates to #1562.\r\n\r\nIt changes the following:\r\n\r\n- Adds `Intl.DateTimeFormat` property\r\n- Partially implements `DateTimeFormat` constructor (`InitializeDateTimeFormat` step is postponed).\r\n- Introduces `ObjectData::DateTimeFormat`",
          "timestamp": "2022-04-19T14:57:20Z",
          "tree_id": "382f9515128173ce75cdc1529fed4094e2b1dcbd",
          "url": "https://github.com/boa-dev/boa/commit/df19f7f6066942043806fc2e97a2e11ead76cfc6"
        },
        "date": 1650381931371,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 262,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5060,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15702,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18893,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10747,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11508,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12278,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7696,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9861,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9727,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11858,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14117,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15788,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 155874,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8668,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12553,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6519,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12837,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16648,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16394,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5996,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33866,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30132,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1011,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2177,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2465,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1478,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1525,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1771,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1504,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1537,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1748,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1738,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1358,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1982,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3856,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1730,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2294,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1366,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1089,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1132,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1540,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 535,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3764,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3622,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4407,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15046,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1400162,
            "range": "± 2948",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5178,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5370,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5689,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8792,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8781,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11736,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11752,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8436,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2409444,
            "range": "± 10289",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1076698,
            "range": "± 15858",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4539,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4773,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4232,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3570,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4675,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6329,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 441,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 700121,
            "range": "± 6750",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 655675,
            "range": "± 3022",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3de921e600123fb4ec188d6120eaba45fe413a92",
          "message": "Bump clap from 3.1.9 to 3.1.10 (#2037)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.9 to 3.1.10.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.10] - 2022-04-19</h2>\n<h3>Featues</h3>\n<ul>\n<li>Expose <code>Command::build</code> for custom help generation or other command introspection needs</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/0194568b03bd563105d45f553636c7c4eeaf3757\"><code>0194568</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/62b1e4874a9a90e1bb2cbd237107898f2a7faa1f\"><code>62b1e48</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/c818ef401d103957a75aacd79bcfada8822cf276\"><code>c818ef4</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3642\">#3642</a> from epage/build</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/8f182067e3456a6cda18f347b827dc84f7ceb84b\"><code>8f18206</code></a> feat(clap): Publicly expose <code>Command::build</code></li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/eddc04cbcc3119c2bb104cb0234dccc866990800\"><code>eddc04c</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/84bcab77e52862ca40c214f01d74a438a854c753\"><code>84bcab7</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/83f1b165ba9303237cb8ba6878e75aaf9352ce37\"><code>83f1b16</code></a> perf(lex): Drop a dependency</li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.9...v3.1.10\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.9&new-version=3.1.10)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-20T15:25:26Z",
          "tree_id": "b4031b82f944d024bb1777c502427645c137e0d3",
          "url": "https://github.com/boa-dev/boa/commit/3de921e600123fb4ec188d6120eaba45fe413a92"
        },
        "date": 1650470745250,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 277,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4626,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14566,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17196,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9767,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10527,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11307,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6897,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8942,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8764,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10810,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12656,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14496,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144669,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7988,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11558,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5968,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11815,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15226,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15005,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5874,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31267,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27423,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 920,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1963,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2278,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1386,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1412,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1636,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1410,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1425,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1662,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1661,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1312,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1822,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3784,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1623,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2064,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1324,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1020,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1051,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1435,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 530,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3385,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3318,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4228,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15454,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1333076,
            "range": "± 3718",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5049,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5203,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5440,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8328,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8362,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11077,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11172,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7725,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2524364,
            "range": "± 3306",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1114184,
            "range": "± 6895",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4380,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4582,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4070,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3223,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4138,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5886,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 668,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 688946,
            "range": "± 3056",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 652048,
            "range": "± 2836",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "e0a552aaf28e63e5a8241c1720a466ddea7f9ae6",
          "message": "Bump anyhow from 1.0.56 to 1.0.57 (#2038)\n\nBumps [anyhow](https://github.com/dtolnay/anyhow) from 1.0.56 to 1.0.57.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/f64ca0a02d1901099a8775a785acdcf24ae3f3c8\"><code>f64ca0a</code></a> Release 1.0.57</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/4c198e3d9b54745c84f23be5f71a32ce8c590d69\"><code>4c198e3</code></a> Remove log4rs workaround from bail macro</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/6833150a7965ad9f489a1da619298ba84b8d3148\"><code>6833150</code></a> Update ui test suite to nightly-2022-03-21</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/1a763e45da53aa685c6491341d71b30149baf49c\"><code>1a763e4</code></a> Update ui test suite to nightly-2022-03-10</li>\n<li>See full diff in <a href=\"https://github.com/dtolnay/anyhow/compare/1.0.56...1.0.57\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=anyhow&package-manager=cargo&previous-version=1.0.56&new-version=1.0.57)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-22T12:07:11Z",
          "tree_id": "b43b16e023a573e0c243035fddd12d612046dc08",
          "url": "https://github.com/boa-dev/boa/commit/e0a552aaf28e63e5a8241c1720a466ddea7f9ae6"
        },
        "date": 1650631139009,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4687,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14659,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17210,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9701,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10471,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11245,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6888,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9007,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8749,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10792,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12805,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14548,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145417,
            "range": "± 784",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8141,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11753,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6035,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11813,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15274,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15010,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5863,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31120,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27432,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 931,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1972,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2273,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1371,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1437,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1621,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1459,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1421,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1657,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1628,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1279,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1811,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3785,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1649,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2074,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1291,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1021,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1051,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1435,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 520,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3355,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3288,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4183,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15466,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1353099,
            "range": "± 2504",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5038,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5204,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5449,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8262,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8274,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11071,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11138,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7720,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2531967,
            "range": "± 8456",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1114220,
            "range": "± 7161",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4389,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4535,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4068,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3205,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4155,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5909,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 650,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 688855,
            "range": "± 3652",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 651725,
            "range": "± 4816",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "5b46d1275c7abab317a5d3d96024beb838fa6ac6",
          "message": "Bump clap from 3.1.10 to 3.1.11 (#2039)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.10 to 3.1.11.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.11</h2>\n<h2>[3.1.11] - 2022-04-22</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Implied conflicts override <code>Arg::required</code>, making the behavior consistent with how we calculate conflicts for error reporting</li>\n<li>Members of a mutually exclusive <code>ArgGroup</code>  override <code>Arg::required</code>, making the behavior consistent with how we calculate conflicts for error reporting</li>\n<li><code>Arg::overrides_with</code> always override <code>Arg::required</code>, not just when the parser processes an override</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.11] - 2022-04-22</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Implied conflicts override <code>Arg::required</code>, making the behavior consistent with how we calculate conflicts for error reporting</li>\n<li>Members of a mutually exclusive <code>ArgGroup</code>  override <code>Arg::required</code>, making the behavior consistent with how we calculate conflicts for error reporting</li>\n<li><code>Arg::overrides_with</code> always override <code>Arg::required</code>, not just when the parser processes an override</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/a46ee83224de29008e8fa6a9accb0f16e8edbbfc\"><code>a46ee83</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/62e9d2dfe1f730c12cd2aadd957b3a890255c141\"><code>62e9d2d</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/8505c47e2ecf21ca00f84b8171319ed8c4cc067a\"><code>8505c47</code></a> refactor(validator): Decouple parser (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3645\">#3645</a>)</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/9d523012fec81a54881c0a3e8d6ea9e7610c216d\"><code>9d52301</code></a> refactor(validator): Decouple parser</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6229e78bc6f31956a3b88242f6031724352a2598\"><code>6229e78</code></a> refactor(parser): Parser is solely responsible for populating ArgMatches</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/02ffd5983051da1c6bcd6f8c05aace1923c737df\"><code>02ffd59</code></a> refactor(help): Move help writing down a layer</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ebeade91bff46878c4940b3e1b63900e947af459\"><code>ebeade9</code></a> refactor(help): Consolidate help errors</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6a9a5d05b0bb3bf96ea5aafdf001f2202ea07e8d\"><code>6a9a5d0</code></a> refactor(help): Make bool's meaning clearer</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/639f9e88497c435ddd906e8539d9ec47f6525aba\"><code>639f9e8</code></a> refactor(parser): Pull out long-help determination</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/a484f622dec469d1151c538610aff6a5bb76b8db\"><code>a484f62</code></a> fix(validate): Overrides always ignore required</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.10...v3.1.11\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.10&new-version=3.1.11)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-22T21:20:11Z",
          "tree_id": "a83c346be0dc3e738902001b459cb31c887aa83e",
          "url": "https://github.com/boa-dev/boa/commit/5b46d1275c7abab317a5d3d96024beb838fa6ac6"
        },
        "date": 1650664367200,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4666,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14775,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17404,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9825,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10526,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11422,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6970,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9049,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8883,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10909,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12890,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14639,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148847,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8146,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11754,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6039,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11835,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15296,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15045,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5901,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31360,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27768,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 915,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1998,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2298,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1389,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1399,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1598,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1437,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1415,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1650,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1641,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1304,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1819,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3756,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1647,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2091,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1325,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1019,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1057,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1438,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 529,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3350,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3252,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4191,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15448,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1342106,
            "range": "± 4816",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5076,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5215,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5427,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8274,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8243,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10994,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11065,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7678,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2518299,
            "range": "± 2560",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1110144,
            "range": "± 5977",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4392,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4529,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4105,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3208,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4133,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5879,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 646,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 692378,
            "range": "± 3500",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 652028,
            "range": "± 3757",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "55c89c761702782ffb5a33e31a3a1845c0e7faba",
          "message": "Fix early return in `for in loop` head (#2043)\n\nThis Pull Request changes the following:\r\n\r\n- Fix early return in `for in loop` head",
          "timestamp": "2022-04-23T22:53:03Z",
          "tree_id": "4b2b5132d53c7cc2b0d0a8e19138f895468f77bc",
          "url": "https://github.com/boa-dev/boa/commit/55c89c761702782ffb5a33e31a3a1845c0e7faba"
        },
        "date": 1650756065879,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 317,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4649,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15255,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17658,
            "range": "± 507",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10091,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10394,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11195,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7177,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9070,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8787,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10833,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13071,
            "range": "± 499",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14965,
            "range": "± 458",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154008,
            "range": "± 4305",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8326,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12493,
            "range": "± 316",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6065,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12178,
            "range": "± 391",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15589,
            "range": "± 497",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15347,
            "range": "± 505",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6054,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32540,
            "range": "± 1317",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29273,
            "range": "± 687",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1037,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2197,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2681,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1595,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1604,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1784,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1575,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1609,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1835,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1809,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1387,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1975,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4579,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1816,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2330,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1424,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1010,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1117,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1495,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 594,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3727,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3686,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4826,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16496,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1442632,
            "range": "± 47199",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5549,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5831,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6068,
            "range": "± 229",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8860,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9220,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12194,
            "range": "± 370",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12153,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8461,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2884682,
            "range": "± 88226",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1285900,
            "range": "± 39241",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4718,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5165,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4592,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3613,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4637,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6609,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 698,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 765174,
            "range": "± 25113",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 708548,
            "range": "± 27917",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "3226e5494c564f465d06bb68cf40f51907f3626b",
          "message": "Allow `let` as variable declaration name (#2044)\n\n\r\nThis Pull Request changes the following:\r\n\r\n- Allow `let` as variable declaration name",
          "timestamp": "2022-04-24T11:37:21Z",
          "tree_id": "c38d41c9737782d2488573fab2bae91a4431f05f",
          "url": "https://github.com/boa-dev/boa/commit/3226e5494c564f465d06bb68cf40f51907f3626b"
        },
        "date": 1650801831450,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 245,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4037,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14632,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16832,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9689,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10407,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9842,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5971,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7764,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7652,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9419,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11149,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12635,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144904,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8057,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10298,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5255,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10282,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14894,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14663,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5227,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27434,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27551,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 917,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2007,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2026,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1386,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1264,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1460,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1262,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1246,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1676,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1438,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1120,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1631,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3656,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1703,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1863,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1159,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 904,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 933,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1284,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 453,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2957,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2916,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3697,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15123,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1156138,
            "range": "± 3194",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5094,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5249,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5448,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8208,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8334,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11176,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11152,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7754,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2587393,
            "range": "± 3179",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1134372,
            "range": "± 5636",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4297,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4494,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4036,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3260,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4097,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5864,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 632,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 690026,
            "range": "± 4666",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 653331,
            "range": "± 4717",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "76f69b8cffd204cfb5dfe054da5aa2043bb50d14",
          "message": "Bump clap from 3.1.11 to 3.1.12 (#2045)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.11 to 3.1.12.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.12</h2>\n<h2>[3.1.12] - 2022-04-22</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Regression in 3.1.11 where the (output) streams were crossed</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.12] - 2022-04-22</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Regression in 3.1.11 where the (output) streams were crossed</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/d805c6031de73b6cab7e5f7afa9632aab273ed10\"><code>d805c60</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/d09aec2c140f3f0e915d5f361773af3f91031fe2\"><code>d09aec2</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/61514bf6d14fba62f23713a268090a1a26b5bbba\"><code>61514bf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3646\">#3646</a> from arlosi/fix-stdout</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/854017b4784bff4b73cf46016e63357c2c18b8cc\"><code>854017b</code></a> fix: Mixup between stderr and stdout introduced in v3.1.11</li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.11...v3.1.12\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.11&new-version=3.1.12)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-25T16:06:05Z",
          "tree_id": "820e827e5f72893eaf78ed1223ab60ad380ac68e",
          "url": "https://github.com/boa-dev/boa/commit/76f69b8cffd204cfb5dfe054da5aa2043bb50d14"
        },
        "date": 1650904773182,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 285,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4595,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14751,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17032,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9766,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10513,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11286,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6890,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8891,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8762,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10782,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12785,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14421,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144847,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8111,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11697,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6012,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11702,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14925,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14635,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5919,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30991,
            "range": "± 720",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27385,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 920,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1965,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2303,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1424,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1420,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1641,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1429,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1426,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1668,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1640,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1290,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1835,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3663,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1655,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2095,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1313,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1013,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1048,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1461,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3338,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3271,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4151,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15369,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1302886,
            "range": "± 646",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5017,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5254,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5455,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8281,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8271,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11256,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11233,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7775,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2582787,
            "range": "± 3263",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1137344,
            "range": "± 7298",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4323,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4507,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4058,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3188,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4091,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5921,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 609,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 690650,
            "range": "± 4817",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 650352,
            "range": "± 3245",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "279e4d9f8543629c3e969ec7474144a85930858c",
          "message": "Bump test262 from `f0bf5df` to `78c6ec7` (#2046)\n\nBumps [test262](https://github.com/tc39/test262) from `f0bf5df` to `78c6ec7`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/78c6ec7f1c9fde10f06db68b6d5ee7019aeb0f5f\"><code>78c6ec7</code></a> Test wrong types in conversions to Temporal types</li>\n<li><a href=\"https://github.com/tc39/test262/commit/afce1b3fde39abfb825da518971fc18423068e94\"><code>afce1b3</code></a> Test conversion of Number to Temporal objects</li>\n<li><a href=\"https://github.com/tc39/test262/commit/a38d3f3b679a1aa03805c9b5050be1edbe4c7f0e\"><code>a38d3f3</code></a> Add missing test for Temporal.ZonedDateTime constructor</li>\n<li><a href=\"https://github.com/tc39/test262/commit/7b3c17662985273996ef41346ff6b97de1420161\"><code>7b3c176</code></a> Add missing tests for PlainTime property bag with no time units</li>\n<li><a href=\"https://github.com/tc39/test262/commit/15ed94c891cdfb3c4dea4993c2ec93f88da8e868\"><code>15ed94c</code></a> Test conversion of object to string in Temporal.Instant context</li>\n<li><a href=\"https://github.com/tc39/test262/commit/d28ca991cb634a7eec71ea87be75de1c7f5f4633\"><code>d28ca99</code></a> Test conversion of Temporal.Instant strings with sub-minute UTC offsets</li>\n<li><a href=\"https://github.com/tc39/test262/commit/9cd27beb123e8f0bf1d7d0e0e7a462fbd4e56887\"><code>9cd27be</code></a> Test basic functionality of Temporal.Instant.from</li>\n<li><a href=\"https://github.com/tc39/test262/commit/4fdb4ee52fa6c70c18b54df9ff69c71ad044b5cd\"><code>4fdb4ee</code></a> Fix invocations of some Temporal methods</li>\n<li><a href=\"https://github.com/tc39/test262/commit/c82e2782e68c7427864e3d1da0e677b8001e018a\"><code>c82e278</code></a> Regularize some quotes</li>\n<li><a href=\"https://github.com/tc39/test262/commit/089c74ce597d16cc7a99c88960ad8aa2a0b09995\"><code>089c74c</code></a> Temporal: Port <code>PlainDateTime</code>'s <code>from</code> tests</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/f0bf5dfcea7bce15eb4f7e0b0e97b2a5f3e830c5...78c6ec7f1c9fde10f06db68b6d5ee7019aeb0f5f\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-25T16:18:53Z",
          "tree_id": "1cfa0ade164fdc6a3616cdeb923fc6d6121a136d",
          "url": "https://github.com/boa-dev/boa/commit/279e4d9f8543629c3e969ec7474144a85930858c"
        },
        "date": 1650905682349,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 388,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5786,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18287,
            "range": "± 1017",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21164,
            "range": "± 2110",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11988,
            "range": "± 355",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12822,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14075,
            "range": "± 1035",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8499,
            "range": "± 972",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11128,
            "range": "± 555",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10941,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13325,
            "range": "± 440",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15820,
            "range": "± 462",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18203,
            "range": "± 1037",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 184482,
            "range": "± 8276",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10038,
            "range": "± 440",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14524,
            "range": "± 510",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7464,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14627,
            "range": "± 944",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18775,
            "range": "± 727",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18495,
            "range": "± 719",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7455,
            "range": "± 438",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 38999,
            "range": "± 1948",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34165,
            "range": "± 1306",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1373,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2699,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3236,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1949,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1918,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2254,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2004,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1991,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2296,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2282,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1822,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2508,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4683,
            "range": "± 219",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2259,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2791,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1794,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1389,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1395,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1813,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 718,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4490,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4399,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5957,
            "range": "± 477",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20336,
            "range": "± 1420",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1930879,
            "range": "± 71489",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7172,
            "range": "± 294",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7383,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7437,
            "range": "± 250",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11253,
            "range": "± 956",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11250,
            "range": "± 802",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15600,
            "range": "± 986",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15466,
            "range": "± 898",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10273,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3097338,
            "range": "± 141879",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1369608,
            "range": "± 91864",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5773,
            "range": "± 312",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5958,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5531,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4384,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5600,
            "range": "± 267",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7897,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 790,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 879981,
            "range": "± 42126",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 820985,
            "range": "± 26083",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "committer": {
            "email": "jase.williams@gmail.com",
            "name": "Jason Williams",
            "username": "jasonwilliams"
          },
          "distinct": false,
          "id": "01bd50fa72d2a38011d7f0b78163cbc038a61655",
          "message": "cargo workspaces fixes #2001 (#2026)\n\nThis adds cargo-workspaces to our repo for easier publishing. \r\n(I think we may need to do a dry run of this first to test)\r\n\r\nfixes https://github.com/boa-dev/boa/issues/2001",
          "timestamp": "2022-04-26T18:07:49Z",
          "tree_id": "f5c74cb900752fd9afb6a228d3cc75c448b77f58",
          "url": "https://github.com/boa-dev/boa/commit/01bd50fa72d2a38011d7f0b78163cbc038a61655"
        },
        "date": 1650998326471,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 280,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4610,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14481,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16941,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9719,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10495,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11252,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6860,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8857,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8745,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10743,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12635,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14274,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145085,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7997,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11649,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6000,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11698,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14956,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14668,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5902,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30966,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27439,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 919,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1946,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2306,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1399,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1390,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1615,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1441,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1406,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1643,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1632,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1277,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1843,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3666,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1647,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2121,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1303,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1016,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1050,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1419,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 512,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3339,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3271,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4130,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15085,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1312698,
            "range": "± 1434",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5060,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5243,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5454,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8316,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8289,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10985,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10988,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7683,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2586688,
            "range": "± 3170",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1133394,
            "range": "± 4003",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4294,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4486,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4070,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3196,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4118,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5883,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 618,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 691441,
            "range": "± 3401",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 655013,
            "range": "± 4439",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "67a2dd84caaaabed3676dd1b5cbb339e5d14dcb7",
          "message": "Bump async from 2.6.3 to 2.6.4 (#2047)\n\nBumps [async](https://github.com/caolan/async) from 2.6.3 to 2.6.4.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/caolan/async/blob/v2.6.4/CHANGELOG.md\">async's changelog</a>.</em></p>\n<blockquote>\n<h1>v2.6.4</h1>\n<ul>\n<li>Fix potential prototype pollution exploit (<a href=\"https://github-redirect.dependabot.com/caolan/async/issues/1828\">#1828</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/caolan/async/commit/c6bdaca4f9175c14fc655d3783c6af6a883e6514\"><code>c6bdaca</code></a> Version 2.6.4</li>\n<li><a href=\"https://github.com/caolan/async/commit/8870da9d5022bab310413041b4079e10db3980b7\"><code>8870da9</code></a> Update built files</li>\n<li><a href=\"https://github.com/caolan/async/commit/4df6754ef4e96a742956df8782fee27242a2ea12\"><code>4df6754</code></a> update changelog</li>\n<li><a href=\"https://github.com/caolan/async/commit/8f7f90342a6571ba1c197d747ebed30c368096d2\"><code>8f7f903</code></a> Fix prototype pollution vulnerability (<a href=\"https://github-redirect.dependabot.com/caolan/async/issues/1828\">#1828</a>)</li>\n<li>See full diff in <a href=\"https://github.com/caolan/async/compare/v2.6.3...v2.6.4\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~hargasinski\">hargasinski</a>, a new releaser for async since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=async&package-manager=npm_and_yarn&previous-version=2.6.3&new-version=2.6.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\nYou can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/boa-dev/boa/network/alerts).\n\n</details>",
          "timestamp": "2022-04-26T23:34:35Z",
          "tree_id": "58cd892a79a5e9cbd6d26e134a3a614c9b2a010a",
          "url": "https://github.com/boa-dev/boa/commit/67a2dd84caaaabed3676dd1b5cbb339e5d14dcb7"
        },
        "date": 1651018179182,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4594,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14553,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17027,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9732,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10478,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11265,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6858,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8909,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8769,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10820,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12668,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14280,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144863,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8095,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11491,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5911,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11716,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14959,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14655,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5893,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31117,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27509,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 931,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2005,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2316,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1406,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1418,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1633,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1432,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1444,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1687,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1647,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1278,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1864,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3628,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1659,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2098,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1314,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1019,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1070,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1427,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 519,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3356,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3288,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4162,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14975,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1320267,
            "range": "± 2201",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5090,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5226,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5418,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8363,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8231,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11020,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11097,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7720,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2586992,
            "range": "± 3093",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1130447,
            "range": "± 4195",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4309,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4542,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4085,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3137,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4066,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5802,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 604,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 690099,
            "range": "± 3966",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 655263,
            "range": "± 2893",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "8b66988574f7a68d3b0d5dcd15c9203014747f9f",
          "message": "Move redeclaration errors to parser (#2027)\n\nThis Pull Request changes the following:\r\n\r\n- Implement redeclaration errors in the parser\r\n- Remove redeclaration errors from the compiler (this is a big step towards #1907)\r\n- Fix some failing tests on the way\r\n\r\nThis requires a slight change in our public api. The Parser new requires a full `Context` instead of just the `Interner` for parsing new code. This is required, because if multiple scripts are parsed (e.g. every input in the REPL) global variables must be checked for redeclarations.",
          "timestamp": "2022-04-27T16:17:02Z",
          "tree_id": "79ee763facffddd642d1f2c48af313eca338552f",
          "url": "https://github.com/boa-dev/boa/commit/8b66988574f7a68d3b0d5dcd15c9203014747f9f"
        },
        "date": 1651078217626,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 327,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4954,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16525,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19094,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10639,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11350,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12168,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7452,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9780,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9484,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11717,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14046,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16057,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 169381,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8733,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12684,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6412,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13063,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16937,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16619,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6576,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34695,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30375,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1103,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2365,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2713,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1642,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1703,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1899,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1710,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1753,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1964,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1966,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1543,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2115,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4436,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1975,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2500,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1578,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1101,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1138,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1625,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 619,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3971,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3817,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5029,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18352,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1582756,
            "range": "± 2794",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6096,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6315,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6523,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9945,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9909,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13076,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13085,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9140,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3147719,
            "range": "± 6023",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1368214,
            "range": "± 4581",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5179,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5429,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4820,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3829,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4928,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7058,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 742,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 827529,
            "range": "± 5003",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 784918,
            "range": "± 3354",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "20f72d1c39be7177a4eddc9c8099c9e85f72a9a6",
          "message": "Bump boa-dev/criterion-compare-action from 3.2.0 to 3.2.1 (#2048)\n\nBumps [boa-dev/criterion-compare-action](https://github.com/boa-dev/criterion-compare-action) from 3.2.0 to 3.2.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/boa-dev/criterion-compare-action/releases\">boa-dev/criterion-compare-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.1</h2>\n<p>This release updates the used dependencies.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/6fdd4e866a4d4539e126afc158249a7631cc842e\"><code>6fdd4e8</code></a> Updated dependencies (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/53\">#53</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/939249804c096704772d2f266a5bb215f0885de0\"><code>9392498</code></a> Bump actions/setup-node from 3.1.0 to 3.1.1 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/50\">#50</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/b09e71b3fde5f4632145ac3bf4671cc2691463bd\"><code>b09e71b</code></a> Bump <code>@​vercel/ncc</code> from 0.33.3 to 0.33.4 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/49\">#49</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/1d577e8e8b19a71d52a77d0f43078248e076e90f\"><code>1d577e8</code></a> Bump actions/setup-node from 3.0.0 to 3.1.0 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/48\">#48</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/7554e41d42509710d0e4f95b9a0938293250d058\"><code>7554e41</code></a> Escape | Symbol in User Supplied Name (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/45\">#45</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/05a29001e836f39e65c6abcca2889176eb604b26\"><code>05a2900</code></a> Bump prettier from 2.6.1 to 2.6.2 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/47\">#47</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/52b217d8bb8803f66f1b43c8b5d35c333d83e3c5\"><code>52b217d</code></a> Bump prettier from 2.6.0 to 2.6.1 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/44\">#44</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/62c6ef5127fe8f4fc91f96b805bcd7ca7fdb38e2\"><code>62c6ef5</code></a> Bump prettier from 2.5.1 to 2.6.0 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/41\">#41</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/6a0a95d50748450bf5771aced88a5fc2a049f1ca\"><code>6a0a95d</code></a> Bump <code>@​actions/exec</code> from 1.1.0 to 1.1.1 (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/42\">#42</a>)</li>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/b81c7f891169401dba77bb72f2770f5b9d4bc622\"><code>b81c7f8</code></a> Set github token as default (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/40\">#40</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/boa-dev/criterion-compare-action/compare/v3.2.0...v3.2.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=boa-dev/criterion-compare-action&package-manager=github_actions&previous-version=3.2.0&new-version=3.2.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-04-28T15:45:21Z",
          "tree_id": "5848b9ebd7f94e63643d55a27ea025815000ec8f",
          "url": "https://github.com/boa-dev/boa/commit/20f72d1c39be7177a4eddc9c8099c9e85f72a9a6"
        },
        "date": 1651162452236,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 275,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4672,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14847,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17266,
            "range": "± 429",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9728,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10412,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11198,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6856,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8965,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8684,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10707,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12828,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14545,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149620,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7999,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11451,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5916,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11717,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15084,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14799,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5911,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31355,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27580,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 938,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2004,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2311,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1403,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1420,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1658,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1394,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1402,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1628,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1629,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1260,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1852,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3797,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1606,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2046,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1298,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1022,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1072,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1425,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 514,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3426,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3235,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4114,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15329,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1312537,
            "range": "± 2169",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5009,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5187,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5347,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8146,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8170,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10966,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10975,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7588,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2620709,
            "range": "± 3654",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1137031,
            "range": "± 6767",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4349,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4526,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4043,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3179,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4107,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5904,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 625,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 694140,
            "range": "± 3102",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 661630,
            "range": "± 5320",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "7796216a1c2416f8fe0371d53ce051fe4fe3c778",
          "message": "Feature `JsFunction` (#2015)\n\nThis PR adds `JsFunction` wrapper around JavaScript `Function` object, like #1746 \r\nWith this PR we can distinguish between regular object and function object when we need, such as accessors (because they always need to be functions), predicates in `JsArray` methods like `map`, `find`, etc. With this abstraction we leverage the type system of rust which cleans the API making intentions clear.\r\n\r\nIt changes the following:\r\n- Make methods that take predicate/callback function take `JsFunction`s\r\n- Make `.accessor()` and `.static_accessor()` take `Option<JsFunction>`\r\n- Make `FunctionBuilder` return `JsFunction`\r\n- Make `ConstructorBuilder` return `JsFunction`\r\n- Make `ClassBuilder` return `JsFunction`",
          "timestamp": "2022-05-01T17:08:04Z",
          "tree_id": "a47975c0d15c4c1ae74ae56f80f8f5885920815a",
          "url": "https://github.com/boa-dev/boa/commit/7796216a1c2416f8fe0371d53ce051fe4fe3c778"
        },
        "date": 1651426681333,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 381,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5832,
            "range": "± 461",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18713,
            "range": "± 1016",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21785,
            "range": "± 1834",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12271,
            "range": "± 943",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13278,
            "range": "± 802",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14230,
            "range": "± 768",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8533,
            "range": "± 509",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11349,
            "range": "± 462",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11042,
            "range": "± 960",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13644,
            "range": "± 741",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16043,
            "range": "± 1064",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18086,
            "range": "± 2028",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 197546,
            "range": "± 18933",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9948,
            "range": "± 482",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14249,
            "range": "± 1108",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7495,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15314,
            "range": "± 1306",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19098,
            "range": "± 1205",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18750,
            "range": "± 1570",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7421,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 40168,
            "range": "± 2550",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34751,
            "range": "± 1966",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1388,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2705,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3334,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2015,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2038,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2317,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2040,
            "range": "± 148",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2056,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2358,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2330,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1884,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2588,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5013,
            "range": "± 330",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2384,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3027,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1846,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1415,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1483,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 2027,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 739,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4594,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4470,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5888,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20342,
            "range": "± 1136",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1920789,
            "range": "± 102020",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7070,
            "range": "± 461",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7328,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7495,
            "range": "± 929",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11190,
            "range": "± 762",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11390,
            "range": "± 730",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15027,
            "range": "± 1068",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15064,
            "range": "± 2011",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10695,
            "range": "± 487",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3079095,
            "range": "± 162940",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1331327,
            "range": "± 131054",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6056,
            "range": "± 294",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6194,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5745,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4553,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5718,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8075,
            "range": "± 340",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 811,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 872338,
            "range": "± 44707",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 813450,
            "range": "± 38035",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "chenxin.lan.76@gmail.com",
            "name": "兰陈昕",
            "username": "YXL76"
          },
          "committer": {
            "email": "chenxin.lan.76@gmail.com",
            "name": "兰陈昕",
            "username": "YXL76"
          },
          "distinct": false,
          "id": "5de3a7a2c47ad74af4bf6510d58c57c63b6219e8",
          "message": "Improve `JsString` performance (#2042)\n\nIt changes the following:\r\n\r\n- The current `JsString` implementation has a lot of duplicate heap allocations. For static strings, `JsString` only needs to store the index of `CONSTANTS_ARRAY`. ~~I let `JsString` can store pointer to heap or static area. The two are distinguished by the first bit. (This implementation is rough, maybe we should put flag into `Inner`, like [arcstr](https://github.com/thomcc/arcstr/blob/70ba2fac19d3efe8d2e0231daaf74f9987c04b8a/src/arc_str.rs#L751-L757))~~\r\n- I also added more string constants, which are always used.",
          "timestamp": "2022-05-01T17:18:06Z",
          "tree_id": "4c9ba433ef82e6d4e377062a3e380b6b82c3b59c",
          "url": "https://github.com/boa-dev/boa/commit/5de3a7a2c47ad74af4bf6510d58c57c63b6219e8"
        },
        "date": 1651427158365,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 261,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4148,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13139,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15348,
            "range": "± 635",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9141,
            "range": "± 402",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9802,
            "range": "± 872",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10488,
            "range": "± 444",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6250,
            "range": "± 287",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8314,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8007,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9969,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11833,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13662,
            "range": "± 490",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 140785,
            "range": "± 13032",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7341,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10307,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5226,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10698,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13719,
            "range": "± 693",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13496,
            "range": "± 412",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5332,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28176,
            "range": "± 834",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24538,
            "range": "± 2062",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1037,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1983,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2380,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1450,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1473,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1690,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1477,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1440,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1680,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1660,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1387,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1815,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3428,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1662,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2063,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1335,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1035,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1095,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1411,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 540,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3426,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3271,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4398,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 14989,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1385251,
            "range": "± 53570",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5291,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5409,
            "range": "± 247",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5525,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8404,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8397,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11271,
            "range": "± 706",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11317,
            "range": "± 380",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7936,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2221979,
            "range": "± 96245",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1073264,
            "range": "± 65726",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4472,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4655,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4388,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3347,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4248,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6033,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 540,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 603054,
            "range": "± 34959",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 568575,
            "range": "± 22006",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3ae1564111854e006005945a18183d93053984b5",
          "message": "Bump clap from 3.1.12 to 3.1.14 (#2050)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.12 to 3.1.14.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.14</h2>\n<h2>[3.1.14] - 2022-05-01</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Panic when calling <code>Command::build</code> with a required positional argument nested several layers in subcommands</li>\n</ul>\n<h2>v3.1.13</h2>\n<h2>[3.1.13] - 2022-04-30</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Help subcommand and <code>Command::write_help</code> now report required arguments in usage in more circumstances</li>\n<li>Unknown subcommand for help subcommand flag now reports an error with more context</li>\n<li>More details reported when using <code>debug</code> feature</li>\n<li>Allow disabling <code>color</code> feature with <code>debug</code> feature enabled</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.14] - 2022-05-01</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Panic when calling <code>Command::build</code> with a required positional argument nested several layers in subcommands</li>\n</ul>\n<h2>[3.1.13] - 2022-04-30</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Help subcommand and <code>Command::write_help</code> now report required arguments in usage in more circumstances</li>\n<li>Unknown subcommand for help subcommand flag now reports an error with more context</li>\n<li>More details reported when using <code>debug</code> feature</li>\n<li>Allow disabling <code>color</code> feature with <code>debug</code> feature enabled</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5e02ac1c19261d9c6693d968a8b130a6da944313\"><code>5e02ac1</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f7b00adacfb0cb33288d123c9757055066010666\"><code>f7b00ad</code></a> docs: Update chaneglog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/b37c0a1f0f88d369b9561ebad41f179c51094385\"><code>b37c0a1</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3670\">#3670</a> from epage/panic</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/0ecb6f486979bd4421660aa93410fb075929b023\"><code>0ecb6f4</code></a> fix(builder): Fully recurse when building</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/c6849e2ebd2b520fcbdd3c21ccff81a2286d48c7\"><code>c6849e2</code></a> fix(debug): Moe detail</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/3ca1b7709408f8bb3ec6b48ac2b4854aabe643b7\"><code>3ca1b77</code></a> chore: Fix manifest</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/b01256be36fb07e5bcd7174fc5f2932d255eb1e3\"><code>b01256b</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/0c5400dadb6d8a87ce0109e49c70eb61af5c6add\"><code>0c5400d</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/09d21f4005623334fb30c4d364971f9c3c17888d\"><code>09d21f4</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/bd653b90d9399c4d6f99e575594e4407d3cd8e60\"><code>bd653b9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3667\">#3667</a> from epage/exe</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.12...v3.1.14\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.12&new-version=3.1.14)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-03T03:35:20Z",
          "tree_id": "8a33844b7684160739fcf2c629c081e115e3cc8e",
          "url": "https://github.com/boa-dev/boa/commit/3ae1564111854e006005945a18183d93053984b5"
        },
        "date": 1651550956402,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 275,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4776,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15337,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17513,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9899,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10630,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11473,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7026,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9006,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8908,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10867,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12989,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14769,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 155313,
            "range": "± 631",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8115,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11586,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6056,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12029,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15375,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14942,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6306,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32047,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27969,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 918,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1958,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2280,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1401,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1399,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1621,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1396,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1374,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1614,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1600,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1273,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1771,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3785,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1601,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2003,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1250,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1037,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1063,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1446,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 506,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3380,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3230,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4164,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15333,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1353007,
            "range": "± 1417",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5107,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5230,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5414,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8392,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8440,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11389,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11349,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7879,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2533669,
            "range": "± 6833",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1121029,
            "range": "± 13393",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4305,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4547,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4077,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3230,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4167,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6015,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 636,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 668137,
            "range": "± 2842",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 635527,
            "range": "± 3428",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "85e2b10f1234224d00db0dcc219c708d2339e1fa",
          "message": "Bump test262 from `78c6ec7` to `b649e6b` (#2054)\n\nBumps [test262](https://github.com/tc39/test262) from `78c6ec7` to `b649e6b`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/b649e6b22a286ba9a891f0785f90640d7d3ecb22\"><code>b649e6b</code></a> Temporal: Port some Duration.compare tests.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/dcd25e616d1023922c3afb3fe13c792ed134f8f4\"><code>dcd25e6</code></a> Temporal: Port Demitasse tests for <code>PlainDateTime</code>'s <code>toString</code></li>\n<li><a href=\"https://github.com/tc39/test262/commit/28b31c0bf1960878abb36ab8597a0cae224a684d\"><code>28b31c0</code></a> use <code>isConstructor</code> assertion in &quot;non-constructor&quot; tests</li>\n<li><a href=\"https://github.com/tc39/test262/commit/7f2668f807d183af5759ab6f2fb1c7c806522f27\"><code>7f2668f</code></a> Temporal: Port a few tests for Duration#{add,subtract}.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/d156a5a63f2a20ef36b1da0a69e5548e9d355d18\"><code>d156a5a</code></a> Temporal: Port <code>PlainDateTime</code>'s Demitasse <code>withCalendar</code> tests</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8f5c7aed093e753649500a538ce62f8b8c035aa4\"><code>8f5c7ae</code></a> Temporal: Fix bug in PlainDateTime/prototype/toZonedDateTime/basic.js.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/576c0c0c7f1ff4949b15fb6de5953532e159875d\"><code>576c0c0</code></a> Make minimumFractionDigits = maximumFractionDigits</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8a1ec2f20bbc739362e675763ba1fd210a720f04\"><code>8a1ec2f</code></a> Test ISO strings with extended year -000000</li>\n<li><a href=\"https://github.com/tc39/test262/commit/1b71018adbe3d92c9ec9b4cb5329286072fa1567\"><code>1b71018</code></a> Temporal: <code>PlainDateTime</code>: Port Demitasse tests for bounds</li>\n<li><a href=\"https://github.com/tc39/test262/commit/cba02351f8782711e53b24d255f7f2804a01b48d\"><code>cba0235</code></a> Temporal: Port Demitasse tests for PlainDateTime toZonedDateTime</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/78c6ec7f1c9fde10f06db68b6d5ee7019aeb0f5f...b649e6b22a286ba9a891f0785f90640d7d3ecb22\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-03T04:03:15Z",
          "tree_id": "226e41ce4bf73dd47a5e8d86a70a8af0ff52faf8",
          "url": "https://github.com/boa-dev/boa/commit/85e2b10f1234224d00db0dcc219c708d2339e1fa"
        },
        "date": 1651552589174,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4536,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14500,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16796,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9548,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10229,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11014,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6703,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8796,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8583,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10553,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12454,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14027,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142970,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7768,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11128,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5781,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11538,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14811,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14551,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5778,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30561,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26804,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 928,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1924,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2273,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1372,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1391,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1615,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1359,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1368,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1591,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1584,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1262,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1763,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3648,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1617,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2017,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1284,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1020,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1062,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1418,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 518,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3355,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3196,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4197,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15551,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1327202,
            "range": "± 5299",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5143,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5308,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5463,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9425,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9442,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12228,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12240,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7871,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2664371,
            "range": "± 3393",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1158515,
            "range": "± 6655",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4378,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4564,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4106,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3242,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4200,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5944,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 640,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 677839,
            "range": "± 4190",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 644883,
            "range": "± 3833",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "8b6f3561e4e5796b08a14b759cfad4fb83476e77",
          "message": "Bump serde_json from 1.0.79 to 1.0.80 (#2051)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.79 to 1.0.80.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/585e4c5dc771d55459f2ff860bbe998660db0853\"><code>585e4c5</code></a> Release 1.0.80</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/52a9c050f5dcc0dc3de4825b131b8ff05219cc82\"><code>52a9c05</code></a> Pull miri from miri branch of dtolnay/rust-toolchain</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/aff685b8c9d20aa3773d2d4d6753e4b399768af6\"><code>aff685b</code></a> Drop unneeded quoting from env variable in workflows yaml</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/6995bbf78444af61bcd98749c538222a18d4612f\"><code>6995bbf</code></a> Update workflows to actions/checkout@v3</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/829175e6069fb16672875f125f6afdd7c6da1dec\"><code>829175e</code></a> Fix dev dependencies on serde's derive feature</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/2733e635b32fa9c10d1d8ef8c224b6aa405727d3\"><code>2733e63</code></a> Rewrap readme to 80 columns</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/c5475a32db364b6102d6e3b024912ba0eb5b3116\"><code>c5475a3</code></a> Apply readme changes from PR 864 to crate-level rustdoc</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/56cf16f90096f250912d533e75e5c1c5e1b773b4\"><code>56cf16f</code></a> Merge pull request 864 from novedevo/patch-1</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/16b68b06d601f63a5f0368b3711acbe0f0f1223e\"><code>16b68b0</code></a> Tweak grammar to improve readability</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/json/compare/v1.0.79...v1.0.80\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.79&new-version=1.0.80)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-03T11:47:30Z",
          "tree_id": "9d0134dbc0ad6bb5b063834d3507579ea3131d06",
          "url": "https://github.com/boa-dev/boa/commit/8b6f3561e4e5796b08a14b759cfad4fb83476e77"
        },
        "date": 1651580381923,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 244,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4160,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13130,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17206,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9762,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9302,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9972,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6064,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7937,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7824,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9549,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11292,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12734,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130114,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7064,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10129,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5246,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10484,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13506,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13316,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5222,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27780,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27455,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 804,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1689,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2020,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1194,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1218,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1430,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1210,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1191,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1412,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1408,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1116,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1541,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3178,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1417,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1742,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1100,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 901,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 921,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1237,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 473,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 2881,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2794,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3649,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13408,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1165927,
            "range": "± 2818",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4475,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4616,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4760,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7891,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7887,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10372,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10334,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 6802,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2237491,
            "range": "± 3438",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 982951,
            "range": "± 1945",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3828,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 3975,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3582,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2837,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3629,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5197,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 556,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 584122,
            "range": "± 2610",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 557947,
            "range": "± 2800",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "72ae29b0faa0da29690f07e3b294e005a88e3639",
          "message": "Bump serde from 1.0.136 to 1.0.137 (#2052)\n\nBumps [serde](https://github.com/serde-rs/serde) from 1.0.136 to 1.0.137.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/serde/releases\">serde's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.137</h2>\n<ul>\n<li>Update documentation links to some data formats whose repos have moved (<a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2201\">#2201</a>, thanks <a href=\"https://github.com/atouchet\"><code>@​atouchet</code></a>)</li>\n<li>Fix declared <code>rust-version</code> of serde and serde_test (<a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2168\">#2168</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/serde/commit/17c3c0cf863080477c10a52d289d8712173b0d36\"><code>17c3c0c</code></a> Release 1.0.137</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/210e6c354e22ba348b3a26c5e3ffe7978db2b306\"><code>210e6c3</code></a> Clean up clippy allows which are superseded by msrv in clippy.toml</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/41823a96df37ae62f688628a270aa570ae519bef\"><code>41823a9</code></a> Ignore more type_repetition_in_bounds</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/7ca13ff240d748f459d6439563af492a05c27046\"><code>7ca13ff</code></a> Ignore type_repetition_in_bounds lint that is incompatible with msrv</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/52391fd8683638d56fd16deaed5634ef535a54e9\"><code>52391fd</code></a> Inform clippy of supported compiler version in clippy.toml</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/9b2d8dfc6b0b2c389d6a123e3e9152e0bd4c28ea\"><code>9b2d8df</code></a> Add a miri test job in CI</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/07ba7ea8dd66fe240aff82456c01e9aeda47509c\"><code>07ba7ea</code></a> Update workflows to actions/checkout@v3</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/9f29f6bb4ad5ec7db6b1b1ad787f668bd74c104e\"><code>9f29f6b</code></a> Disable expandtest on miri</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/f6c104fd1da0a330a425c0344c1cf027f68f2b20\"><code>f6c104f</code></a> Ignore unused ignore attribute warning in some configurations</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/8a3a6fb1013e9e15bbb085091c4cc65f87d58f5a\"><code>8a3a6fb</code></a> Disable ui test on miri</li>\n<li>Additional commits viewable in <a href=\"https://github.com/serde-rs/serde/compare/v1.0.136...v1.0.137\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde&package-manager=cargo&previous-version=1.0.136&new-version=1.0.137)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-03T18:05:58Z",
          "tree_id": "4a12ab015e39fed0c2cc3c6b203a1429ff91f597",
          "url": "https://github.com/boa-dev/boa/commit/72ae29b0faa0da29690f07e3b294e005a88e3639"
        },
        "date": 1651603256073,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4671,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14750,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17009,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9635,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10447,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11187,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6805,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8920,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8704,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10811,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12667,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14477,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147059,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7986,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11439,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5899,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11793,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15262,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14962,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5881,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31250,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27559,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 932,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1897,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2255,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1409,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1402,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1634,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1387,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1389,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1607,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1600,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1273,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1758,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3640,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1610,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2015,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1256,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1015,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1059,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1420,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 535,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3308,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3160,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4314,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15653,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1323583,
            "range": "± 1310",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5156,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5309,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5486,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8953,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8967,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12015,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11991,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7993,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2502076,
            "range": "± 3036",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1123532,
            "range": "± 6061",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4461,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4676,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4146,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3240,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4174,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6051,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 649,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 669683,
            "range": "± 3317",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 625583,
            "range": "± 3128",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "dd37603faa8edaf215e67f5e36b99174b1ac4473",
          "message": "Bump num-traits from 0.2.14 to 0.2.15 (#2056)\n\nBumps [num-traits](https://github.com/rust-num/num-traits) from 0.2.14 to 0.2.15.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-num/num-traits/blob/master/RELEASES.md\">num-traits's changelog</a>.</em></p>\n<blockquote>\n<h1>Release 0.2.15 (2022-05-02)</h1>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/195\">The new <code>Euclid</code> trait calculates Euclidean division</a>, where the\nremainder is always positive or zero.</li>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/210\">The new <code>LowerBounded</code> and <code>UpperBounded</code> traits</a> separately describe\ntypes with lower and upper bounds. These traits are automatically implemented\nfor all fully-<code>Bounded</code> types.</li>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/207\">The new <code>Float::copysign</code> method copies the sign of the argument</a> to\nto the magnitude of <code>self</code>.</li>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/205\">The new <code>PrimInt::leading_ones</code> and <code>trailing_ones</code> methods</a> are the\ncomplement of the existing methods that count zero bits.</li>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/202\">The new <code>PrimInt::reverse_bits</code> method reverses the order of all bits</a>\nof a primitive integer.</li>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/201\">Improved <code>Num::from_str_radix</code> for floats</a>, also <a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/214\">ignoring case</a>.</li>\n<li><a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/pull/196\"><code>Float</code> and <code>FloatCore</code> use more from <code>libm</code></a> when that is enabled.</li>\n</ul>\n<p><strong>Contributors</strong>: <a href=\"https://github.com/alion02\"><code>@​alion02</code></a>, <a href=\"https://github.com/clarfonthey\"><code>@​clarfonthey</code></a>, <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a>, <a href=\"https://github.com/ElectronicRU\"><code>@​ElectronicRU</code></a>,\n<a href=\"https://github.com/ibraheemdev\"><code>@​ibraheemdev</code></a>, <a href=\"https://github.com/SparrowLii\"><code>@​SparrowLii</code></a>, <a href=\"https://github.com/sshilovsky\"><code>@​sshilovsky</code></a>, <a href=\"https://github.com/tspiteri\"><code>@​tspiteri</code></a>, <a href=\"https://github.com/XAMPPRocky\"><code>@​XAMPPRocky</code></a>, <a href=\"https://github.com/Xiretza\"><code>@​Xiretza</code></a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/1597c1c4d1b3e33548e4661c519b7246a5fc1c28\"><code>1597c1c</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/issues/236\">#236</a></li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/4a2e648d9325810dcaf627f743c0fc5df066a820\"><code>4a2e648</code></a> Release 0.2.15</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/edb4821d42bfd055792a72234798b76b8068fe56\"><code>edb4821</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rust-num/num-traits/issues/207\">#207</a></li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/e4e52de40fdf4fa5f2ef260a482cf51c915581c5\"><code>e4e52de</code></a> Fix copysign tests for 1.8.0</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/30077120f96ff00de46cab3c6ce693eb892c18bd\"><code>3007712</code></a> Don't use an explicit copysign feature</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/30f8d3ab4bfb590f742f592309109e00b207b23d\"><code>30f8d3a</code></a> Make sure test_copysignf uses Float</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/70b5c579ab6a001435208d8d3811407c8f07fa94\"><code>70b5c57</code></a> Update float.rs</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/cabfb0b90497ba5d908d14a908dd269f03cc5f4d\"><code>cabfb0b</code></a> Update float.rs</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/7ca2456e9c1b3f89a6bb749fc54d8a153ff51704\"><code>7ca2456</code></a> Update float.rs</li>\n<li><a href=\"https://github.com/rust-num/num-traits/commit/64db6c32936c1cd00c3074b847e10c7e6f8b20b3\"><code>64db6c3</code></a> Add copysign</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-num/num-traits/compare/num-traits-0.2.14...num-traits-0.2.15\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=num-traits&package-manager=cargo&previous-version=0.2.14&new-version=0.2.15)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-03T18:51:42Z",
          "tree_id": "c4004b1033df2054177785159f05fe3f6c1c492a",
          "url": "https://github.com/boa-dev/boa/commit/dd37603faa8edaf215e67f5e36b99174b1ac4473"
        },
        "date": 1651606075983,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 351,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5480,
            "range": "± 295",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17630,
            "range": "± 665",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20500,
            "range": "± 861",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11619,
            "range": "± 475",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12365,
            "range": "± 679",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13167,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8107,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10518,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10317,
            "range": "± 904",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13007,
            "range": "± 540",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15326,
            "range": "± 649",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17141,
            "range": "± 716",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 180164,
            "range": "± 9445",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9528,
            "range": "± 274",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14036,
            "range": "± 957",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7155,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13998,
            "range": "± 809",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17739,
            "range": "± 1514",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17607,
            "range": "± 785",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7052,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37612,
            "range": "± 2257",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 32670,
            "range": "± 1632",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1268,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2548,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3048,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1883,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1868,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2152,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1857,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1835,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2102,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2130,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1720,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2281,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4670,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2104,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2592,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1668,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1345,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1382,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1827,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 678,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4390,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4271,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5560,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19941,
            "range": "± 1023",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1835005,
            "range": "± 145588",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6657,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6867,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7098,
            "range": "± 389",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11641,
            "range": "± 612",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11777,
            "range": "± 626",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15856,
            "range": "± 791",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15776,
            "range": "± 720",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9983,
            "range": "± 597",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3033199,
            "range": "± 122966",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1292817,
            "range": "± 48190",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5783,
            "range": "± 375",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5828,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5351,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4205,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5450,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7678,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 795,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 816722,
            "range": "± 41333",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 766298,
            "range": "± 32131",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "de6c4e6f6d7a837ee89408b0cb1b4ace13fee7ef",
          "message": "Bump clap from 3.1.14 to 3.1.15 (#2057)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.14 to 3.1.15.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.15</h2>\n<h2>[3.1.15] - 2022-05-02</h2>\n<h3>Fixes</h3>\n<ul>\n<li><em>(error)</em> Render actual usage for unrecognized subcommands</li>\n<li><em>(multicall)</em> Improve bad command error</li>\n<li><em>(multicall)</em> Always require a multicall command</li>\n<li><em>(multicall)</em> Disallow arguments on multicall parent command</li>\n<li><em>(multicall)</em> More consistent with rest of clap errors</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.15] - 2022-05-02</h2>\n<h3>Fixes</h3>\n<ul>\n<li><em>(error)</em> Render actual usage for unrecognized subcommands</li>\n<li><em>(multicall)</em> Improve bad command error</li>\n<li><em>(multicall)</em> Always require a multicall command</li>\n<li><em>(multicall)</em> Disallow arguments on multicall parent command</li>\n<li><em>(multicall)</em> More consistent with rest of clap errors</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/0240ec5493fe158f88071b2988fa0a831a0b1e8d\"><code>0240ec5</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5543315d3b7b0b8fb72734cdadff40748b5acb89\"><code>5543315</code></a> docs: Update chaneglog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/d33812f8a790772c663e9806179b0623ffd52456\"><code>d33812f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3677\">#3677</a> from epage/multicall</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/af3b789e4c3211750a80f1da9cf928bb526eb08c\"><code>af3b789</code></a> fix(multicall): Consistently skip multicall bin in help</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/8cd59fa4e571a62e03b39bcada25a816ac09d2a3\"><code>8cd59fa</code></a> fix(multicall): More consistent whitespace in errors</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f9fdb99ee8b2423b12664192f98da4ea0dadeb6c\"><code>f9fdb99</code></a> fix(multicall): Disallow args on multicall binary</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ce727f1951fb4f498cc73b72e83852be182aa736\"><code>ce727f1</code></a> fix(error): Render actual usage for unrecognized subcommands</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5cd1a4070b07f250c559495f45d245d861d73ff3\"><code>5cd1a40</code></a> fix(multicall): Show subcommands are required</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/414ae57a2ac4447a9c3a30863fed44bcffe80511\"><code>414ae57</code></a> fix(multicall): Improve bad multicall binary error</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/86b0ea6ad48c8fbc01ecd64057e3fdeb64315358\"><code>86b0ea6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3675\">#3675</a> from epage/repl</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.14...v3.1.15\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.14&new-version=3.1.15)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-03T19:04:38Z",
          "tree_id": "c7e228058b0be141cb214239eb6c673b03dd828c",
          "url": "https://github.com/boa-dev/boa/commit/de6c4e6f6d7a837ee89408b0cb1b4ace13fee7ef"
        },
        "date": 1651606662148,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 248,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4068,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13103,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 14973,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8454,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9184,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 9787,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5938,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7757,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7571,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9418,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11117,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12677,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 129464,
            "range": "± 727",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6902,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9920,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5142,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10352,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13144,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 12978,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5156,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27525,
            "range": "± 207",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24277,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 800,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1667,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 1981,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1236,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1275,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1467,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1214,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1243,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1422,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1420,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1108,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1523,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3233,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1392,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1745,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1087,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 911,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 937,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1256,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 464,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3366,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 2787,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3772,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13364,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1344475,
            "range": "± 24128",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5098,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4601,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4786,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8237,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8158,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10796,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10834,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 6884,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2207047,
            "range": "± 13888",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 981090,
            "range": "± 6448",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3850,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4008,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4071,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2773,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3604,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5239,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 567,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 580702,
            "range": "± 5316",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 555523,
            "range": "± 5848",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "committer": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "distinct": false,
          "id": "d40d938d5a4935c2e174447f9f4444d74b912962",
          "message": "Implement ResolveLocale helper (#2036)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request implements ResolveLocale abstract method. It is required for further InitializeDateTimeFormat development.\r\n\r\nIt changes the following:\r\n\r\n- Adds several helpers to operate with locale extensions\r\n- Adds DefaultLocale placeholder\r\n- Implements BestAvailableLocale and locale matchers\r\n- Implements UnicodeExtensionsComponents\r\n- Introduces testing",
          "timestamp": "2022-05-04T07:16:36Z",
          "tree_id": "8b5b3f27fdbef87166c60eb0e6ff5de45a2495bc",
          "url": "https://github.com/boa-dev/boa/commit/d40d938d5a4935c2e174447f9f4444d74b912962"
        },
        "date": 1651650672601,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 274,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4687,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15120,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17558,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9776,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10565,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11383,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6897,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9006,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8768,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10868,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12762,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14744,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146982,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8034,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11692,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5975,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12125,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15797,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15372,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5959,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31822,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27976,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 966,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1993,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2370,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1466,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1462,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1765,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1502,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1454,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1741,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1735,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1367,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1861,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3695,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1690,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2070,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1332,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1020,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1051,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1502,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 511,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3436,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3235,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4369,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15482,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1386814,
            "range": "± 5116",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5339,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5482,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5681,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9481,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9423,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12610,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12524,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8041,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2659469,
            "range": "± 3820",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1157345,
            "range": "± 6700",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4558,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4766,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4264,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3369,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4360,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6204,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 625,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 679004,
            "range": "± 3780",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 636937,
            "range": "± 5695",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "bae970ff175649156495ed8dae33bcff916a6003",
          "message": "Bump serde_json from 1.0.80 to 1.0.81 (#2059)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.80 to 1.0.81.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.81</h2>\n<ul>\n<li>Work around <code>indexmap</code>/<code>autocfg</code> not always properly detecting whether a <code>std</code> sysroot crate is available (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/885\">#885</a>, thanks <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/a0ea9371cd9c163450dbdd978a64d642b0c03873\"><code>a0ea937</code></a> Release 1.0.81</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/6c3dfe948a1d088198cfa82f777858502bdb39c2\"><code>6c3dfe9</code></a> Make it clearer that preserve_order implies a std dependency</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/f34ef95fd12278fbeae0868dc99f33a608e6ee45\"><code>f34ef95</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/885\">#885</a> from cuviper/indexmap-std</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/27939bb1f99728c8b878778db8ac51b3d98f9c70\"><code>27939bb</code></a> Explicitly enable indexmap/std</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/c0f93432cc67d2ac00b081b2f06f4f5e7374955b\"><code>c0f9343</code></a> Ignore trait_duplication_in_bounds clippy false positives</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/048a64caec40e5a962f6919354fb7b6a8f0d34fd\"><code>048a64c</code></a> Resolve type_repetition_in_bounds clippy lint</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/json/compare/v1.0.80...v1.0.81\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.80&new-version=1.0.81)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-04T17:12:46Z",
          "tree_id": "edd9292102712c79eca42aa0f1c4e4b5c604df0b",
          "url": "https://github.com/boa-dev/boa/commit/bae970ff175649156495ed8dae33bcff916a6003"
        },
        "date": 1651686667344,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 288,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4177,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13189,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15287,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8705,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9312,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10043,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6073,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7930,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7781,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9570,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11353,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12873,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 130328,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7161,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10238,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5310,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10579,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 13526,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13358,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5215,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 27943,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24467,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 829,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1701,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2035,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1250,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1267,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1434,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1230,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1233,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1651,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1446,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1284,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1776,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3689,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1621,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1815,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1142,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 919,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 951,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1263,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 477,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3386,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3274,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4327,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15843,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1384896,
            "range": "± 2690",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5259,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5384,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5534,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8453,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8398,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12357,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10914,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7038,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2252811,
            "range": "± 6082",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 995044,
            "range": "± 9568",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3993,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4122,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3707,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2923,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3740,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5292,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 563,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 591839,
            "range": "± 4684",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 644155,
            "range": "± 6383",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "404670b69eeb0a0cccc2b2c393655c504a7950db",
          "message": "Bump serde_yaml from 0.8.23 to 0.8.24 (#2060)\n\nBumps [serde_yaml](https://github.com/dtolnay/serde-yaml) from 0.8.23 to 0.8.24.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/dtolnay/serde-yaml/releases\">serde_yaml's releases</a>.</em></p>\n<blockquote>\n<h2>0.8.24</h2>\n<ul>\n<li>Work around <code>indexmap</code>/<code>autocfg</code> not always properly detecting whether a <code>std</code> sysroot crate is available (<a href=\"https://github-redirect.dependabot.com/dtolnay/serde-yaml/issues/243\">#243</a>, thanks <a href=\"https://github.com/cuviper\"><code>@​cuviper</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/915d0134019cca544db86e8a4e8f13bdeacb80e8\"><code>915d013</code></a> Release 0.8.24</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/74211ec8c7d147383694e51944233365e6106ba2\"><code>74211ec</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/serde-yaml/issues/243\">#243</a> from cuviper/indexmap-std</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/80bd0a494e05e9c0b48bc1953099993ae48ea80e\"><code>80bd0a4</code></a> Explicitly enable indexmap/std</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/748976003e153969fd8a209f77ba7f2d907eebdd\"><code>7489760</code></a> Resolve type_repetition_in_bounds clippy lint</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/85baedfebb4f0d95eff57697857b5350f0fe9f1d\"><code>85baedf</code></a> Add a miri test job in CI</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/8040788ac14750ab9f4e958173ccb361c385ca71\"><code>8040788</code></a> Drop unneeded quoting from env variable in workflows yaml</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/13306e044de9fe2587420dc510273be59ea80169\"><code>13306e0</code></a> Update workflows to actions/checkout@v3</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/8155852f3b9bd17526cbd7422c0faac3d4a52a28\"><code>8155852</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/serde-yaml/issues/239\">#239</a> from uta8a/fix-readme-example</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/45affad0cef7061ac57bc751acc2814bd8fab15d\"><code>45affad</code></a> Fix README example</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/a14e026560881764e828681ec6397e8bcde1e77a\"><code>a14e026</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/serde-yaml/issues/237\">#237</a> from dtolnay/description</li>\n<li>Additional commits viewable in <a href=\"https://github.com/dtolnay/serde-yaml/compare/0.8.23...0.8.24\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_yaml&package-manager=cargo&previous-version=0.8.23&new-version=0.8.24)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-04T19:50:45Z",
          "tree_id": "faaebb185d63b580e52dc66f191f43652530b6a6",
          "url": "https://github.com/boa-dev/boa/commit/404670b69eeb0a0cccc2b2c393655c504a7950db"
        },
        "date": 1651696063722,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 277,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4724,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14781,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17258,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9828,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10560,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11385,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6835,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8900,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8728,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10721,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12721,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14427,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145299,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8107,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11553,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5986,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11909,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15334,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15103,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5854,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31060,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27365,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 946,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1910,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2286,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1375,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1412,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1595,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1389,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1381,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1626,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1595,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1264,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1736,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3612,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1617,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2018,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1261,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1024,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1060,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1415,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 530,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3331,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3188,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4231,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15419,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1323927,
            "range": "± 1539",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5149,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5221,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5349,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9336,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9397,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12252,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12227,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7733,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2495803,
            "range": "± 3328",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1111640,
            "range": "± 7242",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4377,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4535,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4077,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3208,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4134,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5866,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 648,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 657655,
            "range": "± 3610",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 625129,
            "range": "± 3562",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "0e49ce863bf1e8e4c584c842cfc74d20ee0f87a1",
          "message": "Bump webpack-dev-server from 4.8.1 to 4.9.0 (#2061)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.8.1 to 4.9.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.9.0</h2>\n<h2><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.8.1...v4.9.0\">4.9.0</a> (2022-05-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>support Trusted Types for client overlay (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4404\">#4404</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8132e1d029badab7b1e836f8f240844c2d843ecc\">8132e1d</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>ie11 runtime (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4403\">#4403</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/256d5fb5fea7ee5a6683f77ea347ac79816ad639\">256d5fb</a>)</li>\n<li>replace portfinder with custom implementation and fix security problem (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4384\">#4384</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/eea50f342e3090483f6da4932b84ed52bba44c58\">eea50f3</a>)</li>\n<li>use the host in options to check if port is available (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4385\">#4385</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/a10c7cfd290d29384d14405d7cf79e105c7b5d15\">a10c7cf</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.8.1...v4.9.0\">4.9.0</a> (2022-05-04)</h2>\n<h3>Features</h3>\n<ul>\n<li>support Trusted Types for client overlay (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4404\">#4404</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8132e1d029badab7b1e836f8f240844c2d843ecc\">8132e1d</a>)</li>\n</ul>\n<h3>Bug Fixes</h3>\n<ul>\n<li>ie11 runtime (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4403\">#4403</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/256d5fb5fea7ee5a6683f77ea347ac79816ad639\">256d5fb</a>)</li>\n<li>replace portfinder with custom implementation and fix security problem (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4384\">#4384</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/eea50f342e3090483f6da4932b84ed52bba44c58\">eea50f3</a>)</li>\n<li>use the host in options to check if port is available (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4385\">#4385</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/a10c7cfd290d29384d14405d7cf79e105c7b5d15\">a10c7cf</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/4340c73fbc3cfcada3cfa3efd1c87895f9135659\"><code>4340c73</code></a> chore(release): 4.9.0</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/2b386fb671f2ad45ef9ee49fd66be090a338dac9\"><code>2b386fb</code></a> test: update (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4427\">#4427</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/925370ec6cf6649416168bd4879df66a3cef0dc3\"><code>925370e</code></a> chore(deps-dev): bump marked from 4.0.14 to 4.0.15 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4426\">#4426</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/8132e1d029badab7b1e836f8f240844c2d843ecc\"><code>8132e1d</code></a> feat: support Trusted Types for client overlay (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4404\">#4404</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/79536ab657ffe06587b1c774bbb6093bae85f1c1\"><code>79536ab</code></a> chore(deps-dev): bump core-js from 3.22.3 to 3.22.4 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4425\">#4425</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/c2fee3b585307017c66b322afd78220e6b6c835a\"><code>c2fee3b</code></a> chore(deps-dev): bump <code>@​babel/preset-env</code> from 7.16.11 to 7.17.10 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4422\">#4422</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/a6a367a4ce2a48ab0bd61bbe5e799b5f816be1e1\"><code>a6a367a</code></a> chore(deps-dev): bump <code>@​babel/plugin-transform-runtime</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4423\">#4423</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/710f2e265297afd7bd3cdffbb844f7eca10a028e\"><code>710f2e2</code></a> chore: bump <code>@​commitlint/config-conventional</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4411\">#4411</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e42d691de99d87f9b97802ad1808a0d7fcb854b1\"><code>e42d691</code></a> chore(deps): bump ws from 8.5.0 to 8.6.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4418\">#4418</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/401493d9b00020040ede3cef30a38d39b567b7bb\"><code>401493d</code></a> chore(deps): bump express from 4.18.0 to 4.18.1 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4419\">#4419</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.8.1...v4.9.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.8.1&new-version=4.9.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-05T14:47:59Z",
          "tree_id": "66311772fd2542fe8f32d58925d7bed8034f25cf",
          "url": "https://github.com/boa-dev/boa/commit/0e49ce863bf1e8e4c584c842cfc74d20ee0f87a1"
        },
        "date": 1651764116168,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 279,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4197,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13751,
            "range": "± 622",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16039,
            "range": "± 744",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8821,
            "range": "± 398",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9607,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11697,
            "range": "± 514",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6955,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8830,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8178,
            "range": "± 429",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10209,
            "range": "± 597",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12154,
            "range": "± 595",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13868,
            "range": "± 586",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143378,
            "range": "± 6029",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7762,
            "range": "± 621",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11005,
            "range": "± 432",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5710,
            "range": "± 475",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12719,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15824,
            "range": "± 616",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15325,
            "range": "± 558",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5885,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 30795,
            "range": "± 1874",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 26129,
            "range": "± 1384",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 940,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1896,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2208,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1402,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1510,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1676,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1401,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1364,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1606,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1602,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1268,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1689,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3762,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1611,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2020,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1509,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1082,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1000,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1501,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 541,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3373,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3202,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4217,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15370,
            "range": "± 731",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1367613,
            "range": "± 108359",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5173,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5302,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5749,
            "range": "± 308",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10568,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10871,
            "range": "± 341",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13822,
            "range": "± 2796",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13599,
            "range": "± 513",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8906,
            "range": "± 280",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2693838,
            "range": "± 112900",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1170853,
            "range": "± 48794",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5239,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5404,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4808,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3403,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4453,
            "range": "± 315",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6480,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 646,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 669707,
            "range": "± 32852",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 655754,
            "range": "± 37251",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a813846df02ecf1a39ad9a8ebf7e1408fa72aaff",
          "message": "Bump clap from 3.1.15 to 3.1.16 (#2062)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.15 to 3.1.16.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.16</h2>\n<h2>[3.1.16] - 2022-05-06</h2>\n<h3>Fixes</h3>\n<ul>\n<li><em>(parser)</em> <code>Arg::exclusive</code> overrides <code>Arg::required</code>, like other conflicts</li>\n<li><em>(error)</em> Don't duplicate arguments in usage</li>\n<li><em>(error)</em> Don't show hidden arguments in conflict error usage</li>\n<li><em>(help)</em> New <code>help_template</code> variable <code>{name}</code> to fix problems with <code>{bin}</code></li>\n<li><em>(help)</em> Don't wrap URLs</li>\n</ul>\n<p><strong>gated behind <code>unstable-v4</code></strong></p>\n<ul>\n<li>Leading dashes in <code>Arg::long</code> are no longer allowed</li>\n<li><em>(help)</em> Use <code>Command::display_name</code> in the help title rather than <code>Command::bin_name</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.16] - 2022-05-06</h2>\n<h3>Fixes</h3>\n<ul>\n<li><em>(parser)</em> <code>Arg::exclusive</code> overrides <code>Arg::required</code>, like other conflicts</li>\n<li><em>(error)</em> Don't duplicate arguments in usage</li>\n<li><em>(error)</em> Don't show hidden arguments in conflict error usage</li>\n<li><em>(help)</em> New <code>help_template</code> variable <code>{name}</code> to fix problems with <code>{bin}</code></li>\n<li><em>(help)</em> Don't wrap URLs</li>\n</ul>\n<p><strong>gated behind <code>unstable-v4</code></strong></p>\n<ul>\n<li>Leading dashes in <code>Arg::long</code> are no longer allowed</li>\n<li><em>(help)</em> Use <code>Command::display_name</code> in the help title rather than <code>Command::bin_name</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/17b930c203758be8855a00cef04bdde310343836\"><code>17b930c</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/e74864994a11098170a5200be130695459de5a50\"><code>e748649</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/0e1e9525c8828b5d6e743fae2035b78103cdfeb1\"><code>0e1e952</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3696\">#3696</a> from epage/usage</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/05aecf82488bfeb13bd0a88070db45cc325b1cec\"><code>05aecf8</code></a> refactor(help): Remove more redundant required checks</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/dcda237eccf456f86b1772010c459b5fe87a639a\"><code>dcda237</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3689\">#3689</a> from epage/usage</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/e23c786f62d6ecbf5ca6f966fa782d3412db8134\"><code>e23c786</code></a> refactor(help): Remove redundant required check</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f7c2deaa476e74f801bb080fc9de018cec8f43a2\"><code>f7c2dea</code></a> fix(help): Don't show hidden arguments for conflicts</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/2375a8ec2a59dbef6233847be0dc489d992496d2\"><code>2375a8e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3693\">#3693</a> from epage/template</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/e4c096ea99c0835710f6f4998ce6d43b50fe0f05\"><code>e4c096e</code></a> fix(help): Use display name instead of bin name (unstable-v4)</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/16791ab0a7e6ee4b463a2638c15c22c2998fb428\"><code>16791ab</code></a> test(help): Update for display name change</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.15...v3.1.16\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.15&new-version=3.1.16)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-07T11:03:57Z",
          "tree_id": "becdb88e419860b7d25d43677e3b8a122016fef8",
          "url": "https://github.com/boa-dev/boa/commit/a813846df02ecf1a39ad9a8ebf7e1408fa72aaff"
        },
        "date": 1651923649822,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 287,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4207,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13399,
            "range": "± 865",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15675,
            "range": "± 718",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8814,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9422,
            "range": "± 406",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10217,
            "range": "± 456",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6074,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8003,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8246,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10105,
            "range": "± 904",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11466,
            "range": "± 487",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 12903,
            "range": "± 316",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 136822,
            "range": "± 7094",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7221,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10368,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5372,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10840,
            "range": "± 569",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14513,
            "range": "± 679",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13618,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5426,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28656,
            "range": "± 1088",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25107,
            "range": "± 1127",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1042,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1955,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2453,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1492,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1519,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1701,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1486,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1491,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1678,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1695,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1391,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1833,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3510,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1652,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2086,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1394,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1057,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1091,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1444,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 596,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3442,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3307,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4476,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15277,
            "range": "± 580",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1499030,
            "range": "± 55534",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5312,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5544,
            "range": "± 236",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5525,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9124,
            "range": "± 373",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9082,
            "range": "± 397",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12327,
            "range": "± 397",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12651,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7939,
            "range": "± 377",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2224043,
            "range": "± 68879",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 982140,
            "range": "± 78931",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4515,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4682,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4392,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3257,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4401,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6046,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 538,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 624293,
            "range": "± 25880",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 570664,
            "range": "± 14622",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "9d06b222faef17c18ca6419a62b5117201ff92f2",
          "message": "Bump test262 from `b649e6b` to `2e7cdfb` (#2066)\n\nBumps [test262](https://github.com/tc39/test262) from `b649e6b` to `2e7cdfb`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/2e7cdfbe18eae4309677033673bb4b5ac6b1de40\"><code>2e7cdfb</code></a> Fix generator clean fail on .DS_Store</li>\n<li><a href=\"https://github.com/tc39/test262/commit/d6b5b1358cfe76fc50d377d00d85ae1c29b27d14\"><code>d6b5b13</code></a> ShadowRealm: exportName is no longer be coerced to a string</li>\n<li><a href=\"https://github.com/tc39/test262/commit/b4098436124cbb4ff2b24fd64291f53131fe16e3\"><code>b409843</code></a> Update S12.6.4_A7_T2.js</li>\n<li><a href=\"https://github.com/tc39/test262/commit/00263bf90f80fd096506e4a92335833555c0fddc\"><code>00263bf</code></a> add missing Reflect.construct feature</li>\n<li><a href=\"https://github.com/tc39/test262/commit/2a03068b8470474863ecc17b4f7bbc2a3f753d88\"><code>2a03068</code></a> Fix Temporal.PlainDateTime.withPlainDate tests</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0a480293334c34a34f2cae012ddb4dfbd94e5782\"><code>0a48029</code></a> Fix Intl.NumberFormat roundingPriority test to reflect default values for min...</li>\n<li><a href=\"https://github.com/tc39/test262/commit/997888324e42013578eb935c2a18a2027ecb8c81\"><code>9978883</code></a> Add missing binding</li>\n<li><a href=\"https://github.com/tc39/test262/commit/a44a97a09a908cf40f6d578f36a875b9104fb4f1\"><code>a44a97a</code></a> Add reference ISO days to PlainYearMonth assertions</li>\n<li><a href=\"https://github.com/tc39/test262/commit/06fafd794bdb0d9cfbac99eb8f72b06d0f2c27fd\"><code>06fafd7</code></a> Move testing of era/eraYear under intl402 (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3517\">#3517</a>)</li>\n<li><a href=\"https://github.com/tc39/test262/commit/28455b13f5e9a39ca8f280b1724299c5471ab833\"><code>28455b1</code></a> Intl.DurationFormat update coverage (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3501\">#3501</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/b649e6b22a286ba9a891f0785f90640d7d3ecb22...2e7cdfbe18eae4309677033673bb4b5ac6b1de40\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-09T15:00:32Z",
          "tree_id": "911535e8bce9ca0136ef47049b5e72bf6a04040e",
          "url": "https://github.com/boa-dev/boa/commit/9d06b222faef17c18ca6419a62b5117201ff92f2"
        },
        "date": 1652110326623,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 329,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4514,
            "range": "± 251",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15425,
            "range": "± 681",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17467,
            "range": "± 1059",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9710,
            "range": "± 493",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10251,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12288,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7418,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9676,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9471,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11990,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14120,
            "range": "± 315",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15894,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 164351,
            "range": "± 2111",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8728,
            "range": "± 407",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11499,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5724,
            "range": "± 276",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12436,
            "range": "± 462",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16717,
            "range": "± 741",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16004,
            "range": "± 461",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6426,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34113,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29178,
            "range": "± 605",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1075,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2206,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2474,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1581,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1725,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1948,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1676,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1666,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1944,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1925,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1536,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2089,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4474,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1865,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2255,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1376,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1048,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1085,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1510,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 600,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3716,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3601,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4622,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17477,
            "range": "± 603",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1584728,
            "range": "± 7428",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6104,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6280,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6487,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11148,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11147,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14823,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14763,
            "range": "± 412",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9294,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3029830,
            "range": "± 67358",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1213647,
            "range": "± 53345",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4729,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5166,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4794,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3864,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4778,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7070,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 726,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 744537,
            "range": "± 24432",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 685010,
            "range": "± 31045",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "e9c4814dcb0f95e3cd28c656e754f1739ef10aa8",
          "message": "Bump clap from 3.1.16 to 3.1.17 (#2065)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.16 to 3.1.17.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.17</h2>\n<h2>[3.1.17] - 2022-05-06</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Allow value names for <code>arg!</code> macro to have dashes when quoted, like longs</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.17] - 2022-05-06</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Allow value names for <code>arg!</code> macro to have dashes when quoted, like longs</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/55e791e80ed4167cb11d968546aabb96f6760029\"><code>55e791e</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ed0c01993c218b18408ab9f2fbae9bc6f7d575fa\"><code>ed0c019</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/229b44d9bb78c816910e167452d6de614f6c5c1e\"><code>229b44d</code></a> fix(macros): Allow dashed values (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3699\">#3699</a>)</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/95698a4f31a8fb7a0a7b227fccc6445bc41fb7d7\"><code>95698a4</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/3984e55363fa32898a0eb78dca903a67d68ba80d\"><code>3984e55</code></a> docs(complete): Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/1a1a842aa0184b87f1f2eb27fe51fb99ef965299\"><code>1a1a842</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3698\">#3698</a> from epage/value</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/b266e6d35d9f8f097ded7e5ede4d42776409dbde\"><code>b266e6d</code></a> fix(complete): Complete visible, rather than hidden, values</li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.16...v3.1.17\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.16&new-version=3.1.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-09T15:10:39Z",
          "tree_id": "35b1f865c22ca3bd3b6761cb5a3af6e3fcef4b9f",
          "url": "https://github.com/boa-dev/boa/commit/e9c4814dcb0f95e3cd28c656e754f1739ef10aa8"
        },
        "date": 1652111286124,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 347,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5531,
            "range": "± 402",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17417,
            "range": "± 717",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20576,
            "range": "± 1713",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11353,
            "range": "± 543",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12525,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13089,
            "range": "± 674",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7896,
            "range": "± 323",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10461,
            "range": "± 386",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10787,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12936,
            "range": "± 784",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15205,
            "range": "± 942",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17119,
            "range": "± 489",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 163671,
            "range": "± 9283",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9201,
            "range": "± 463",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13077,
            "range": "± 539",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6919,
            "range": "± 473",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12664,
            "range": "± 638",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15921,
            "range": "± 1163",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16993,
            "range": "± 1465",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6772,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37208,
            "range": "± 2680",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31268,
            "range": "± 1486",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1241,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2475,
            "range": "± 213",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3035,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1693,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1752,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1945,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1567,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1588,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1844,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1814,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1481,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2142,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3961,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1868,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2474,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1481,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1202,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1243,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1706,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 633,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4318,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3773,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5026,
            "range": "± 307",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17301,
            "range": "± 796",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1739677,
            "range": "± 56302",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6710,
            "range": "± 267",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6320,
            "range": "± 297",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6875,
            "range": "± 334",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11479,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10939,
            "range": "± 564",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14224,
            "range": "± 510",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15133,
            "range": "± 912",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9909,
            "range": "± 380",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2629868,
            "range": "± 132294",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1164114,
            "range": "± 51812",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5698,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5719,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5032,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3861,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5106,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7770,
            "range": "± 541",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 664,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 784680,
            "range": "± 27741",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 725306,
            "range": "± 24631",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "e42e2f64be12de33b4fae27536059383557a6b50",
          "message": "Refactor `IdentifierReference` parsing (#2055)\n\nThis Pull Request changes the following:\r\n\r\n- Crate dedicated `IdentifierReference` parser and refactor `PrimaryExpression` and `PropertyDefinition` parsers to use it.\r\n- Move `BindingIdentifier` and `LabelIdentifier` parsers from statement parser module to expression parser module to conform with the spec.\r\n- Add and early error case while converting an `ObjectLiteral` to an `ObjectAssignmentPattern`",
          "timestamp": "2022-05-09T15:24:27Z",
          "tree_id": "62fe5c6091b634eda0080ff9bd89ec4b3b34d0b0",
          "url": "https://github.com/boa-dev/boa/commit/e42e2f64be12de33b4fae27536059383557a6b50"
        },
        "date": 1652111907696,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 277,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4198,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14954,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17526,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9741,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10513,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11359,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6854,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8998,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8813,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10843,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12748,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14654,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149630,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8014,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11506,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5934,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12008,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15484,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15248,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6066,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31920,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28030,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 937,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1678,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2260,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1406,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1421,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1637,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1198,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1201,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1410,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1576,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1284,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1770,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3793,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1577,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1985,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1257,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1020,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1057,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1409,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 531,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3342,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3191,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4137,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15070,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1316455,
            "range": "± 1160",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5072,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5171,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5345,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8788,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8777,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11494,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11418,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7682,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2235116,
            "range": "± 2485",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1124111,
            "range": "± 7148",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4338,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4522,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4064,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3256,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4137,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5991,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 639,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 669489,
            "range": "± 3687",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 637218,
            "range": "± 2906",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "8721a3167b520681446a6132e5d181c1265ae2e7",
          "message": "Implement the global `eval()` function (#2041)\n\nThis Pull Request fixes/closes #948.\r\n\r\nIt changes the following:\r\n\r\n- Implement the global `eval()` function.\r\n\r\nRuntime code evaluation brings some challenges for environments. Currently the setting and getting of variable bindings is done via indices that are calculated at compile time. This prevents costly hashmap lookups at runtime.\r\nEvaluiation at runtime needs access to existing compile time environments. This is a relatively easy change. We wrap compile time environments in `Gc` and make them accessible at runtime.\r\n\r\nBecause `eval()` can add var bindings to existing function environments, we have to adjust the environments for this. Because we cannot recompile all previously stored binding indices, we have to fallback to hashmap lookups at runtime. To prevent this from tanking our performance we add a flag to each environment that marks if any `eval()` has been executed in that environment (or outer environments). This makes it possible to retain the performance of precompiled environment lookups while having a fallback for `eval()`.\r\n\r\nTLDR: `eval()` is not only horribly unsafe but also a burden for performance. [Never use eval()!](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!)",
          "timestamp": "2022-05-09T19:09:44Z",
          "tree_id": "f8df7cc2b22803aaa19b668714613c2312d1cf2f",
          "url": "https://github.com/boa-dev/boa/commit/8721a3167b520681446a6132e5d181c1265ae2e7"
        },
        "date": 1652125165880,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 280,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4711,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14838,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17110,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 8463,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10385,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11180,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6782,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8896,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8628,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10781,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12607,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14582,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146611,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7980,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11444,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5966,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11901,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15316,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15023,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6003,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31822,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27668,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1152,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2611,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2722,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1635,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1663,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1864,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1594,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1609,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1872,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1826,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1491,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2334,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3996,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1832,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2296,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1528,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1101,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1170,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1524,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 549,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4841,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4323,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4206,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16055,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1352113,
            "range": "± 2913",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5082,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5246,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5438,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9487,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9452,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12335,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12345,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7782,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2670371,
            "range": "± 3504",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1148430,
            "range": "± 15455",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4424,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4573,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4109,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3339,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4205,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5924,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 651,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 692634,
            "range": "± 5054",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 649238,
            "range": "± 4040",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "27db65798337ef77bd4f1bb6fe8f41ab6e9c978d",
          "message": "Bump webpack from 5.72.0 to 5.72.1 (#2070)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.72.0 to 5.72.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.72.1</h2>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix <code>__webpack_nonce__</code> with HMR</li>\n<li>fix <code>in</code> operator in some cases</li>\n<li>fix json parsing error messages</li>\n<li>fix module concatenation with using <code>this.importModule</code></li>\n<li>upgrade enhanced-resolve</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/08ecfbbc035b12f2ed5c0b83b53011dfe57ae7c9\"><code>08ecfbb</code></a> 5.72.1</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/ada9c0b3a1908dd3c83a072193d991c9e59731c1\"><code>ada9c0b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15802\">#15802</a> from webpack/fix-nonce</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/ce56e3b61c1489c21fd8e935f3301eafd503b967\"><code>ce56e3b</code></a> add NonceRuntimeModule</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/3ad4fcac25a976277f2d9cceb37bc81602e96b13\"><code>3ad4fca</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15689\">#15689</a> from webpack/fix-inmemory-cache</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/ccf8bf53e25ba6a063a7f4387551f45bed389c9b\"><code>ccf8bf5</code></a> add comments to infrastructure-log</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/293e677b355da0d5bc4ddfc97d2afec114912711\"><code>293e677</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15660\">#15660</a> from webpack/add-provided-info-tests</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/0456807b72d914a507361d183c87380f740b40e1\"><code>0456807</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15673\">#15673</a> from Semigradsky/replace-dependency</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/0791f77b0489790199b8c6476527279a577e2997\"><code>0791f77</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15678\">#15678</a> from webpack/remove-infrastructure-log</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/390dd0620926074f976d5bd3bd20901ec89b4b1b\"><code>390dd06</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15681\">#15681</a> from webpack/fix-concatenation-with-import-module</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/0d408d1c7ffa4488b72019a41542a0a1562c78a4\"><code>0d408d1</code></a> fix modules concatenation with importModule usage</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.72.0...v5.72.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.72.0&new-version=5.72.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-11T19:21:45Z",
          "tree_id": "62979b5301044d23cdf1c3858c8b8479615ddeb5",
          "url": "https://github.com/boa-dev/boa/commit/27db65798337ef77bd4f1bb6fe8f41ab6e9c978d"
        },
        "date": 1652298814602,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 278,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4716,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14826,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17158,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9661,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10394,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11203,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6846,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8949,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8714,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10800,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12680,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14487,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146383,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8033,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11487,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5949,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11917,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15357,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15137,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6044,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31567,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27806,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1140,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2642,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2787,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1644,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1686,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1896,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1621,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1610,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1811,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1846,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1486,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2282,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3998,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1874,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2262,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1526,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1123,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1187,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1538,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 551,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4778,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4204,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4158,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16019,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1343469,
            "range": "± 2770",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5032,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5185,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5361,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9513,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9511,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12261,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12291,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7766,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2673584,
            "range": "± 9014",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1151015,
            "range": "± 5715",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4325,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4530,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4067,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3268,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4158,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5988,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 641,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 686006,
            "range": "± 2823",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 647536,
            "range": "± 4531",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "9d89e120c318fe0c5ac622f99833e590af2a9e53",
          "message": "Bump clap from 3.1.17 to 3.1.18 (#2071)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.1.17 to 3.1.18.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.1.18</h2>\n<h2>[3.1.18] - 2022-05-10</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Fix deprecated <code>arg_enum!</code> for users migrating to clap3 (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3717\">#3717</a>)</li>\n<li>Verify all <code>required_unless_present_all</code> arguments exist</li>\n<li>Verify group members exist before processing group members (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3711\">#3711</a>)</li>\n<li><em>(help)</em> Use <code>...</code> when not enough <code>value_names</code> are supplied</li>\n</ul>\n<p><strong>gated behind <code>unstable-v4</code></strong></p>\n<ul>\n<li>Verify <code>required</code> is not used with conditional required settings (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3660\">#3660</a>)</li>\n<li>Disallow more <code>value_names</code> than <code>number_of_values</code> (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/2695\">#2695</a>)</li>\n<li><em>(parser)</em> Assert on unknown args when using external subcommands (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3703\">#3703</a>)</li>\n<li><em>(parser)</em> Always fill in <code>&quot;&quot;</code> argument for external subcommands (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3263\">#3263</a>)</li>\n<li><em>(derive)</em> Detect escaped external subcommands that look like built-in subcommands (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3703\">#3703</a>)</li>\n<li><em>(derive)</em> Leave <code>Arg::id</code> as <code>verbatim</code> casing (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3282\">#3282</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.1.18] - 2022-05-10</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Fix deprecated <code>arg_enum!</code> for users migrating to clap3 (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3717\">#3717</a>)</li>\n<li>Verify all <code>required_unless_present_all</code> arguments exist</li>\n<li>Verify group members exist before processing group members (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3711\">#3711</a>)</li>\n<li><em>(help)</em> Use <code>...</code> when not enough <code>value_names</code> are supplied</li>\n</ul>\n<p><strong>gated behind <code>unstable-v4</code></strong></p>\n<ul>\n<li>Verify <code>required</code> is not used with conditional required settings (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3660\">#3660</a>)</li>\n<li>Disallow more <code>value_names</code> than <code>number_of_values</code> (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/2695\">#2695</a>)</li>\n<li><em>(parser)</em> Assert on unknown args when using external subcommands (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3703\">#3703</a>)</li>\n<li><em>(parser)</em> Always fill in <code>&quot;&quot;</code> argument for external subcommands (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3263\">#3263</a>)</li>\n<li><em>(derive)</em> Detect escaped external subcommands that look like built-in subcommands (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3703\">#3703</a>)</li>\n<li><em>(derive)</em> Leave <code>Arg::id</code> as <code>verbatim</code> casing (<a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3282\">#3282</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/524e36cf1a67ee6a447d3615a70b065d2b4f5e60\"><code>524e36c</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6635237037b0a53011d9d9b74d18158386c02922\"><code>6635237</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/20d95d2b8cd3af53f08da5aa32734f9c109d4c88\"><code>20d95d2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3718\">#3718</a> from epage/arg_enum</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/52f6939044acf84bc3a2fada1d0b6b6a15f581f4\"><code>52f6939</code></a> fix(macros): Add needed call for arg_enum</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/9713cd9ae420c885f793a79d9a4aeb65efbf0e40\"><code>9713cd9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3712\">#3712</a> from epage/assert</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/7c1f9123a4c48893824fa86eb3b47c98e9b0ca21\"><code>7c1f912</code></a> fix(assert): Make sure group members exist before using them</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/a57a4119a11c1825f533ae5fae97d26c0f8c3b16\"><code>a57a411</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3708\">#3708</a> from epage/rename_sub</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/2e3540355ac3c2d641e76a913c64af5cf78c3f3f\"><code>2e35403</code></a> fix(derive): Don't change case of Arg id's (unstable)</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f7e4dd23d6e11249346f2c6447722251a9e149c6\"><code>f7e4dd2</code></a> refactor(derive): Divide rename_all assertions</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ddc9d54f4191467da869b925c6bc027b3f398b60\"><code>ddc9d54</code></a> refactor(derive): Generalize test name</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.1.17...v3.1.18\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.1.17&new-version=3.1.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-11T19:33:24Z",
          "tree_id": "3d502732ca1083b5125c8728efbe35e9477670fa",
          "url": "https://github.com/boa-dev/boa/commit/9d89e120c318fe0c5ac622f99833e590af2a9e53"
        },
        "date": 1652300149162,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 336,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4903,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16328,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18937,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10456,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11270,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12005,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7350,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9677,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9291,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11620,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13493,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15884,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165390,
            "range": "± 2020",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8508,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12571,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6323,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13201,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17160,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16901,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6637,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34653,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29537,
            "range": "± 797",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1351,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3090,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3163,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1977,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1993,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2234,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1904,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1925,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2193,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2100,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1750,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2680,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4615,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2188,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2755,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1808,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1212,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1246,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1683,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 658,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5581,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4981,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4994,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18804,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1594679,
            "range": "± 18088",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6034,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6183,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6436,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11254,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11167,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14422,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14389,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9241,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3084386,
            "range": "± 70989",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1350935,
            "range": "± 21728",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5124,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5380,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4872,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3855,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4990,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7002,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 761,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 821254,
            "range": "± 9376",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 773219,
            "range": "± 9976",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "committer": {
            "email": "norbert.garfield@yahoo.com",
            "name": "NorbertGarfield",
            "username": "NorbertGarfield"
          },
          "distinct": false,
          "id": "5a0ff9116b42cf39c5e336d5c5a2f226f781e03d",
          "message": "DateTimeFormat helpers (#2064)\n\nThis Pull Request adds several helpers to resolve #1562.\r\n\r\nIt adds the following subroutines:\r\n\r\n- toDateTimeOptions\r\n- GetOption\r\n- GetNumberOption\r\n- DefaultNumberOption",
          "timestamp": "2022-05-13T23:27:39Z",
          "tree_id": "5b65ec7738b423f17c91dcce2b736139b3174fe7",
          "url": "https://github.com/boa-dev/boa/commit/5a0ff9116b42cf39c5e336d5c5a2f226f781e03d"
        },
        "date": 1652486180166,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 281,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4725,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14799,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17200,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9621,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10379,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11064,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6787,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8908,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8696,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10747,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12651,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14509,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146039,
            "range": "± 315",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7947,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11451,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5902,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11868,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15325,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14966,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5971,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31495,
            "range": "± 468",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27588,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1137,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2628,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2711,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1657,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1683,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1885,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1623,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1627,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1859,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1825,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1487,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2289,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4055,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1854,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2319,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1535,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1116,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1160,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1547,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 548,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4725,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4272,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4207,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16363,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1342079,
            "range": "± 8084",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5091,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5244,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5415,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9562,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9580,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12269,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12227,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7778,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2674160,
            "range": "± 4331",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1149993,
            "range": "± 5763",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4382,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4575,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4097,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3255,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4204,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5969,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 659,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 683075,
            "range": "± 3473",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 644126,
            "range": "± 3591",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f90f5479efec61b93b487300b9613429a4d192d6",
          "message": "Bump rayon from 1.5.2 to 1.5.3 (#2073)\n\nBumps [rayon](https://github.com/rayon-rs/rayon) from 1.5.2 to 1.5.3.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rayon-rs/rayon/blob/master/RELEASES.md\">rayon's changelog</a>.</em></p>\n<blockquote>\n<h1>Release rayon 1.5.3 (2022-05-13)</h1>\n<ul>\n<li>The new <code>ParallelSliceMut::par_sort_by_cached_key</code> is a stable sort that caches\nthe keys for each item -- a parallel version of <code>slice::sort_by_cached_key</code>.</li>\n</ul>\n<h1>Release rayon-core 1.9.3 (2022-05-13)</h1>\n<ul>\n<li>Fixed a use-after-free race in job notification.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/5b6adbbf5c6944ec42b54530820ee8c0ad0e35a9\"><code>5b6adbb</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rayon-rs/rayon/issues/936\">#936</a></li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/d0cf4d34f75cc14ecd101af9ac9c900b6cacd1be\"><code>d0cf4d3</code></a> Release rayon 1.5.3</li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/137be380f56c0e4369e36bb4e732207b578646c1\"><code>137be38</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rayon-rs/rayon/issues/932\">#932</a></li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/19bf11504b5c8cca0685c4bd07a836288ed4ef38\"><code>19bf115</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rayon-rs/rayon/issues/934\">#934</a></li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/9801de729348d521e4e35665e93c9fa1b8582f14\"><code>9801de7</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rayon-rs/rayon/issues/933\">#933</a></li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/a86656615b21a043f76ac1f26ede429697c81103\"><code>a866566</code></a> Merge <a href=\"https://github-redirect.dependabot.com/rayon-rs/rayon/issues/935\">#935</a></li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/36bd58aa3d6aeae1be648dd3fe7904aa3ebd7d74\"><code>36bd58a</code></a> Convert delegate doctest to unit tests</li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/c2a0c516cc1922b779d94f9b6a389141b14549e6\"><code>c2a0c51</code></a> Release rayon-core 1.9.3</li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/d1a0a60380f595881035fd09db211e319eaa65e1\"><code>d1a0a60</code></a> Be more explicit with Arc::clone</li>\n<li><a href=\"https://github.com/rayon-rs/rayon/commit/baa405727f9f01d7d201c5ade9b8f090a6cc867e\"><code>baa4057</code></a> Capture &amp;Registry in SpinLatch::set, not &amp;Arc&lt;Registry&gt;</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rayon-rs/rayon/compare/v1.5.2...v1.5.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rayon&package-manager=cargo&previous-version=1.5.2&new-version=1.5.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-16T18:01:59Z",
          "tree_id": "c4091bc233b0a35230e635ec9532cd0d457ae2bf",
          "url": "https://github.com/boa-dev/boa/commit/f90f5479efec61b93b487300b9613429a4d192d6"
        },
        "date": 1652726253194,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 275,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4683,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15036,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17105,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9757,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10537,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11186,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6882,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8970,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8722,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10762,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12700,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14623,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148007,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8088,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11598,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6017,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11867,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15162,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14901,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5978,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31577,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27579,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1131,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2633,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2728,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1617,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1648,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1869,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1616,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1614,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1892,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1891,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1484,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2305,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3979,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1843,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2321,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1526,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1090,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1155,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1519,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 541,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4759,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4196,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4234,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16252,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1332638,
            "range": "± 2419",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5082,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5221,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5405,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9290,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9305,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12120,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12133,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7791,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2555744,
            "range": "± 4561",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1113306,
            "range": "± 4435",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4350,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4556,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4099,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3343,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4314,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5944,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 652,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 683425,
            "range": "± 4366",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 641377,
            "range": "± 3185",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "51da655f41c53cb8e7069073c9ed01d634811007",
          "message": "Bump test262 from `2e7cdfb` to `509363b` (#2074)\n\nBumps [test262](https://github.com/tc39/test262) from `2e7cdfb` to `509363b`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/509363bcfd24b3476dc106eabc0ac856ed5eb51d\"><code>509363b</code></a> Add test on handling broken promises in AsyncGenerator.prototype.return (<a href=\"https://github-redirect.dependabot.com/tc39/test262/issues/3472\">#3472</a>)</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/2e7cdfbe18eae4309677033673bb4b5ac6b1de40...509363bcfd24b3476dc106eabc0ac856ed5eb51d\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-16T18:16:08Z",
          "tree_id": "b4e8e8a7099d856a2df0bcb5509c30d6fddde1af",
          "url": "https://github.com/boa-dev/boa/commit/51da655f41c53cb8e7069073c9ed01d634811007"
        },
        "date": 1652726862520,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 333,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4816,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16154,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18280,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10542,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11309,
            "range": "± 293",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11968,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7174,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9484,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9252,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11382,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13090,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15368,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 163034,
            "range": "± 5986",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8328,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11904,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5943,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12469,
            "range": "± 357",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16096,
            "range": "± 615",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15990,
            "range": "± 427",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6431,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33913,
            "range": "± 1313",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29299,
            "range": "± 1190",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1305,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2975,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3115,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1898,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1964,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2235,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1895,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1928,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2200,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2112,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1776,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2718,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4570,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2145,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2787,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1795,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1180,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1186,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1621,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 649,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5658,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4880,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4924,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18929,
            "range": "± 455",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1543874,
            "range": "± 34934",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5969,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6077,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6280,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10248,
            "range": "± 473",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10291,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13966,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13279,
            "range": "± 545",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8884,
            "range": "± 347",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2828988,
            "range": "± 111505",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1291993,
            "range": "± 40371",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4958,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5413,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4784,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3773,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4816,
            "range": "± 224",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6744,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 734,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 787274,
            "range": "± 22161",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 750366,
            "range": "± 19731",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "f3db18fc5468576d2c6df31b259890c1d43d3607",
          "message": "Bump copy-webpack-plugin from 10.2.4 to 11.0.0 (#2077)\n\nBumps [copy-webpack-plugin](https://github.com/webpack-contrib/copy-webpack-plugin) from 10.2.4 to 11.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/releases\">copy-webpack-plugin's releases</a>.</em></p>\n<blockquote>\n<h2>v11.0.0</h2>\n<h2><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.4...v11.0.0\">11.0.0</a> (2022-05-17)</h2>\n<h3>⚠ BREAKING CHANGES</h3>\n<ul>\n<li>minimum supported <code>Node.js</code> version is <code>14.15.0</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/blob/master/CHANGELOG.md\">copy-webpack-plugin's changelog</a>.</em></p>\n<blockquote>\n<h2><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.4...v11.0.0\">11.0.0</a> (2022-05-17)</h2>\n<h3>⚠ BREAKING CHANGES</h3>\n<ul>\n<li>minimum supported <code>Node.js</code> version is <code>14.15.0</code></li>\n</ul>\n<h3>build</h3>\n<ul>\n<li>drop node v12 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/691\">#691</a>) (<a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/675c676d96ed24975f75e5344d47c351a9d5e53a\">675c676</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/f3b2c2419cb519d697a8c42a9c073a8c228a8a0b\"><code>f3b2c24</code></a> chore(release): 11.0.0</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/8424ca82c11782f38d5125d9fa4e2d66b910ade6\"><code>8424ca8</code></a> chore(deps): regenerate lock file (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/693\">#693</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/675c676d96ed24975f75e5344d47c351a9d5e53a\"><code>675c676</code></a> build: drop node v12 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/691\">#691</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/a2b1f199e8445ab45193d1f638209dc4fe6907ca\"><code>a2b1f19</code></a> chore: update gitub actions (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/692\">#692</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/238c062ffee93d9281383ca103bb3684f33aed52\"><code>238c062</code></a> chore: upgrade dependencies to the latest version (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/688\">#688</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/e27006edc3d339d1c1b4af60f0e4dc3d08ccb47d\"><code>e27006e</code></a> ci: remove node v17 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/687\">#687</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/e50d708535360e229694c35ce5452a7c124d18ce\"><code>e50d708</code></a> chore: add node 18 to workflow (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/686\">#686</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/f1a91e6c1a94fd3b0358db7c1f7ee6786163168f\"><code>f1a91e6</code></a> ci: don't  install webpack again (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/680\">#680</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/64cf06f13954951ddb7e6e9c33490b2aa4ad9fdf\"><code>64cf06f</code></a> docs: add path string to options signature (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/copy-webpack-plugin/issues/683\">#683</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/commit/4b18a6be394d39c0a997cde4adcc234abc469bb9\"><code>4b18a6b</code></a> docs: improve readme</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack-contrib/copy-webpack-plugin/compare/v10.2.4...v11.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=copy-webpack-plugin&package-manager=npm_and_yarn&previous-version=10.2.4&new-version=11.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-18T23:54:58Z",
          "tree_id": "2f630e1453ab7980c899a3ee2e4c06c7565a470f",
          "url": "https://github.com/boa-dev/boa/commit/f3db18fc5468576d2c6df31b259890c1d43d3607"
        },
        "date": 1652919839053,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 277,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4742,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15015,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17126,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9800,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10560,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11245,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6897,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9030,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8790,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10805,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12787,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14516,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147851,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7988,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11540,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5979,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11841,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15229,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15025,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5988,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31615,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27566,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1132,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2601,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2741,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1645,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1649,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1867,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1614,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1613,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1902,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1855,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1467,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2297,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3935,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1812,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2275,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1510,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1076,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1149,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1515,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 562,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4720,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4212,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4184,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16248,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1343745,
            "range": "± 3029",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5085,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5229,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5370,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9251,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9254,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11992,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12163,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7840,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2556525,
            "range": "± 11862",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1120496,
            "range": "± 3654",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4372,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4568,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4100,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3234,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4181,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5896,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 639,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 680506,
            "range": "± 3637",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 643159,
            "range": "± 4100",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "456da4949a2f98802eafcf7a8ea662ea641f9dd1",
          "message": "Fixing build for changes in clippy for Rust 1.61 (#2082)\n\nThis fixes the CI after the upgrade to Rust 1.61. I had to \"allow\" the `use_self` lint, due to https://github.com/rust-lang/rust-clippy/issues/8845 and https://github.com/rust-lang/rust-clippy/issues/6902.\r\n\r\nIt removed some false negatives, though, so I fixed some of the usage.",
          "timestamp": "2022-05-20T21:41:26Z",
          "tree_id": "03752e21be7d136966d9bd5f58068e6f8a033e00",
          "url": "https://github.com/boa-dev/boa/commit/456da4949a2f98802eafcf7a8ea662ea641f9dd1"
        },
        "date": 1653085277413,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 351,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5847,
            "range": "± 391",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18752,
            "range": "± 995",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21879,
            "range": "± 1691",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12529,
            "range": "± 538",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13677,
            "range": "± 721",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14261,
            "range": "± 849",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8452,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11107,
            "range": "± 673",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10966,
            "range": "± 682",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13340,
            "range": "± 823",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16080,
            "range": "± 893",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18188,
            "range": "± 1086",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 196782,
            "range": "± 8323",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10200,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 15315,
            "range": "± 996",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7926,
            "range": "± 832",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15063,
            "range": "± 808",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 20290,
            "range": "± 2599",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18947,
            "range": "± 1172",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 8473,
            "range": "± 788",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 41773,
            "range": "± 3453",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 36694,
            "range": "± 4039",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1585,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3566,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3720,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2214,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2262,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2425,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2245,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2170,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2481,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2418,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 2047,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3086,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5211,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2367,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3038,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 2064,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1388,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1471,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1941,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 719,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6259,
            "range": "± 416",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5682,
            "range": "± 363",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5876,
            "range": "± 280",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21173,
            "range": "± 1017",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1896227,
            "range": "± 141525",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6917,
            "range": "± 855",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7198,
            "range": "± 345",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7416,
            "range": "± 511",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11657,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11986,
            "range": "± 809",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15513,
            "range": "± 924",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15654,
            "range": "± 839",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10810,
            "range": "± 600",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3043694,
            "range": "± 139909",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1275256,
            "range": "± 61266",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5951,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6134,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5632,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4244,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5643,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8510,
            "range": "± 496",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 774,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 850123,
            "range": "± 38656",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 784946,
            "range": "± 44154",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "fcf456e5ded032841e9c89255ef820070e3120e1",
          "message": "Bump once_cell from 1.10.0 to 1.11.0 (#2081)\n\nBumps [once_cell](https://github.com/matklad/once_cell) from 1.10.0 to 1.11.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/matklad/once_cell/blob/master/CHANGELOG.md\">once_cell's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>Unreleased</h2>\n<ul>\n<li></li>\n</ul>\n<h2>1.11</h2>\n<ul>\n<li>Add <code>OnceCell::with_value</code> to create initialized <code>OnceCell</code> in <code>const</code> context.</li>\n<li>Improve <code>Clone</code> implementation for <code>OnceCell</code>.</li>\n<li>Rewrite <code>parking_lot</code> version on top of <code>parking_lot_core</code>, for even smaller cells!</li>\n</ul>\n<h2>1.10</h2>\n<ul>\n<li>upgrade <code>parking_lot</code> to <code>0.12.0</code> (note that this bumps MSRV with <code>parking_lot</code> feature enabled to <code>1.49.0</code>).</li>\n</ul>\n<h2>1.9</h2>\n<ul>\n<li>Added an <code>atomic-polyfill</code> optional dependency to compile <code>race</code> on platforms without atomics</li>\n</ul>\n<h2>1.8.0</h2>\n<ul>\n<li>Add <code>try_insert</code> API -- a version of <code>set</code> that returns a reference.</li>\n</ul>\n<h2>1.7.2</h2>\n<ul>\n<li>Improve code size when using parking_lot feature.</li>\n</ul>\n<h2>1.7.1</h2>\n<ul>\n<li>Fix <code>race::OnceBox&lt;T&gt;</code> to also impl <code>Default</code> even if <code>T</code> doesn't impl <code>Default</code>.</li>\n</ul>\n<h2>1.7.0</h2>\n<ul>\n<li>Hide the <code>race</code> module behind (default) <code>race</code> feature.\nTurns out that adding <code>race</code> by default was a breaking change on some platforms without atomics.\nIn this release, we make the module opt-out.\nTechnically, this is a breaking change for those who use <code>race</code> with <code>no_default_features</code>.\nGiven that the <code>race</code> module itself only several days old, the breakage is deemed acceptable.</li>\n</ul>\n<h2>1.6.0</h2>\n<ul>\n<li>Add <code>Lazy::into_value</code></li>\n<li>Stabilize <code>once_cell::race</code> module for &quot;first one wins&quot; no_std-compatible initialization flavor.</li>\n<li>Migrate from deprecated <code>compare_and_swap</code> to <code>compare_exchange</code>.</li>\n</ul>\n<h2>1.5.2</h2>\n<ul>\n<li><code>OnceBox</code> API uses <code>Box&lt;T&gt;</code>.\nThis a breaking change to unstable API.</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/matklad/once_cell/commit/12f283fd8dff990bc1b6fe4b7bf2e2e348aa8b86\"><code>12f283f</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/178\">#178</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/443d23c74fb379da14e05ca2d96f39b49eed079b\"><code>443d23c</code></a> readability</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/39a47e32d3ce22c42392e9fedf9b0646255a74d4\"><code>39a47e3</code></a> release 1.11.0</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/5386606ec4a8f9dcfa1124f7a7b9c23a049529be\"><code>5386606</code></a> fix deadlock</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/0067580881b0bedf860dd27f5e087c273198b0eb\"><code>0067580</code></a> use exchange_weak</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/662fcf9784b9f54af9b2b904bba1f3ad675cc79d\"><code>662fcf9</code></a> replace parking_lot with parking_lot_core</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/b57c77415b1146859402dcb905850fe9f44b7bb6\"><code>b57c774</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/175\">#175</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/580fb726679a7d3b233c631f4cc05725596ccf27\"><code>580fb72</code></a> Note that Acquire/Release is necessary in OnceBox</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/7d45ce0a1e9f73b33a3ad7464724b6f38db90a1f\"><code>7d45ce0</code></a> Explain the atomic orderings used in race</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/090caea92f21ecba71b743c1c636f3fe9d14b598\"><code>090caea</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/170\">#170</a></li>\n<li>Additional commits viewable in <a href=\"https://github.com/matklad/once_cell/compare/v1.10.0...v1.11.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=once_cell&package-manager=cargo&previous-version=1.10.0&new-version=1.11.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-20T22:57:49Z",
          "tree_id": "1c9973198a9df0af4eda535ec43a0208901b2932",
          "url": "https://github.com/boa-dev/boa/commit/fcf456e5ded032841e9c89255ef820070e3120e1"
        },
        "date": 1653091135891,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 347,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 6111,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 20223,
            "range": "± 763",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 22614,
            "range": "± 914",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12834,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13694,
            "range": "± 414",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14807,
            "range": "± 402",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8814,
            "range": "± 248",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11836,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11463,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14163,
            "range": "± 908",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16900,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19683,
            "range": "± 1394",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 216808,
            "range": "± 6318",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10589,
            "range": "± 364",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 15334,
            "range": "± 653",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7923,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15434,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19780,
            "range": "± 880",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 19469,
            "range": "± 581",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7909,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 42560,
            "range": "± 1425",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 37231,
            "range": "± 970",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1581,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3575,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3631,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2219,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2249,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2474,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2219,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2222,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2496,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2491,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 2063,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3103,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5103,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2442,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3030,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 2093,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1374,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1465,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1916,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 696,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6495,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5644,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5852,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21348,
            "range": "± 686",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1977822,
            "range": "± 85650",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7142,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7249,
            "range": "± 207",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7586,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12065,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11977,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16163,
            "range": "± 982",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16222,
            "range": "± 683",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10926,
            "range": "± 1044",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3024132,
            "range": "± 117390",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1345205,
            "range": "± 23949",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6090,
            "range": "± 363",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6315,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5770,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4313,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5682,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8335,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 794,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 896335,
            "range": "± 32347",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 823113,
            "range": "± 48075",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "29330225efe78e9afbec0e66191917425de84974",
          "message": "Create `Date` standard constructor (#2079)\n\nApparently we didn't have a `Date` intrinsic constructor, we were setting the prototype of all `Date` objects to the `Object` prototype.",
          "timestamp": "2022-05-21T00:55:57Z",
          "tree_id": "31ecb3fce5df47c7539ac8f9df0b1ef0f64e5871",
          "url": "https://github.com/boa-dev/boa/commit/29330225efe78e9afbec0e66191917425de84974"
        },
        "date": 1653096358492,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 306,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 6362,
            "range": "± 620",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18155,
            "range": "± 1593",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20253,
            "range": "± 1574",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11710,
            "range": "± 852",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13574,
            "range": "± 1215",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13657,
            "range": "± 1170",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8013,
            "range": "± 647",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10809,
            "range": "± 646",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10680,
            "range": "± 1059",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12672,
            "range": "± 990",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15084,
            "range": "± 1129",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17577,
            "range": "± 1403",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 189544,
            "range": "± 12609",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9413,
            "range": "± 692",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14397,
            "range": "± 1024",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6879,
            "range": "± 490",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14266,
            "range": "± 1028",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18931,
            "range": "± 1735",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 19532,
            "range": "± 1668",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7349,
            "range": "± 576",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 38877,
            "range": "± 2811",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 40103,
            "range": "± 3466",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1467,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3232,
            "range": "± 206",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3377,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2047,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2062,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2271,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2032,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2031,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2264,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2255,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1853,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2843,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4801,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2352,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2806,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1930,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1323,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1348,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1721,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 652,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6684,
            "range": "± 484",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5122,
            "range": "± 399",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5334,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18884,
            "range": "± 1038",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1909811,
            "range": "± 99483",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6518,
            "range": "± 424",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6651,
            "range": "± 466",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6868,
            "range": "± 481",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12027,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11040,
            "range": "± 728",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14252,
            "range": "± 875",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14428,
            "range": "± 964",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10572,
            "range": "± 884",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2799539,
            "range": "± 198098",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1205806,
            "range": "± 81901",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5626,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6249,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5155,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3968,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5264,
            "range": "± 539",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8563,
            "range": "± 594",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 687,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 781407,
            "range": "± 56365",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 712109,
            "range": "± 46504",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "406c6420415065d2981ffafdd2378c07eea9e673",
          "message": "Implement `ProxyBuilder` (#2076)\n\nThis Pull Request fixes/closes #2075.\r\n\r\nIt changes the following:\r\n\r\n- Implements a `ProxyBuilder` struct to be able to create `Proxy` objects from native function traps.\r\n- Documents `ProxyBuilder` and adjusts some documentation.\r\n- Fixes a clippy lint.",
          "timestamp": "2022-05-21T01:04:30Z",
          "tree_id": "9e5fd21503f0d954eafa01adc6e1bdfefe642e77",
          "url": "https://github.com/boa-dev/boa/commit/406c6420415065d2981ffafdd2378c07eea9e673"
        },
        "date": 1653097015208,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 363,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 6014,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19766,
            "range": "± 794",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 22733,
            "range": "± 710",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12668,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13628,
            "range": "± 882",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14764,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8871,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11747,
            "range": "± 624",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11587,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14105,
            "range": "± 1068",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16762,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19315,
            "range": "± 1042",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 202034,
            "range": "± 9426",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10371,
            "range": "± 434",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14950,
            "range": "± 1023",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7779,
            "range": "± 320",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15295,
            "range": "± 598",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19265,
            "range": "± 793",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 19214,
            "range": "± 763",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7670,
            "range": "± 423",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 42106,
            "range": "± 1372",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 36569,
            "range": "± 918",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1536,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3545,
            "range": "± 1528",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3708,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2174,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2253,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2529,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2196,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2279,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2484,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2478,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 2031,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3108,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5097,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2479,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3132,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 2092,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1385,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1484,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1929,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 691,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6403,
            "range": "± 356",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5604,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6024,
            "range": "± 218",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21383,
            "range": "± 965",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1905976,
            "range": "± 53157",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7265,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7459,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7626,
            "range": "± 548",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12374,
            "range": "± 629",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12156,
            "range": "± 585",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16271,
            "range": "± 636",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16250,
            "range": "± 2089",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 11050,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3185793,
            "range": "± 131355",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1409359,
            "range": "± 35133",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6102,
            "range": "± 432",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6383,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5811,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4363,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5668,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8432,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 809,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 909563,
            "range": "± 35436",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 832921,
            "range": "± 88215",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "ace28e51f4b73da7a8d951c4ae31568c82a5c095",
          "message": "Update icu requirement from 0.5.0 to 0.6.0 in /boa_engine (#2078)\n\nUpdates the requirements on [icu](https://github.com/unicode-org/icu4x) to permit the latest version.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/unicode-org/icu4x/releases\">icu's releases</a>.</em></p>\n<blockquote>\n<h2>ICU4X 0.5.0 (January 31, 2022)</h2>\n<p>ICU4X 0.5.0 is our major winter release.  Key changes:</p>\n<ol>\n<li>Major improvements to the <code>datetime</code> component, including support for non-gregorian calendars, week-of-year, and eras</li>\n<li>Lots of improvements to the <code>properties</code> component, including support for <code>Canonical_Combining_Class</code>, <code>Script_Extensions</code>, <code>Grapheme_Cluster_Break</code>, <code>Word_Break</code>, <code>Sentence_Break</code>.</li>\n<li>Improvements to our data infrastructure crates <code>yoke</code> and <code>zerovec</code></li>\n</ol>\n<p>There are also bug fixes and feature improvements in other components including <code>LocaleCanonicalizer</code>.  For more details, see the <a href=\"https://github.com/unicode-org/icu4x/blob/main/CHANGELOG.md#icu4x-050-jan-31-2022\">changelog</a>.</p>\n<p>We hope to continue bringing early adopters onboard as we eye a stable 1.0 release in the first half of 2022.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/unicode-org/icu4x/blob/main/CHANGELOG.md\">icu's changelog</a>.</em></p>\n<blockquote>\n<h2>icu4x 0.5.0 (Jan 31, 2022)</h2>\n<ul>\n<li>General data model\n<ul>\n<li><code>DataPayload</code> no longer needs a lifetime (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1297\">#1297</a>, <a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1279\">#1279</a>)</li>\n<li>Re-write ResourceKey (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1511\">#1511</a>)</li>\n<li>Rewrite ErasedDataProvider as AnyProvider (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1495\">#1495</a>)</li>\n<li>Add EitherProvider and rename IterableDataProviderCore to IterableProvider (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1455\">#1455</a>)</li>\n<li>Change DataRequest to be borrowed in BufferProvider (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1416\">#1416</a>)</li>\n<li>Replace SerdeDeDataProvider with BufferProvider (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1369\">#1369</a>, <a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1384\">#1384</a>)</li>\n</ul>\n</li>\n<li>Components\n<ul>\n<li><code>calendar</code>:\n<ul>\n<li>Julian, Japanese, and Buddhist calendars (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1351\">#1351</a>, <a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1394\">#1394</a>, <a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1305\">#1305</a>)</li>\n<li><code>DateTimeFormat</code> integration (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1339\">#1339</a>)</li>\n<li>Bugfix around arithmetic (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1352\">#1352</a>)</li>\n</ul>\n</li>\n<li><code>datetime</code>:\n<ul>\n<li>Week-of-year support (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1206\">#1206</a>)</li>\n<li><code>DateTimeFormat::resolve_components()</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1362\">#1362</a>)</li>\n<li>Era formatting (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1346\">#1346</a>)</li>\n<li><code>TimeZoneFormatConfig</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1256\">#1256</a>)</li>\n<li>New data model for organizing calendar data (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1300\">#1300</a>)</li>\n<li>Bugfix around missing localized strings in time zone data (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1405\">#1405</a>)</li>\n</ul>\n</li>\n<li><code>decimal</code>: No updates</li>\n<li><code>locale_canonicalizer</code>:\n<ul>\n<li>Bugfix in maximization (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1171\">#1171</a>)</li>\n<li>Update data model to use <code>LiteMap</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1275\">#1275</a>)</li>\n</ul>\n</li>\n<li><code>locid</code>: No updates</li>\n<li><code>plurals</code>:\n<ul>\n<li>Update data model to use <code>ZeroVec</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1240\">#1240</a>)</li>\n</ul>\n</li>\n<li><code>properties</code>:\n<ul>\n<li>Rename resource key category for properties (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1406\">#1406</a>)</li>\n<li>Rename enums for <code>General_Category</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1355\">#1355</a>)</li>\n<li>Implement the <code>Canonical_Combining_Class</code> property (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1347\">#1347</a>)</li>\n<li>Implement <code>Script_Extensions</code> property (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1353\">#1353</a>)</li>\n<li>Add <code>General_Category</code> predicate functions (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1310\">#1310</a>)</li>\n<li>Implement <code>Grapheme_Cluster_Break</code>, <code>Word_Break</code>, and <code>Sentence_Break</code> Unicode properties (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1233\">#1233</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Utilities\n<ul>\n<li><code>codepointtrie</code>: No changes</li>\n<li><code>deduplicating_array</code>: New utility for efficient serialized representation of data with duplicates</li>\n<li><code>fixed_decimal</code>:\n<ul>\n<li>Padding and truncation APIs (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1482\">#1482</a>, <a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1507\">#1507</a>, <a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1195\">#1195</a>)</li>\n<li>Add double-to-decimal via ryū (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1217\">#1217</a>)</li>\n<li>Handle exponents in <code>FixedDecimal::from_str()</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1265\">#1265</a>)</li>\n</ul>\n</li>\n<li><code>litemap</code>:\n<ul>\n<li>Add <code>LiteMap::get_indexed()</code> and <code>LiteMap::find_index()</code></li>\n<li>Handle serialization of tuples (etc) in litemaps (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1306\">#1306</a>)</li>\n</ul>\n</li>\n<li><code>pattern</code>: No updates</li>\n<li><code>uniset</code>: No updates</li>\n<li><code>writeable</code>:\n<ul>\n<li>Adding parts functionality to <code>Writeable</code> (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1438\">#1438</a>)</li>\n<li>Change <code>Writeable::writeable_to_string</code> to return a Cow (<a href=\"https://github-redirect.dependabot.com/unicode-org/icu4x/issues/1452\">#1452</a>)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/unicode-org/icu4x/compare/icu@0.5.0...icu@0.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>\n\nCo-authored-by: jedel1043 <jedel0124@gmail.com>",
          "timestamp": "2022-05-21T01:26:05Z",
          "tree_id": "eecabe0938efa1ba24ef77d441de51a7529d5acf",
          "url": "https://github.com/boa-dev/boa/commit/ace28e51f4b73da7a8d951c4ae31568c82a5c095"
        },
        "date": 1653098679979,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5290,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17165,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19468,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11181,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12010,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12972,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7690,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10157,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9781,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12138,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14537,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16863,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 169514,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9204,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13185,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6985,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13161,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16888,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16800,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6617,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35974,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31517,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1184,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2889,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3031,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1737,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1768,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2066,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1716,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1708,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1967,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1985,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1571,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2517,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4218,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1926,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2430,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1625,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1106,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1158,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1561,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 519,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5211,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4593,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4511,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16960,
            "range": "± 215",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1484540,
            "range": "± 6571",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5486,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5701,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5838,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9771,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9784,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12808,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12870,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9079,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2541195,
            "range": "± 4294",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1157023,
            "range": "± 3695",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4910,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5057,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4597,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3678,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4703,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6808,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 531,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 766875,
            "range": "± 4129",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 717860,
            "range": "± 6474",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "45dd2d416cfd6209a76fc65c0a0126c128342f0e",
          "message": "Remove `strict` flag from `Context` (#2069)\n\nThe `Context` currently contains a `strict` flag that indicates is global strict mode is active. This is redundant to the strict flag that is set on every function and causes some non spec compliant situations. This pull request removes the strict flag from `Context` and fixes some resulting errors.\r\n\r\nDetailed changes:\r\n\r\n- Remove strict flag from `Context`\r\n- Make 262 tester compliant with the strict section in [test262/INTERPRETING.md](https://github.com/tc39/test262/blob/2e7cdfbe18eae4309677033673bb4b5ac6b1de40/INTERPRETING.md#strict-mode)\r\n- Make 262 tester compliant with the `raw` flag in [test262/INTERPRETING.md](https://github.com/tc39/test262/blob/2e7cdfbe18eae4309677033673bb4b5ac6b1de40/INTERPRETING.md#flags)\r\n- Allow function declarations in strict mode\r\n- Fix parser flag propagation for classes\r\n- Move some early errors from the lexer to the parser\r\n- Add / fix some early errors for 'arguments' and 'eval' identifier usage in strict mode\r\n- Refactor `ArrayLiteral` parser for readability and correct early errors",
          "timestamp": "2022-05-21T23:39:20Z",
          "tree_id": "0bcd3d2e0791abcceea977fa30db330eb0d40277",
          "url": "https://github.com/boa-dev/boa/commit/45dd2d416cfd6209a76fc65c0a0126c128342f0e"
        },
        "date": 1653178131484,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 271,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5335,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17216,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19376,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11149,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11843,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12944,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7703,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10130,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9797,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12199,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14215,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16598,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 158372,
            "range": "± 408",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9212,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13261,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6968,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13319,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16928,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16728,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6550,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35765,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31393,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1185,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2887,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3007,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1762,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1775,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2025,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1712,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1708,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1922,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1946,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1527,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2489,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4000,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1929,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2443,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1599,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1115,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1195,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1575,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 540,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5183,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4610,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4647,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17237,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1501490,
            "range": "± 6103",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5481,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5692,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5853,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9868,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9846,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12949,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12949,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9254,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2539603,
            "range": "± 8907",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1168171,
            "range": "± 6296",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4889,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5063,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4513,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3606,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4647,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6815,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 536,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 773180,
            "range": "± 10157",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 720742,
            "range": "± 15462",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "c36fda5da10f5cddfa011577379f10d87e90cf4d",
          "message": "Bump test262 from `509363b` to `7fca663` (#2084)\n\nBumps [test262](https://github.com/tc39/test262) from `509363b` to `7fca663`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/7fca6637e984b54c5665ea93ebf79d2b8bfe3e8c\"><code>7fca663</code></a> Temporal: Extend toJSON/toString tests.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/2de2fe3084756781ae5f0caccaac0aec14529b4b\"><code>2de2fe3</code></a> Temporal: Ensure PlainTime branding tests fail if needed.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/7960d616cf9fe0ff4681aeb6ee3ee07e42d89cc1\"><code>7960d61</code></a> Temporal: Add a test for PlainTime#toZonedDateTime.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/a1a5c9154358853318ac19ec190fc2af424865b7\"><code>a1a5c91</code></a> Temporal: Add a test for PlainTime#calendar.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/b8ab7063b013dba8d93267e3340bb68295a2c0d4\"><code>b8ab706</code></a> Temporal: Add tests for PlainTime#{toJSON/toString}.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/912559f683236999ec40a27e711d556a64a61441\"><code>912559f</code></a> Temporal: Test @<a href=\"https://github.com/toStringTag\"><code>@​toStringTag</code></a> properties.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/494b678cc59b37c6fe3d2f0f0db6e6cb1b420f25\"><code>494b678</code></a> Temporal: Add tests for ZonedDateTime to PlainDate conversion.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/6f8e0f67cad29a92a23ed7b596a9be8d7ba34644\"><code>6f8e0f6</code></a> Decorators: add initial tests on class</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/509363bcfd24b3476dc106eabc0ac856ed5eb51d...7fca6637e984b54c5665ea93ebf79d2b8bfe3e8c\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-23T20:22:17Z",
          "tree_id": "f37c7145e3b949ef641c779821f8ced4c3dbbcbc",
          "url": "https://github.com/boa-dev/boa/commit/c36fda5da10f5cddfa011577379f10d87e90cf4d"
        },
        "date": 1653339122464,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 268,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5383,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17114,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19309,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11130,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11878,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12919,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7824,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10091,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9804,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12160,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14196,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16583,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 158082,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9184,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13205,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6909,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13289,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16988,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16713,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6549,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35806,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31443,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1209,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2893,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2962,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1735,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1753,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2027,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1709,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1691,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1932,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1947,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1534,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2516,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4016,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1914,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2459,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1613,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1115,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1185,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1564,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 537,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5240,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4531,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4600,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17203,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1497614,
            "range": "± 6507",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5485,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5663,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5904,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9910,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9936,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12986,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13013,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9302,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2537598,
            "range": "± 3639",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1189889,
            "range": "± 4485",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4792,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5115,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4522,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3583,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4605,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6783,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 532,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 784672,
            "range": "± 4730",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 732784,
            "range": "± 10380",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3b75c45dd66cf7505e6f653fad0feb4a6d663cb9",
          "message": "Bump jemallocator from 0.3.2 to 0.5.0 (#2088)\n\nBumps [jemallocator](https://github.com/tikv/jemallocator) from 0.3.2 to 0.5.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/tikv/jemallocator/releases\">jemallocator's releases</a>.</em></p>\n<blockquote>\n<h2>0.4.3</h2>\n<ul>\n<li>Added riscv64 support (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/14\">#14</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/tikv/jemallocator/blob/main/CHANGELOG.md\">jemallocator's changelog</a>.</em></p>\n<blockquote>\n<h1>0.5.0 - 2022-05-19</h1>\n<ul>\n<li>Update jemalloc to 5.3.0 (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/23\">#23</a>)</li>\n</ul>\n<h1>0.4.3 - 2022-02-21</h1>\n<ul>\n<li>Added riscv64 support (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/14\">#14</a>)</li>\n</ul>\n<h1>0.4.2 - 2021-08-09</h1>\n<ul>\n<li>Fixed prof not working under certain condition (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/9\">#9</a>) (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/12\">#12</a>)</li>\n<li>Updated paste to 1 (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/11\">#11</a>)</li>\n</ul>\n<h1>0.4.1 - 2020-11-16</h1>\n<ul>\n<li>Updated jemalloc to fix deadlock during initialization</li>\n<li>Fixed failure of generating docs on release version</li>\n</ul>\n<h1>0.4.0 - 2020-07-21</h1>\n<ul>\n<li>Forked from jemallocator master</li>\n<li>Upgraded jemalloc to 5.2.1 (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/1\">#1</a>)</li>\n<li>Fixed wrong version in generated C header (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/1\">#1</a>)</li>\n<li>Upgraded project to 2018 edition (<a href=\"https://github-redirect.dependabot.com/tikv/jemallocator/issues/2\">#2</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/tikv/jemallocator/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jemallocator&package-manager=cargo&previous-version=0.3.2&new-version=0.5.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-25T18:46:46Z",
          "tree_id": "af7e91f5b442d94c8beb814fe2cc8a97e876dc23",
          "url": "https://github.com/boa-dev/boa/commit/3b75c45dd66cf7505e6f653fad0feb4a6d663cb9"
        },
        "date": 1653506802085,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5732,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18833,
            "range": "± 780",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21049,
            "range": "± 462",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12123,
            "range": "± 229",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12998,
            "range": "± 573",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13909,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8370,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11128,
            "range": "± 732",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10734,
            "range": "± 1478",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13344,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15556,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18074,
            "range": "± 447",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 179062,
            "range": "± 2731",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9885,
            "range": "± 412",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14163,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7419,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14607,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18877,
            "range": "± 1103",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18553,
            "range": "± 485",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6934,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 39632,
            "range": "± 1146",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34648,
            "range": "± 816",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1468,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3236,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3539,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1993,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2035,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2271,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2051,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2022,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2264,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2239,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1900,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2867,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5059,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2286,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2846,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1885,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1371,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1435,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1798,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 685,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6164,
            "range": "± 416",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5299,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5314,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19732,
            "range": "± 768",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1799450,
            "range": "± 37343",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6526,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6726,
            "range": "± 244",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7043,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11963,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12009,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16172,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 16380,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10617,
            "range": "± 396",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3096177,
            "range": "± 141066",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1368453,
            "range": "± 30706",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5615,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5945,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5254,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4210,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5392,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7799,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 709,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 874525,
            "range": "± 21500",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 787219,
            "range": "± 12911",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "c9391c1226e60e664b69901bbf75e8289b6258dd",
          "message": "Bump once_cell from 1.11.0 to 1.12.0 (#2085)\n\nBumps [once_cell](https://github.com/matklad/once_cell) from 1.11.0 to 1.12.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/matklad/once_cell/blob/master/CHANGELOG.md\">once_cell's changelog</a>.</em></p>\n<blockquote>\n<h2>1.12.0</h2>\n<ul>\n<li>Add <code>OnceCell::wait</code>, a blocking variant of <code>get</code>.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/matklad/once_cell/commit/9879c77ea0cb36091cdba71c426776dbe116fdf7\"><code>9879c77</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/179\">#179</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/9f43e04e7c0bd22cf3c3fd87169aca37e3d7683f\"><code>9f43e04</code></a> publish v1.12.0</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/62b4579811cea5520adda7fe27a5aecb8f23b3ad\"><code>62b4579</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/177\">#177</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c9351549eec6c1c37e64590bef57c363bdb34691\"><code>c935154</code></a> add OnceCell::wait</li>\n<li>See full diff in <a href=\"https://github.com/matklad/once_cell/compare/v1.11.0...v1.12.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=once_cell&package-manager=cargo&previous-version=1.11.0&new-version=1.12.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-25T19:01:28Z",
          "tree_id": "fcb4e9f8d35f2b16c34eb2f1ca1356aab506f0e8",
          "url": "https://github.com/boa-dev/boa/commit/c9391c1226e60e664b69901bbf75e8289b6258dd"
        },
        "date": 1653507434101,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 242,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5373,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16507,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18752,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10912,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11771,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12607,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7618,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9989,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9730,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12184,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13961,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16033,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 156561,
            "range": "± 561",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8981,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12878,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6908,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13148,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16745,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16518,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5997,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35475,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31233,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1097,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2736,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2835,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1616,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1656,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1902,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1636,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1655,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1838,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1835,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1552,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2372,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4128,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1805,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2366,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1479,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1124,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1222,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1529,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 516,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5050,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4467,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4370,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16458,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1418171,
            "range": "± 2979",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5190,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5438,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5583,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9318,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9351,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12294,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12301,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8869,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2496504,
            "range": "± 2195",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1154851,
            "range": "± 6873",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4636,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4851,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4188,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3657,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4476,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6609,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 516,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 746494,
            "range": "± 3878",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 699141,
            "range": "± 4582",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "55060c664a53e9ff3344b56393bf5694241fdd37",
          "message": "Bump regex from 1.5.5 to 1.5.6 (#2086)\n\nBumps [regex](https://github.com/rust-lang/regex) from 1.5.5 to 1.5.6.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-lang/regex/blob/master/CHANGELOG.md\">regex's changelog</a>.</em></p>\n<blockquote>\n<h1>1.5.6 (2022-05-20)</h1>\n<p>This release includes a few bug fixes, including a bug that produced incorrect\nmatches when a non-greedy <code>?</code> operator was used.</p>\n<ul>\n<li>[BUG <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/680\">#680</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/680\">rust-lang/regex#680</a>):\nFixes a bug where <code>[[:alnum:][:^ascii:]]</code> dropped <code>[:alnum:]</code> from the class.</li>\n<li>[BUG <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/859\">#859</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/859\">rust-lang/regex#859</a>):\nFixes a bug where <code>Hir::is_match_empty</code> returned <code>false</code> for <code>\\b</code>.</li>\n<li>[BUG <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/862\">#862</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/862\">rust-lang/regex#862</a>):\nFixes a bug where 'ab??' matches 'ab' instead of 'a' in 'ab'.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/regex/commit/9aef5b1edc2a436244b936db53a03ed6d720e87e\"><code>9aef5b1</code></a> 1.5.6</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/2931b070fd9b525dec95c2b4c91f8b9ee500239e\"><code>2931b07</code></a> syntax: bump minimum regex-syntax version to 0.6.26</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/b41bde0b854e3cd1018f55e5dcd80c09b418d6c4\"><code>b41bde0</code></a> regex-syntax-0.6.26</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/d98da65bb3df16836f1181c6f7e4f03c3af1d5a5\"><code>d98da65</code></a> changelog: 1.5.6</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/1c19619672c2ef16dc9f64fec38af5719c4ec06c\"><code>1c19619</code></a> syntax: fix literal extraction for 'ab??'</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/88a2a62d861d189faae539990f63cb9cf195bd8c\"><code>88a2a62</code></a> syntax: fix 'is_match_empty' predicate</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/72f09f1aeb0ff3f703b1afdbdd21f5ff63162fb4\"><code>72f09f1</code></a> syntax: fix ascii class union bug</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/b5372864e2df6a2f5e543a556a62197f50ca3650\"><code>b537286</code></a> doc: fix some typos</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/258bdf798a14f50529c1665e84cc8a3a9e2c90fc\"><code>258bdf7</code></a> changelog: 1.5.5</li>\n<li>See full diff in <a href=\"https://github.com/rust-lang/regex/compare/1.5.5...1.5.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=regex&package-manager=cargo&previous-version=1.5.5&new-version=1.5.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-25T21:03:00Z",
          "tree_id": "7bd5acaa1a46a96cd9008310fddd088c6a2c1f27",
          "url": "https://github.com/boa-dev/boa/commit/55060c664a53e9ff3344b56393bf5694241fdd37"
        },
        "date": 1653514929208,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 262,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5951,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18481,
            "range": "± 869",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20318,
            "range": "± 1337",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12429,
            "range": "± 954",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12871,
            "range": "± 623",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14449,
            "range": "± 526",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8569,
            "range": "± 367",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11446,
            "range": "± 633",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11183,
            "range": "± 392",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13512,
            "range": "± 489",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15905,
            "range": "± 720",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18229,
            "range": "± 806",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 175658,
            "range": "± 9171",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9524,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14035,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7400,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14610,
            "range": "± 677",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18397,
            "range": "± 1168",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18324,
            "range": "± 1027",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6814,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 39060,
            "range": "± 2254",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 32754,
            "range": "± 1318",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1413,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3166,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3345,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1986,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1951,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2236,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2109,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2046,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2250,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2285,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1846,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2865,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5132,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2206,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2810,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1877,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1360,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1393,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1764,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 692,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6004,
            "range": "± 317",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5216,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5292,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19795,
            "range": "± 901",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1743142,
            "range": "± 82631",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6389,
            "range": "± 267",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6656,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6945,
            "range": "± 330",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11469,
            "range": "± 562",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10940,
            "range": "± 739",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14242,
            "range": "± 814",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14606,
            "range": "± 894",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9993,
            "range": "± 518",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2783048,
            "range": "± 145522",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1267849,
            "range": "± 69559",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5454,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5756,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5299,
            "range": "± 214",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4035,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5227,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7696,
            "range": "± 347",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 681,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 853224,
            "range": "± 61135",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 789938,
            "range": "± 39781",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7ecc37302ccd58a48fb5359fa50f536cbd33d3f2",
          "message": "Bump crazy-max/ghaction-github-pages from 2.6.0 to 3.0.0 (#2091)\n\nBumps [crazy-max/ghaction-github-pages](https://github.com/crazy-max/ghaction-github-pages) from 2.6.0 to 3.0.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/crazy-max/ghaction-github-pages/releases\">crazy-max/ghaction-github-pages's releases</a>.</em></p>\n<blockquote>\n<h2>v3.0.0</h2>\n<ul>\n<li>Node 16 as default runtime (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/167\">#167</a>)\n<ul>\n<li>This requires a minimum <a href=\"https://github.com/actions/runner/releases/tag/v2.285.0\">Actions Runner</a> version of v2.285.0, which is by default available in GHES 3.4 or later.</li>\n</ul>\n</li>\n</ul>\n<h2>v2.7.0</h2>\n<ul>\n<li>Update dev dependencies and workflow (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/166\">#166</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/crazy-max/ghaction-github-pages/blob/dev/CHANGELOG.md\">crazy-max/ghaction-github-pages's changelog</a>.</em></p>\n<blockquote>\n<h2>3.0.0 (2022/05/26)</h2>\n<ul>\n<li>Node 16 as default runtime (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/167\">#167</a>)\n<ul>\n<li>This requires a minimum <a href=\"https://github.com/actions/runner/releases/tag/v2.285.0\">Actions Runner</a> version of v2.285.0, which is by default available in GHES 3.4 or later.</li>\n</ul>\n</li>\n</ul>\n<h2>2.7.0 (2022/05/26)</h2>\n<ul>\n<li>Update dev dependencies and workflow (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/166\">#166</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/eb08c35b9fab86751edfff4e55cd5cde35ff0e52\"><code>eb08c35</code></a> Node 16 as default runtime (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/167\">#167</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/59173cb633d9a3514f5f4552a6a3e62c6710355c\"><code>59173cb</code></a> Update CHANGELOG</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/d12e80a5c0cea45614a663e3123e4afd08c3e248\"><code>d12e80a</code></a> cleanup workflow</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/c7aed65df95edd17a35b068e2134913ff955a9a7\"><code>c7aed65</code></a> Bump docker/bake-action from 1 to 2 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/169\">#169</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/f778ace2db9d289df3c0012099a08f9d4ebbe8c4\"><code>f778ace</code></a> update dev dependencies and workflow (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/166\">#166</a>)</li>\n<li><a href=\"https://github.com/crazy-max/ghaction-github-pages/commit/11b007c0cdea034121c8d2020fdf0dbf79d371d5\"><code>11b007c</code></a> Bump actions/checkout from 2 to 3 (<a href=\"https://github-redirect.dependabot.com/crazy-max/ghaction-github-pages/issues/163\">#163</a>)</li>\n<li>See full diff in <a href=\"https://github.com/crazy-max/ghaction-github-pages/compare/v2.6.0...v3.0.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=crazy-max/ghaction-github-pages&package-manager=github_actions&previous-version=2.6.0&new-version=3.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-28T16:49:01Z",
          "tree_id": "2976f2dae502500a3b663d189fff240e8d3bd6eb",
          "url": "https://github.com/boa-dev/boa/commit/7ecc37302ccd58a48fb5359fa50f536cbd33d3f2"
        },
        "date": 1653758529955,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 227,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4943,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15650,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18009,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10351,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11040,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11927,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6305,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8431,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8082,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11459,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13109,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15274,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146232,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7389,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12210,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5591,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12242,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15814,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13641,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5825,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33318,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28843,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1053,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2460,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2651,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1488,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1519,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1671,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1528,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1505,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1695,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1687,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1247,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2179,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3650,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1683,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2183,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1221,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 956,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1002,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1412,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 537,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4641,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4064,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3659,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15839,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1178820,
            "range": "± 3230",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4452,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4555,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5351,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8768,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8770,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11711,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11736,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7126,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2501563,
            "range": "± 3607",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1145800,
            "range": "± 4844",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3829,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4548,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4073,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2850,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4137,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5961,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 571,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 703188,
            "range": "± 4208",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 584205,
            "range": "± 3478",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "518bad810974aa4cf6fcd3d864756f298d1b204d",
          "message": "Integrate ICU4X into `Intl` module (#2083)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request integrates an `ICU4X` data provider API in our codebase, to make use of the internationalization APIs that this crate provides.\r\n\r\nIt changes the following:\r\n\r\n- Creates an API for pluggable icu data providers at `Context` creation, adding an `Icu` struct to store the provider (and some other internationalization tools) at runtime.\r\n- Slightly changes locale related functions to preserve the `Locale` type and ensure correctness. (Will make some other changes related to this).\r\n- Integrates the `sys_locale` crate to fetch the current default locale of an user instead of always returning `en-US`.",
          "timestamp": "2022-05-30T12:22:31Z",
          "tree_id": "a17a7a4ea88cca0c79cfbae82a23b112d1742022",
          "url": "https://github.com/boa-dev/boa/commit/518bad810974aa4cf6fcd3d864756f298d1b204d"
        },
        "date": 1653915665110,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 231,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4997,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15627,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17834,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10329,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11032,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12057,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7243,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9491,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9232,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11338,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13207,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15232,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146048,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8480,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12051,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6387,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12278,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15889,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15471,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5843,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33163,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28958,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1047,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2440,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2637,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1473,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1515,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1705,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1526,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1528,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1693,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1694,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1444,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2198,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4046,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1681,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2187,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 4250,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1068,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1122,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1406,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 542,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4612,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4034,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4108,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15988,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1293619,
            "range": "± 6470",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4967,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5122,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5279,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8748,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8727,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11391,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11481,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7939,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2520723,
            "range": "± 3416",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1135469,
            "range": "± 4656",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4294,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4466,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4012,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3248,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4232,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6001,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 657,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 701622,
            "range": "± 2956",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 660752,
            "range": "± 3629",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "273beb4c3382da46433a2097be3ae35502f78fe5",
          "message": "Bump indexmap from 1.8.1 to 1.8.2 (#2094)\n\nBumps [indexmap](https://github.com/bluss/indexmap) from 1.8.1 to 1.8.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/bluss/indexmap/blob/1.8.2/RELEASES.rst\">indexmap's changelog</a>.</em></p>\n<blockquote>\n<ul>\n<li>\n<p>1.8.2</p>\n<ul>\n<li>Bump the <code>rustc-rayon</code> dependency, for compiler use only.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/bluss/indexmap/commit/84123f43f5715a02319b0bc1523c71a2d598dd19\"><code>84123f4</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/229\">#229</a> from cuviper/1-rustc-rayon-0.4</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/e31910b22122470b31db0a933f467edb083efd24\"><code>e31910b</code></a> Enable CI on indexmap-1.x</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/156477fcfe4cdd7002a893a951caccc7886463e3\"><code>156477f</code></a> Release 1.8.2</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/3848879fcdbc5baa42217462456ebeec2c1373b3\"><code>3848879</code></a> Update rustc-rayon to 0.4</li>\n<li>See full diff in <a href=\"https://github.com/bluss/indexmap/compare/1.8.1...1.8.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=indexmap&package-manager=cargo&previous-version=1.8.1&new-version=1.8.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-30T18:35:13Z",
          "tree_id": "247efb2ebd01f5806ad71fe7c7a242c4ccbe8bbd",
          "url": "https://github.com/boa-dev/boa/commit/273beb4c3382da46433a2097be3ae35502f78fe5"
        },
        "date": 1653938160548,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 286,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 6246,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19827,
            "range": "± 1580",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 22356,
            "range": "± 637",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 13132,
            "range": "± 1089",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13993,
            "range": "± 391",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 15001,
            "range": "± 1078",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 9031,
            "range": "± 788",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11923,
            "range": "± 722",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11658,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14331,
            "range": "± 745",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16590,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19142,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 189736,
            "range": "± 11050",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10822,
            "range": "± 436",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 15382,
            "range": "± 1148",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 8146,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15500,
            "range": "± 662",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19885,
            "range": "± 600",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 19608,
            "range": "± 1478",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7223,
            "range": "± 486",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 41813,
            "range": "± 1683",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 36247,
            "range": "± 1211",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1485,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3302,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3639,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2018,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2099,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2300,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2107,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2095,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2306,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2310,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1986,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2984,
            "range": "± 184",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5162,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2337,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2960,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1916,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1402,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1488,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1854,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 727,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6207,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5398,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5474,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20197,
            "range": "± 722",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1785521,
            "range": "± 57273",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6770,
            "range": "± 656",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6696,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7035,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11292,
            "range": "± 377",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11271,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15288,
            "range": "± 1137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15282,
            "range": "± 784",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10247,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3113804,
            "range": "± 76039",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1381591,
            "range": "± 87372",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5548,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5774,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5278,
            "range": "± 449",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4233,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5404,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8018,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 740,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 874663,
            "range": "± 131479",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 809324,
            "range": "± 24013",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "bad686d9ea1c661a829c77f8df340ff3388a51e5",
          "message": "Bump benchmark-action/github-action-benchmark from 1.13.0 to 1.14.0 (#2093)\n\nBumps [benchmark-action/github-action-benchmark](https://github.com/benchmark-action/github-action-benchmark) from 1.13.0 to 1.14.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/releases\">benchmark-action/github-action-benchmark's releases</a>.</em></p>\n<blockquote>\n<h2>v1.14.0</h2>\n<p>Feat: Added benchmark luau support (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/123\">#123</a>)\nChore: Bump minimist from 1.2.5 to 1.2.6 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/114\">#114</a>)\nFeat: Implement deploy to another repository (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/112\">#112</a>)</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/benchmark-action/github-action-benchmark/blob/master/CHANGELOG.md\">benchmark-action/github-action-benchmark's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/benchmark-action/github-action-benchmark/releases/tag/v1.14.0\">v1.14.0</a> - 28 May 2022</h1>\n<ul>\n<li><strong>Feat</strong> Added benchmark luau support (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/123\">#123</a>)</li>\n<li><strong>Chore</strong> Bump minimist from 1.2.5 to 1.2.6 (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/114\">#114</a>)</li>\n<li><strong>Feat</strong> Implement deploy to another repository (<a href=\"https://github-redirect.dependabot.com/benchmark-action/github-action-benchmark/issues/112\">#112</a>)</li>\n</ul>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/benchmark-action/github-action-benchmark/commit/3b3014adac5e456db8ad428ccc01bec75242487f\"><code>3b3014a</code></a> v1.14.0</li>\n<li>See full diff in <a href=\"https://github.com/benchmark-action/github-action-benchmark/compare/v1.13.0...v1.14.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=benchmark-action/github-action-benchmark&package-manager=github_actions&previous-version=1.13.0&new-version=1.14.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-05-30T18:50:24Z",
          "tree_id": "f86aa60d1575ad89f64fc16fced20fe5356d5fa2",
          "url": "https://github.com/boa-dev/boa/commit/bad686d9ea1c661a829c77f8df340ff3388a51e5"
        },
        "date": 1653938494438,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 201,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4421,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13486,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15571,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10292,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9727,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10419,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6280,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8290,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8083,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9971,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11627,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15121,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 128503,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7405,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11953,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5638,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10927,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14097,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13731,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5160,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 28934,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25275,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 932,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2158,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2303,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1310,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1341,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1496,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1350,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1342,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1501,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1493,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1259,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2216,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3616,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1497,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1970,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1248,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 957,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1008,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1419,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 474,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4187,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3651,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4209,
            "range": "± 224",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15638,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1134488,
            "range": "± 2317",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4383,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4552,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5330,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9054,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7983,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10597,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10561,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7079,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2701367,
            "range": "± 3640",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1055013,
            "range": "± 2922",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3803,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 3990,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3564,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2938,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3716,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5370,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 618,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 623428,
            "range": "± 2782",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 590757,
            "range": "± 2430",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "f5ad346a695371e51fe566de36e976c54a58916b",
          "message": "Updated Test262 submodule (#2097)\n\nThis updates the Test262 submodule so that it includes the latest tests. It overrides #2095, which was failing due to a bug in the YAML in Test262 (https://github.com/tc39/test262/issues/3545). This has now been fixed, so we can update the submodule.",
          "timestamp": "2022-06-01T14:21:43Z",
          "tree_id": "2a944f8ca24966baf96c515634199d3d63adcdf9",
          "url": "https://github.com/boa-dev/boa/commit/f5ad346a695371e51fe566de36e976c54a58916b"
        },
        "date": 1654095321457,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5525,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17479,
            "range": "± 375",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20002,
            "range": "± 601",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11615,
            "range": "± 460",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12438,
            "range": "± 803",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13199,
            "range": "± 446",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7993,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10472,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10327,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12795,
            "range": "± 1061",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14647,
            "range": "± 677",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16789,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 170791,
            "range": "± 3804",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9214,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13571,
            "range": "± 425",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6965,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14058,
            "range": "± 586",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18356,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17943,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6569,
            "range": "± 255",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37172,
            "range": "± 1534",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 32120,
            "range": "± 2374",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1284,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2966,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3126,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1835,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1847,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2053,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1842,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1845,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2024,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2093,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1764,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2671,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4994,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2056,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2729,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1733,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1192,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1250,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1609,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 653,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5502,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4895,
            "range": "± 377",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5057,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18939,
            "range": "± 599",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1556982,
            "range": "± 34127",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5936,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6105,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6351,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10993,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11063,
            "range": "± 480",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14572,
            "range": "± 414",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14653,
            "range": "± 502",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9825,
            "range": "± 505",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3326232,
            "range": "± 71682",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1461908,
            "range": "± 36818",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5178,
            "range": "± 221",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5333,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4806,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3944,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5136,
            "range": "± 234",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7358,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 794,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 863095,
            "range": "± 23341",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 826871,
            "range": "± 37567",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "f0378068a0a2add5b7110addc875aa266f28cc38",
          "message": "Implement `Function` constructor (#2090)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `Function` constructor\r\n- Ignore non-standard `caller` feature in 262 tests\r\n- Fix `Function.apply` length\r\n- Use `TypeError` in `Function.caller` and `Function.arguments` accessors",
          "timestamp": "2022-06-01T16:53:46Z",
          "tree_id": "e41ea2177014845eca584c605511072da0364ef5",
          "url": "https://github.com/boa-dev/boa/commit/f0378068a0a2add5b7110addc875aa266f28cc38"
        },
        "date": 1654104586200,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 276,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5396,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17285,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19773,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11431,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12219,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12930,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7689,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10479,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10002,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12504,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14490,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16849,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165701,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9214,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13394,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6856,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13891,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17970,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17591,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6428,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36600,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31418,
            "range": "± 701",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1272,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2960,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3135,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1802,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1846,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2060,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1802,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1824,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2018,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1995,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1732,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2605,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4867,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2050,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2657,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1673,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1172,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1229,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1586,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 648,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5431,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4787,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4839,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18629,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1555557,
            "range": "± 7325",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5826,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6039,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6332,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10858,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10859,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14188,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14188,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9590,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3166149,
            "range": "± 6229",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1467562,
            "range": "± 43948",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5060,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5333,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4708,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3935,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5059,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7230,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 810,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 855590,
            "range": "± 3533",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 806832,
            "range": "± 5503",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "f0378068a0a2add5b7110addc875aa266f28cc38",
          "message": "Implement `Function` constructor (#2090)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `Function` constructor\r\n- Ignore non-standard `caller` feature in 262 tests\r\n- Fix `Function.apply` length\r\n- Use `TypeError` in `Function.caller` and `Function.arguments` accessors",
          "timestamp": "2022-06-01T16:53:46Z",
          "tree_id": "e41ea2177014845eca584c605511072da0364ef5",
          "url": "https://github.com/boa-dev/boa/commit/f0378068a0a2add5b7110addc875aa266f28cc38"
        },
        "date": 1654105044607,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 230,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4968,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15314,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17645,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10283,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11049,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11780,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7079,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9355,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9051,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11291,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13084,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15211,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146023,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8345,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11978,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6285,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12418,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16106,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15632,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5770,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32875,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28569,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1052,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2460,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2659,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1500,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1542,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1727,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1548,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1572,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1734,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1731,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1489,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2185,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4137,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1686,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2207,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1390,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1081,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1137,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1444,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 542,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4623,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4074,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4114,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15558,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1337319,
            "range": "± 9669",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4919,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5121,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5349,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9141,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9091,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12141,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12140,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8076,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2632918,
            "range": "± 6405",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1176579,
            "range": "± 3319",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4278,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4485,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3974,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3247,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4160,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6090,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 673,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 708877,
            "range": "± 4488",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 668962,
            "range": "± 4221",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "86aae26236906b0f20b9bfd3e28c52cc83705efe",
          "message": "Bump webpack-dev-server from 4.9.0 to 4.9.1 (#2096)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.9.0 to 4.9.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.9.1</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.0...v4.9.1\">4.9.1</a> (2022-05-31)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>security problem with sockjs (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4465\">#4465</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/e765182e426cbca9c3c09294b02ac2d9737c1d74\">e765182</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.0...v4.9.1\">4.9.1</a> (2022-05-31)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>security problem with sockjs (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4465\">#4465</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/e765182e426cbca9c3c09294b02ac2d9737c1d74\">e765182</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/511f51a8720e93751f1f3f70660bfec4d0756c35\"><code>511f51a</code></a> chore(release): 4.9.1</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e765182e426cbca9c3c09294b02ac2d9737c1d74\"><code>e765182</code></a> fix: security problem with sockjs (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4465\">#4465</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e2113ed3298d97b32b19fd6ce6292960deb7d8f3\"><code>e2113ed</code></a> chore(deps-dev): bump sockjs-client from 1.6.0 to 1.6.1 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4464\">#4464</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/3166fcdaf0c25b01cf35752c38d0905a7c4ce8dd\"><code>3166fcd</code></a> chore(deps-dev): bump memfs from 3.4.3 to 3.4.4 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4463\">#4463</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/df7ce6e8f6dd8ede809b2256c9a8d094c6b7023b\"><code>df7ce6e</code></a> chore: update deps and types (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4461\">#4461</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/b3511e0139cd8e9ddd52a35265fa8d357ee65d90\"><code>b3511e0</code></a> chore(deps-dev): bump core-js from 3.22.6 to 3.22.7 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4452\">#4452</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/c90438da91109da6e36b35ffee04db260dde3089\"><code>c90438d</code></a> chore(deps-dev): bump lint-staged from 12.4.1 to 12.4.2 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4451\">#4451</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/a414b263ec564be0c22a008b2646a029d6660902\"><code>a414b26</code></a> chore(deps-dev): bump <code>@​babel/eslint-parser</code> from 7.17.0 to 7.18.2 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4459\">#4459</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/c562d3167667d5b919681cc0ba0ab81b0144abe5\"><code>c562d31</code></a> chore(deps-dev): bump <code>@​babel/preset-env</code></li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e8f80089951950d2a571d94cced871f910c6f32b\"><code>e8f8008</code></a> chore(deps-dev): bump <code>@​babel/core</code></li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.0...v4.9.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.9.0&new-version=4.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-02T18:43:07Z",
          "tree_id": "cc8402bfcb52ae3ee52ed1f41ae3271e8dbab23f",
          "url": "https://github.com/boa-dev/boa/commit/86aae26236906b0f20b9bfd3e28c52cc83705efe"
        },
        "date": 1654197378543,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 238,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4954,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15267,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17754,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10214,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11015,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11735,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7113,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9344,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9071,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11301,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13070,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15019,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146081,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8381,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11944,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6266,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12319,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15960,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15569,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5796,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32862,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28408,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1052,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2469,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2649,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1484,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1538,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1694,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1535,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1516,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1697,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1699,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1461,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2208,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4075,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1703,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2179,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1383,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1084,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1134,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1414,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 548,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4611,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4058,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4086,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15566,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1303093,
            "range": "± 2470",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4909,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5070,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5288,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9185,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9112,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12018,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11946,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8005,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2634590,
            "range": "± 5132",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1187351,
            "range": "± 5625",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4268,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4406,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3920,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3289,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4120,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6023,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 662,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 710059,
            "range": "± 5407",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 669823,
            "range": "± 3149",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d73259110beb68faab0e0bc12f2bd4b4217e574f",
          "message": "Bump boa-dev/criterion-compare-action from 3.2.1 to 3.2.2 (#2100)\n\nBumps [boa-dev/criterion-compare-action](https://github.com/boa-dev/criterion-compare-action) from 3.2.1 to 3.2.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/boa-dev/criterion-compare-action/releases\">boa-dev/criterion-compare-action's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.2</h2>\n<p>This release updates the used dependencies.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/boa-dev/criterion-compare-action/commit/d04becb7975ac52784002018e7dc7bc6459a0983\"><code>d04becb</code></a> Updated dependencies, prepared the new release (<a href=\"https://github-redirect.dependabot.com/boa-dev/criterion-compare-action/issues/64\">#64</a>)</li>\n<li>See full diff in <a href=\"https://github.com/boa-dev/criterion-compare-action/compare/v3.2.1...v3.2.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=boa-dev/criterion-compare-action&package-manager=github_actions&previous-version=3.2.1&new-version=3.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-02T19:09:11Z",
          "tree_id": "a8aef1c7dd2021a93da7c70afac9e51f8361412a",
          "url": "https://github.com/boa-dev/boa/commit/d73259110beb68faab0e0bc12f2bd4b4217e574f"
        },
        "date": 1654199092718,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 292,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5356,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17187,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19640,
            "range": "± 343",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11588,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12485,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13218,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7942,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10522,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10202,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12745,
            "range": "± 544",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14490,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16818,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 167421,
            "range": "± 1782",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9181,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13355,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6770,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14178,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18412,
            "range": "± 247",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18098,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6474,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36851,
            "range": "± 440",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31698,
            "range": "± 450",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1255,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2910,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3077,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1755,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1820,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2009,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1784,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1789,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2012,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2013,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1726,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2574,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4813,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2020,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2616,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1679,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1158,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1211,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1581,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 648,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5341,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4715,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4910,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18692,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1556999,
            "range": "± 13939",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5889,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6082,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6357,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10926,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10924,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14168,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14231,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9628,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3126576,
            "range": "± 28458",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1425093,
            "range": "± 13230",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5068,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5290,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4739,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3833,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4919,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7134,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 774,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 836501,
            "range": "± 13744",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 785218,
            "range": "± 13078",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "758a1ed4a9ffdad3dc84341e17166ea163947926",
          "message": "Bump terser-webpack-plugin from 5.3.1 to 5.3.3 (#2099)\n\nBumps [terser-webpack-plugin](https://github.com/webpack-contrib/terser-webpack-plugin) from 5.3.1 to 5.3.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/releases\">terser-webpack-plugin's releases</a>.</em></p>\n<blockquote>\n<h2>v5.3.3</h2>\n<h3><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/compare/v5.3.2...v5.3.3\">5.3.3</a> (2022-06-02)</h3>\n<h3>Fixes</h3>\n<ul>\n<li>fix broken release</li>\n</ul>\n<h2>v5.3.2</h2>\n<h3><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/compare/v5.3.1...v5.3.2\">5.3.2</a> (2022-06-02)</h3>\n<h3>Chore</h3>\n<ul>\n<li>switched to <code>@jridgewell/source-map</code> for error generation</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/blob/master/CHANGELOG.md\">terser-webpack-plugin's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/compare/v5.3.2...v5.3.3\">5.3.3</a> (2022-06-02)</h3>\n<h3>Fixes</h3>\n<ul>\n<li>fix broken release</li>\n</ul>\n<h3><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/compare/v5.3.1...v5.3.2\">5.3.2</a> (2022-06-02)</h3>\n<h3>Chore</h3>\n<ul>\n<li>switched to <code>@jridgewell/source-map</code> for error generation</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/2b2111faa5452b1c24fc1b2dd153a2978d4b3de0\"><code>2b2111f</code></a> chore(release): 5.3.3</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/e2b9a45782c3e4dd13436af1f12819a0e323bf12\"><code>e2b9a45</code></a> chore(release): 5.3.2</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/f61bc5da072deaa3df4beebecc5203d606653896\"><code>f61bc5d</code></a> refactor: replace deprecated String.prototype.substr() (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/479\">#479</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/bd10e134187bf0c56f20c458d4b5b0587787640d\"><code>bd10e13</code></a> ci: node.js v18 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/490\">#490</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/6020a94544ec2712dedb00164dc578b9bb430d40\"><code>6020a94</code></a> perf: replace <code>source-map</code> package with <code>@jridgewell/trace-mapping</code> (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/489\">#489</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/66fdec85d73df7ebf33ce8c32b6e6b1a76cbafff\"><code>66fdec8</code></a> docs: remove old badge (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/488\">#488</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/11712b940c7fff3c8fa705500abf8490a837e2c1\"><code>11712b9</code></a> chore: update github actions (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/487\">#487</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/463ed9e3ec86edc6753658e1887ecf247e1eb6cb\"><code>463ed9e</code></a> ci: don't  install webpack again (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/483\">#483</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/f259590b491705ffb062e4623daf638406271834\"><code>f259590</code></a> chore(deps): bump minimist from 1.2.5 to 1.2.6 (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/480\">#480</a>)</li>\n<li><a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/commit/3d6539f632d87e63468a1f9f84862d1049920c0e\"><code>3d6539f</code></a> docs(readme): add types (<a href=\"https://github-redirect.dependabot.com/webpack-contrib/terser-webpack-plugin/issues/477\">#477</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack-contrib/terser-webpack-plugin/compare/v5.3.1...v5.3.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=terser-webpack-plugin&package-manager=npm_and_yarn&previous-version=5.3.1&new-version=5.3.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-02T19:37:08Z",
          "tree_id": "fcc748f6606f6496d569dd90df4b208d929f2cf4",
          "url": "https://github.com/boa-dev/boa/commit/758a1ed4a9ffdad3dc84341e17166ea163947926"
        },
        "date": 1654200803689,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 278,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5420,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17236,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19813,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11393,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12231,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12903,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7841,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10574,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10290,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12737,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14463,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16760,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165937,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9188,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13422,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6865,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13894,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18060,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17636,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6625,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36343,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31493,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1255,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2928,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3074,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1774,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1840,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1992,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1816,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1857,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2005,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1970,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1767,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2606,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4842,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2041,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2668,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1680,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1166,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1209,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1588,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 649,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5404,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4799,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4916,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19083,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1541913,
            "range": "± 70391",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5916,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6152,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6413,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10801,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10858,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14179,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14303,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9641,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3204183,
            "range": "± 17213",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1410310,
            "range": "± 6915",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5165,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5344,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4796,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3892,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5049,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7237,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 840,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 860896,
            "range": "± 39199",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 836741,
            "range": "± 58854",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6fdac9e632fbaa57dff3bde76b5f64c33e9783ad",
          "message": "Bump webpack from 5.72.1 to 5.73.0 (#2101)\n\nBumps [webpack](https://github.com/webpack/webpack) from 5.72.1 to 5.73.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack/releases\">webpack's releases</a>.</em></p>\n<blockquote>\n<h2>v5.73.0</h2>\n<h1>Features</h1>\n<ul>\n<li>add options for default <code>dynamicImportMode</code> and prefetch and preload</li>\n<li>add support for <code>import { createRequire } from &quot;module&quot;</code> in source code</li>\n</ul>\n<h1>Bugfixes</h1>\n<ul>\n<li>fix code generation of e. g. <code>return&quot;field&quot;in Module</code></li>\n<li>fix performance of large JSON modules</li>\n<li>fix performance of async modules evaluation</li>\n</ul>\n<h1>Developer Experience</h1>\n<ul>\n<li>export <code>PathData</code> in typings</li>\n<li>improve error messages with more details</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/commit/36051a5ca77b4fa33fac651e1af650c7b910a873\"><code>36051a5</code></a> 5.73.0</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/520d31473c43f8a1901d5cd08982c6eaa15dd47e\"><code>520d314</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15899\">#15899</a> from webpack/bugfix/async-modules-performance</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/096efc3821b7325728781329942f49405cae96d7\"><code>096efc3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15801\">#15801</a> from webpack/refactor-json-modules</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b8748cfe149d21a71dbde0c4fa34d0646fe68cf8\"><code>b8748cf</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15873\">#15873</a> from webpack/more-informative-error</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/b1cc471f8691ae90cb978a5dcdc04791fc641699\"><code>b1cc471</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15888\">#15888</a> from webpack/feature/issue-13695</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/509a06002526cf94b60c72af70a84e355ee37714\"><code>509a060</code></a> fix quadratic evaluation performance of async modules</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/cc0cd60909bf14c1fc695a6296498fbf2c08575f\"><code>cc0cd60</code></a> more informative error when emitting multiple assets</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/e71d3b49fe69f9c4a19c55f689d0fc0398109a65\"><code>e71d3b4</code></a> more informative error in ProvideSharedPlugin</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/aa76e823b003a98b89972d91ab654961e8fb3462\"><code>aa76e82</code></a> fix discussions</li>\n<li><a href=\"https://github.com/webpack/webpack/commit/2738eebc7880835d88c727d364ad37f3ec557593\"><code>2738eeb</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/webpack/webpack/issues/15579\">#15579</a> from webpack/support-create-require</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack/compare/v5.72.1...v5.73.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack&package-manager=npm_and_yarn&previous-version=5.72.1&new-version=5.73.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-03T20:22:26Z",
          "tree_id": "5b0e23095a952cf17e823e22c56d262b0872ed9a",
          "url": "https://github.com/boa-dev/boa/commit/6fdac9e632fbaa57dff3bde76b5f64c33e9783ad"
        },
        "date": 1654289734251,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 246,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5190,
            "range": "± 321",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16602,
            "range": "± 1280",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19087,
            "range": "± 1056",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11323,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11458,
            "range": "± 858",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12157,
            "range": "± 732",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8183,
            "range": "± 543",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10465,
            "range": "± 518",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9814,
            "range": "± 1000",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11494,
            "range": "± 674",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14593,
            "range": "± 833",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15924,
            "range": "± 1067",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 164029,
            "range": "± 9828",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8840,
            "range": "± 618",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12479,
            "range": "± 821",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6819,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12749,
            "range": "± 693",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16414,
            "range": "± 1012",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16512,
            "range": "± 1041",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6606,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37704,
            "range": "± 2158",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 32463,
            "range": "± 1771",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1372,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3275,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3413,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1903,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1880,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2209,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1989,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1921,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2165,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2041,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1784,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2774,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4581,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2073,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2752,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1797,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1249,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1287,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1731,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 652,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5690,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4998,
            "range": "± 307",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5035,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19312,
            "range": "± 1070",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1604003,
            "range": "± 105295",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6178,
            "range": "± 360",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6209,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6650,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9950,
            "range": "± 733",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10017,
            "range": "± 583",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13931,
            "range": "± 847",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13656,
            "range": "± 728",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9203,
            "range": "± 718",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2569166,
            "range": "± 109125",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1184352,
            "range": "± 70923",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5144,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5378,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4987,
            "range": "± 234",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3843,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5010,
            "range": "± 278",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7084,
            "range": "± 374",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 633,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 758090,
            "range": "± 40278",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 727462,
            "range": "± 40441",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "ae01d5c20bef227a47d7a9647d85da8bcd2b48c5",
          "message": "Parse private generator methods in classes (#2092)\n\nThis Pull Request changes the following:\r\n\r\n- Parse private generator methods in classes",
          "timestamp": "2022-06-03T20:34:22Z",
          "tree_id": "05fad061e3b495f122eb14ebe9245ef29d696166",
          "url": "https://github.com/boa-dev/boa/commit/ae01d5c20bef227a47d7a9647d85da8bcd2b48c5"
        },
        "date": 1654290683092,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 280,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5160,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16528,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19233,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10815,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11512,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12321,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7405,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9916,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9607,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11869,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13985,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16264,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 160354,
            "range": "± 2144",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8839,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12809,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6561,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13197,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17247,
            "range": "± 288",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17013,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6189,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34540,
            "range": "± 423",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30159,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1211,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2821,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2999,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1761,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1767,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1963,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1739,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1745,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1943,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1958,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1641,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2548,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4655,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1958,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2519,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1622,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1125,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1163,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1550,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 627,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5236,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4598,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4696,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18366,
            "range": "± 353",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1472898,
            "range": "± 20228",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5786,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5857,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6046,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10675,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10474,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13589,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13616,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9542,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3110207,
            "range": "± 43794",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1376705,
            "range": "± 22024",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5164,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5117,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4611,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3695,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4918,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6963,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 769,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 814971,
            "range": "± 8591",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 781002,
            "range": "± 10808",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4a7867e23a0ce993c716e06c5d4e06cf62c96978",
          "message": "Bump test262 from `520c418` to `53d6cd6` (#2104)\n\nBumps [test262](https://github.com/tc39/test262) from `520c418` to `53d6cd6`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/53d6cd6d463df461e1c506e0d2be4e36de0ef6fa\"><code>53d6cd6</code></a> Temporal: Add tests for converting a ZonedDateTime to a PlainDate.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/715c3ceb16195412a6361724dc3a7c4dc1f92d77\"><code>715c3ce</code></a> Add test262-harness-dotnet to README</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/520c418499321b427a84ca122f9eeabe0a8818da...53d6cd6d463df461e1c506e0d2be4e36de0ef6fa\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-06T22:37:47Z",
          "tree_id": "3185720210d785f563558a25b99c86e4d2a9e4b9",
          "url": "https://github.com/boa-dev/boa/commit/4a7867e23a0ce993c716e06c5d4e06cf62c96978"
        },
        "date": 1654556976732,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 225,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4992,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15615,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17879,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10222,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10990,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11768,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7088,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9417,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9065,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11292,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13125,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15138,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145554,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8425,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12131,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6348,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12442,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15914,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15507,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5839,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33239,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28812,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1050,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2467,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2661,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1519,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1529,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1726,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1517,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1524,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1720,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1723,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1427,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2197,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4068,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1697,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2238,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1415,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1084,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1165,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1421,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 532,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4135,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3611,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3584,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13852,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1123239,
            "range": "± 5332",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4262,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4432,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4601,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 7950,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 7968,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11876,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10428,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7900,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2326146,
            "range": "± 2663",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1043924,
            "range": "± 3351",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3711,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 3864,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3460,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2851,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4145,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5991,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 577,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 714309,
            "range": "± 4351",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 594609,
            "range": "± 3309",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "5002b9b8e40708952f10ca238abb5bb0d7ecaabc",
          "message": "Bump webpack-dev-server from 4.9.1 to 4.9.2 (#2105)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.9.1 to 4.9.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.9.2</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.1...v4.9.2\">4.9.2</a> (2022-06-06)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add <code>@types/serve-static</code> to dependencies (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4468\">#4468</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/af83deb199dc1d8cae4365ec2c5acf07e29358df\">af83deb</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.1...v4.9.2\">4.9.2</a> (2022-06-06)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>add <code>@types/serve-static</code> to dependencies (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4468\">#4468</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/af83deb199dc1d8cae4365ec2c5acf07e29358df\">af83deb</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/297f8f0417d9a852eaff9bf59b9ef418209be1bf\"><code>297f8f0</code></a> chore(release): 4.9.2</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/af83deb199dc1d8cae4365ec2c5acf07e29358df\"><code>af83deb</code></a> fix: add <code>@types/serve-static</code> to dependencies (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4468\">#4468</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/07aaa4533b5d504db7e170cc3fa9e63cf115dc68\"><code>07aaa45</code></a> chore(deps-dev): bump typescript from 4.7.2 to 4.7.3 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4474\">#4474</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/8b18bd1146a88dea26dc302889f5aac0eb76d3c3\"><code>8b18bd1</code></a> chore(deps): bump colorette from 2.0.16 to 2.0.17 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4473\">#4473</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/4ee117c4217845f1a031b4dd80b11bb561e6d956\"><code>4ee117c</code></a> chore(deps-dev): bump webpack from 5.72.1 to 5.73.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4472\">#4472</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/cb1393643e713f499fdd2afa9cc37fc1081c8781\"><code>cb13936</code></a> chore(deps-dev): bump core-js from 3.22.7 to 3.22.8 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4471\">#4471</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/341dc605515e33af9d0fe5f583043e9fec0fdb86\"><code>341dc60</code></a> chore(deps-dev): bump lint-staged from 12.4.3 to 12.5.0 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4470\">#4470</a>)</li>\n<li>See full diff in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.1...v4.9.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.9.1&new-version=4.9.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-07T08:45:09Z",
          "tree_id": "103c64c4307beed78669ac187495d46644da8bc5",
          "url": "https://github.com/boa-dev/boa/commit/5002b9b8e40708952f10ca238abb5bb0d7ecaabc"
        },
        "date": 1654593683531,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 273,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5251,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16917,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19358,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11202,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11867,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12548,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7500,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10013,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9862,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12034,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13971,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16578,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 159750,
            "range": "± 2681",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9077,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13020,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6754,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13595,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17292,
            "range": "± 256",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17192,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6412,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35927,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31016,
            "range": "± 468",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1271,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2874,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3084,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1765,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1772,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2047,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1794,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1808,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2031,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2031,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1701,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2674,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4810,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2026,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2659,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1680,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1170,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1211,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1575,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 642,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5463,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4755,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4885,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18869,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1536041,
            "range": "± 9716",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5855,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6088,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6268,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10877,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10872,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14094,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14190,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9536,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3161106,
            "range": "± 16576",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1416806,
            "range": "± 7572",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5039,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5245,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4689,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3842,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4968,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7070,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 777,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 850170,
            "range": "± 13592",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 801268,
            "range": "± 15141",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "1dbd31e2b7ca7994c856ee20b9dfb840ab19e01e",
          "message": "Added changelog, updated dependencies, bumped version number for 0.15 (#2102)\n\nThis Pull Request bumps the version number to 0.15, adds the changelog for this new versions and updates all dependencies to the latest versions.",
          "timestamp": "2022-06-10T14:42:52Z",
          "tree_id": "d6c478c9088c68ce08e27e6cc18c748ed84f0a37",
          "url": "https://github.com/boa-dev/boa/commit/1dbd31e2b7ca7994c856ee20b9dfb840ab19e01e"
        },
        "date": 1654874617723,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 285,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5937,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19515,
            "range": "± 1531",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 22029,
            "range": "± 701",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12550,
            "range": "± 718",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13346,
            "range": "± 754",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14453,
            "range": "± 559",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8591,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11581,
            "range": "± 909",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11298,
            "range": "± 516",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14048,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16397,
            "range": "± 761",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19391,
            "range": "± 947",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 185271,
            "range": "± 7500",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10563,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 15306,
            "range": "± 1100",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7893,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15102,
            "range": "± 866",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19185,
            "range": "± 1335",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18981,
            "range": "± 1686",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7319,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 41163,
            "range": "± 1864",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 35969,
            "range": "± 1055",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1509,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3402,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3626,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2048,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2122,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2322,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2118,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2087,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2325,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2356,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1961,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3002,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5231,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2319,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2955,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1963,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1427,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1507,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1853,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 715,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6189,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5521,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5394,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20498,
            "range": "± 793",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1777081,
            "range": "± 50371",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6672,
            "range": "± 310",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6831,
            "range": "± 471",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6952,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11559,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11486,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15500,
            "range": "± 550",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15508,
            "range": "± 750",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10482,
            "range": "± 721",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3008661,
            "range": "± 79378",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1340903,
            "range": "± 43595",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5567,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5771,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5181,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4242,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5463,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7930,
            "range": "± 572",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 746,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 862290,
            "range": "± 25086",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 803656,
            "range": "± 30686",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia Moraza",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia Moraza",
            "username": "Razican"
          },
          "distinct": true,
          "id": "9e81103cdf73893abc8ec3894c0bcf3c51329b0c",
          "message": "Fixing the GitHub release workflow",
          "timestamp": "2022-06-11T00:20:12+02:00",
          "tree_id": "b6b1ab7f5a00a15fbcf65db16ac6b152ded9ba7a",
          "url": "https://github.com/boa-dev/boa/commit/9e81103cdf73893abc8ec3894c0bcf3c51329b0c"
        },
        "date": 1654900950667,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 281,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5442,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17608,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20111,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11338,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12046,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12617,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7847,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10469,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10064,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12462,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14628,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17050,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 165165,
            "range": "± 2519",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9342,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13613,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6983,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13951,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17858,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17625,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6492,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36189,
            "range": "± 767",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31339,
            "range": "± 664",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1244,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2870,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3064,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1746,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1790,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2023,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1809,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1788,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1976,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1968,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1718,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2553,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4940,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2007,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2649,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1677,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1174,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1226,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1586,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 647,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5411,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4773,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4861,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19023,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1559805,
            "range": "± 4859",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6080,
            "range": "± 385",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6089,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6289,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10294,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10383,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14086,
            "range": "± 557",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13947,
            "range": "± 2093",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9791,
            "range": "± 850",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3253075,
            "range": "± 184109",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1485369,
            "range": "± 76531",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5115,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5522,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5063,
            "range": "± 449",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4101,
            "range": "± 217",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5129,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7696,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 802,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 876106,
            "range": "± 34388",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 834227,
            "range": "± 58350",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "9025c36b1b7bf5eb3b614206d9fb935b39ea3c10",
          "message": "Remove unnecessary `Trace` and `Finalize` implementations from AST (#2103)\n\nThis Pull Request fchanges the following:\r\n\r\n- Remove unnecessary `Trace` and `Finalize` implementations from AST\r\n- Add `#[unsafe_ignore_trace]` to parameters stored in `CodeBlock`\r\n- Remove unused `RcStatementList` type\r\n\r\nRelates to #1615",
          "timestamp": "2022-06-10T23:03:44Z",
          "tree_id": "dfdfc68bf76bd52b8a12debf9d97975566119acb",
          "url": "https://github.com/boa-dev/boa/commit/9025c36b1b7bf5eb3b614206d9fb935b39ea3c10"
        },
        "date": 1654904203009,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 268,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5894,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18660,
            "range": "± 1319",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21162,
            "range": "± 1048",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12206,
            "range": "± 634",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13129,
            "range": "± 862",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14500,
            "range": "± 1030",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8293,
            "range": "± 478",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11467,
            "range": "± 857",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10501,
            "range": "± 704",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13666,
            "range": "± 912",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15808,
            "range": "± 1075",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17932,
            "range": "± 1100",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 189390,
            "range": "± 7253",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10186,
            "range": "± 391",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14541,
            "range": "± 1297",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7398,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14558,
            "range": "± 1165",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18732,
            "range": "± 853",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18789,
            "range": "± 1074",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6913,
            "range": "± 427",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 39438,
            "range": "± 3459",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34285,
            "range": "± 1886",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1510,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3284,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3531,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2044,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2127,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2327,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2084,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2088,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2308,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2317,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1937,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2970,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5052,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2267,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2876,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1908,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1364,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1445,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1844,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 706,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6167,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5297,
            "range": "± 461",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5407,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19391,
            "range": "± 1025",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1693797,
            "range": "± 76997",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6633,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6866,
            "range": "± 433",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6884,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11326,
            "range": "± 570",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11627,
            "range": "± 685",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15567,
            "range": "± 1113",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15485,
            "range": "± 1128",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10245,
            "range": "± 477",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3057519,
            "range": "± 150258",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1363290,
            "range": "± 53461",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5682,
            "range": "± 444",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6022,
            "range": "± 1059",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5309,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4041,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5363,
            "range": "± 280",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7871,
            "range": "± 539",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 711,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 841190,
            "range": "± 45366",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 820281,
            "range": "± 53911",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "cyb.ai.815@gmail.com",
            "name": "cybai (Haku)",
            "username": "CYBAI"
          },
          "committer": {
            "email": "cyb.ai.815@gmail.com",
            "name": "cybai (Haku)",
            "username": "CYBAI"
          },
          "distinct": false,
          "id": "b7e84d4c7de80359931422e16c18e45a4c712416",
          "message": "Implement `Object.prototype.__defineGetter__` (#2108)\n\nThis Pull Request fixes part of #2067.\r\n\r\nIt introduces the legacy `Object.prototype.__defineGetter__` function.",
          "timestamp": "2022-06-11T00:05:27Z",
          "tree_id": "8dd651a8e6368271e9c046e721cbecffc5278da3",
          "url": "https://github.com/boa-dev/boa/commit/b7e84d4c7de80359931422e16c18e45a4c712416"
        },
        "date": 1654907879798,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 195,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4348,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13485,
            "range": "± 582",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15599,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9119,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9778,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10485,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6234,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 8246,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7982,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 9973,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11565,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13255,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 127967,
            "range": "± 1254",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7255,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10482,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5489,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 10934,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14116,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 13872,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5187,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29018,
            "range": "± 959",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25296,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 963,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2276,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2424,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1372,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1394,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1565,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1390,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1418,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1552,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1545,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1305,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1985,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3698,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1558,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2001,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1270,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 956,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1010,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1263,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 487,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4188,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3697,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3723,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 13996,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1177056,
            "range": "± 21176",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4470,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4614,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 4824,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8190,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8196,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 10810,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 10747,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7124,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2272935,
            "range": "± 12176",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1025919,
            "range": "± 20037",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3848,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4043,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3589,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2919,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3790,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5429,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 573,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 626981,
            "range": "± 5649",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 589822,
            "range": "± 3837",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "wusyong9104@gmail.com",
            "name": "Ngo Iok Ui (Wu Yu Wei)",
            "username": "wusyong"
          },
          "committer": {
            "email": "wusyong9104@gmail.com",
            "name": "Ngo Iok Ui (Wu Yu Wei)",
            "username": "wusyong"
          },
          "distinct": false,
          "id": "0eb771d343efb0a9cded2e42d671014957d521f2",
          "message": "Implement `Object.prototype.__defineSetter__` (#2109)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccesary.\r\n--->\r\n\r\nThis Pull Request fixes part of https://github.com/boa-dev/boa/issues/2067.\r\n\r\nIt adds the legacy `Object.prototype.__defineSetter__` function.",
          "timestamp": "2022-06-11T07:45:51Z",
          "tree_id": "1ddbdbf10125d26689d04113e9e64d366b5c8355",
          "url": "https://github.com/boa-dev/boa/commit/0eb771d343efb0a9cded2e42d671014957d521f2"
        },
        "date": 1654935573567,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 241,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5219,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16348,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18801,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11026,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11895,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12655,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7677,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10056,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9718,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11982,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14059,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15952,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151471,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8787,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12768,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6657,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13307,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17084,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16714,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5955,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34851,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30464,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1115,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2714,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2856,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1619,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1636,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1872,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1693,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1680,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1869,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1855,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1557,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2402,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4094,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1846,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2357,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1512,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1129,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1176,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1496,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 520,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4938,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4369,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4354,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15823,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1378413,
            "range": "± 5318",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5146,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5270,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5306,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9090,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9134,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12108,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12188,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8478,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2512101,
            "range": "± 7623",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1144189,
            "range": "± 6058",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4409,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4701,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4147,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3482,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4515,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6444,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 506,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 740002,
            "range": "± 2661",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 696770,
            "range": "± 6941",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "cyb.ai.815@gmail.com",
            "name": "cybai (Haku)",
            "username": "CYBAI"
          },
          "committer": {
            "email": "cyb.ai.815@gmail.com",
            "name": "cybai (Haku)",
            "username": "CYBAI"
          },
          "distinct": false,
          "id": "637ffcfd78e3020fc5719a5b874375290b2dafe2",
          "message": "Fix spec links for some object operation methods (#2111)\n\nIt changes the following:\r\n\r\nFix spec links for \r\n- `create_data_property`\r\n- `create_data_property_or_throw`\r\n- `delete_property_or_throw`",
          "timestamp": "2022-06-11T15:11:19Z",
          "tree_id": "4f9da50f4b1542ac42839aee4d1dac073f97ae73",
          "url": "https://github.com/boa-dev/boa/commit/637ffcfd78e3020fc5719a5b874375290b2dafe2"
        },
        "date": 1654962069934,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 229,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5006,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15262,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17565,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10177,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10977,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11670,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7020,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9278,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8989,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11209,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13021,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14986,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143849,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8350,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11955,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6316,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12271,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15939,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15621,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5836,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32528,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28377,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1079,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2512,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2665,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1506,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1552,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1729,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1563,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1564,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1733,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1730,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1459,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2235,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4180,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1713,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2207,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1428,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1082,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1145,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1425,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 550,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4614,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4104,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4165,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15851,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1317395,
            "range": "± 2100",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5055,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5187,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5366,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8844,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8848,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11809,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11796,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8007,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2575642,
            "range": "± 4905",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1164229,
            "range": "± 6928",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4320,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4567,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4061,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3277,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4347,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6136,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 669,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 714560,
            "range": "± 3358",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 673696,
            "range": "± 3461",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "cyb.ai.815@gmail.com",
            "name": "cybai (Haku)",
            "username": "CYBAI"
          },
          "committer": {
            "email": "cyb.ai.815@gmail.com",
            "name": "cybai (Haku)",
            "username": "CYBAI"
          },
          "distinct": false,
          "id": "220af1c375320f9b7cfcde057a4ded878426dd5f",
          "message": "Implement getter and setter of Object.prototype.__proto__ (#2110)\n\nThis Pull Request fixes part of #2067.\r\n\r\nIt changes the following:\r\n\r\n- implemented getter of `Object.prototype.__proto__`\r\n- implemented setter of `Object.prototype.__proto__`\r\n\r\nI've tried to run tests with `test262/test/built-ins/Object/prototype/__proto__/` and all tests under that directory are pass now 🙏 \r\n\r\n<details>\r\n\r\n<summary>Toggle to see __proto__ test status</summary>\r\n\r\n```\r\n   Compiling boa_engine v0.15.0 (/codespace/rust/boa/boa_engine)\r\n   Compiling boa_tester v0.15.0 (/codespace/rust/boa/boa_tester)\r\n    Finished release [optimized] target(s) in 2m 57s\r\n     Running `target/release/boa_tester run -vv -d -s /codespace/rust/boa/test262/test/built-ins/Object/prototype/__proto__/`\r\nLoading the test suite...\r\nTest suite loaded, starting tests...\r\nSuite __proto__:\r\n`get-fn-name` (strict mode): starting\r\n`get-fn-name` (strict mode): Passed\r\n`get-fn-name`: starting\r\n`get-fn-name`: Passed\r\n`set-cycle-shadowed` (strict mode): starting\r\n`set-cycle-shadowed` (strict mode): Passed\r\n`set-cycle-shadowed`: starting\r\n`set-cycle-shadowed`: Passed\r\n`set-abrupt` (strict mode): starting\r\n`set-abrupt` (strict mode): Passed\r\n`set-abrupt`: starting\r\n`set-abrupt`: Passed\r\n`get-to-obj-abrupt` (strict mode): starting\r\n`get-to-obj-abrupt` (strict mode): Passed\r\n`get-to-obj-abrupt`: starting\r\n`get-to-obj-abrupt`: Passed\r\n`set-fn-name` (strict mode): starting\r\n`set-fn-name` (strict mode): Passed\r\n`set-fn-name`: starting\r\n`set-fn-name`: Passed\r\n`get-ordinary-obj` (strict mode): starting\r\n`get-ordinary-obj` (strict mode): Passed\r\n`get-ordinary-obj`: starting\r\n`get-ordinary-obj`: Passed\r\n`set-non-object` (strict mode): starting\r\n`set-non-object` (strict mode): Passed\r\n`set-non-object`: starting\r\n`set-non-object`: Passed\r\n`set-invalid-value` (strict mode): starting\r\n`set-invalid-value` (strict mode): Passed\r\n`set-invalid-value`: starting\r\n`set-invalid-value`: Passed\r\n`set-immutable` (strict mode): starting\r\n`set-immutable` (strict mode): Passed\r\n`set-immutable`: starting\r\n`set-immutable`: Passed\r\n`set-non-obj-coercible` (strict mode): starting\r\n`set-non-obj-coercible` (strict mode): Passed\r\n`set-non-obj-coercible`: starting\r\n`set-non-obj-coercible`: Passed\r\n`set-cycle` (strict mode): starting\r\n`set-cycle` (strict mode): Passed\r\n`set-cycle`: starting\r\n`set-cycle`: Passed\r\n`prop-desc` (strict mode): starting\r\n`prop-desc` (strict mode): Passed\r\n`prop-desc`: starting\r\n`prop-desc`: Passed\r\n`get-abrupt` (strict mode): starting\r\n`get-abrupt` (strict mode): Passed\r\n`get-abrupt`: starting\r\n`get-abrupt`: Passed\r\n`set-ordinary-obj` (strict mode): starting\r\n`set-ordinary-obj` (strict mode): Passed\r\n`set-ordinary-obj`: starting\r\n`set-ordinary-obj`: Passed\r\n`set-non-extensible` (strict mode): starting\r\n`set-non-extensible` (strict mode): Passed\r\n`set-non-extensible`: starting\r\n`set-non-extensible`: Passed\r\n\r\nSuite __proto__ results: total: 30, passed: 30, ignored: 0, failed: 0 (panics: 0), conformance: 100.00%\r\n\r\nResults:\r\nTotal tests: 30\r\nPassed tests: 30\r\nIgnored tests: 0\r\nFailed tests: 0 (panics: 0)\r\nConformance: 100.00%\r\n```\r\n\r\n</details>",
          "timestamp": "2022-06-11T15:20:42Z",
          "tree_id": "4a62bab5e080989f10a7fb87e0008b3586248186",
          "url": "https://github.com/boa-dev/boa/commit/220af1c375320f9b7cfcde057a4ded878426dd5f"
        },
        "date": 1654962644604,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 256,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4400,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 14268,
            "range": "± 828",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 16447,
            "range": "± 985",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9693,
            "range": "± 545",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10772,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11295,
            "range": "± 624",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6215,
            "range": "± 297",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9043,
            "range": "± 527",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8119,
            "range": "± 410",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10068,
            "range": "± 670",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 11809,
            "range": "± 593",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 13454,
            "range": "± 727",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 137485,
            "range": "± 9933",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 7786,
            "range": "± 495",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 10923,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 5719,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11378,
            "range": "± 648",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 14769,
            "range": "± 855",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14327,
            "range": "± 726",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5371,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 29814,
            "range": "± 1479",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 25753,
            "range": "± 1365",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1097,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2525,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2566,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1604,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1565,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1734,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1617,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1573,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1772,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1925,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1473,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2260,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4100,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1716,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2329,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1456,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 980,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1021,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1343,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 548,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4699,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4044,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4078,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15562,
            "range": "± 951",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1300202,
            "range": "± 71507",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4929,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5107,
            "range": "± 247",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5240,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8654,
            "range": "± 565",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9267,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11541,
            "range": "± 548",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11613,
            "range": "± 539",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7872,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2503055,
            "range": "± 113322",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1266671,
            "range": "± 45547",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4204,
            "range": "± 234",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4458,
            "range": "± 274",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4273,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3177,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4125,
            "range": "± 224",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6095,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 655,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 685668,
            "range": "± 30711",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 665750,
            "range": "± 35940",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "james@sorck.net",
            "name": "Sorck"
          },
          "committer": {
            "email": "james@sorck.net",
            "name": "Sorck"
          },
          "distinct": false,
          "id": "c9b891fbfd8ebc7507308c72cda152a1d1ebf6ad",
          "message": "Implement Object.prototype.__lookupGetter__ (#2112)\n\nThis Pull Request fixes part of #2067\r\n\r\nIt changes the following:\r\n\r\n- Implement `Object.prototype.__lookupGetter__`\r\n\r\nThis passes all tests from `./test262/test/built-ins/Object/prototype/__lookupGetter__/`\r\n\r\n```\r\nLoading the test suite...\r\nTest suite loaded, starting tests...\r\nSuite __lookupGetter__:\r\n`lookup-own-get-err` (strict mode): starting\r\n`lookup-own-get-err` (strict mode): Passed\r\n`lookup-own-get-err`: starting\r\n`lookup-own-get-err`: Passed\r\n`length` (strict mode): starting\r\n`length` (strict mode): Passed\r\n`length`: starting\r\n`length`: Passed\r\n`lookup-proto-proto-err` (strict mode): starting\r\n`lookup-proto-proto-err` (strict mode): Passed\r\n`lookup-proto-proto-err`: starting\r\n`lookup-proto-proto-err`: Passed\r\n`lookup-not-found` (strict mode): starting\r\n`lookup-not-found` (strict mode): Passed\r\n`lookup-not-found`: starting\r\n`lookup-not-found`: Passed\r\n`lookup-own-acsr-wo-getter` (strict mode): starting\r\n`lookup-own-acsr-wo-getter` (strict mode): Passed\r\n`lookup-own-acsr-wo-getter`: starting\r\n`lookup-own-acsr-wo-getter`: Passed\r\n`name` (strict mode): starting\r\n`name` (strict mode): Passed\r\n`name`: starting\r\n`name`: Passed\r\n`lookup-own-acsr-w-getter` (strict mode): starting\r\n`lookup-own-acsr-w-getter` (strict mode): Passed\r\n`lookup-own-acsr-w-getter`: starting\r\n`lookup-own-acsr-w-getter`: Passed\r\n`lookup-own-proto-err` (strict mode): starting\r\n`lookup-own-proto-err` (strict mode): Passed\r\n`lookup-own-proto-err`: starting\r\n`lookup-own-proto-err`: Passed\r\n`lookup-proto-data` (strict mode): starting\r\n`lookup-proto-data` (strict mode): Passed\r\n`lookup-proto-data`: starting\r\n`lookup-proto-data`: Passed\r\n`lookup-proto-acsr-w-getter` (strict mode): starting\r\n`lookup-proto-acsr-w-getter` (strict mode): Passed\r\n`lookup-proto-acsr-w-getter`: starting\r\n`lookup-proto-acsr-w-getter`: Passed\r\n`lookup-own-data` (strict mode): starting\r\n`lookup-own-data` (strict mode): Passed\r\n`lookup-own-data`: starting\r\n`lookup-own-data`: Passed\r\n`lookup-proto-acsr-wo-getter` (strict mode): starting\r\n`lookup-proto-acsr-wo-getter` (strict mode): Passed\r\n`lookup-proto-acsr-wo-getter`: starting\r\n`lookup-proto-acsr-wo-getter`: Passed\r\n`lookup-proto-get-err` (strict mode): starting\r\n`lookup-proto-get-err` (strict mode): Passed\r\n`lookup-proto-get-err`: starting\r\n`lookup-proto-get-err`: Passed\r\n`prop-desc` (strict mode): starting\r\n`prop-desc` (strict mode): Passed\r\n`prop-desc`: starting\r\n`prop-desc`: Passed\r\n`key-invalid` (strict mode): starting\r\n`key-invalid` (strict mode): Passed\r\n`key-invalid`: starting\r\n`key-invalid`: Passed\r\n`this-non-obj` (strict mode): starting\r\n`this-non-obj` (strict mode): Passed\r\n`this-non-obj`: starting\r\n`this-non-obj`: Passed\r\n\r\nSuite __lookupGetter__ results: total: 32, passed: 32, ignored: 0, failed: 0 (panics: 0), conformance: 100.00%\r\n\r\nResults:\r\nTotal tests: 32\r\nPassed tests: 32\r\nIgnored tests: 0\r\nFailed tests: 0 (panics: 0)\r\nConformance: 100.00%\r\n```",
          "timestamp": "2022-06-11T16:24:46Z",
          "tree_id": "cd40a574d11e6787272c69b411120ab2b0d045da",
          "url": "https://github.com/boa-dev/boa/commit/c9b891fbfd8ebc7507308c72cda152a1d1ebf6ad"
        },
        "date": 1654966763043,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 267,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5209,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16904,
            "range": "± 428",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19004,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11234,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12334,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12907,
            "range": "± 189",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7557,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9964,
            "range": "± 246",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9780,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12160,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13982,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16228,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 161923,
            "range": "± 3423",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8867,
            "range": "± 200",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12893,
            "range": "± 359",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6575,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13729,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17612,
            "range": "± 393",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17210,
            "range": "± 432",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6332,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36341,
            "range": "± 495",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31322,
            "range": "± 551",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1246,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2917,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3126,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1783,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1801,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1921,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1811,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1801,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1984,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1914,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1724,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2633,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4877,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2023,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2601,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1671,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1118,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1171,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1562,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 641,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5486,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4765,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4927,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19074,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1547140,
            "range": "± 11218",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5752,
            "range": "± 183",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6056,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6448,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10745,
            "range": "± 245",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10724,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14248,
            "range": "± 312",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14150,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9659,
            "range": "± 211",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3043221,
            "range": "± 59034",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1375358,
            "range": "± 20888",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5023,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5248,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4835,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3867,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4925,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7347,
            "range": "± 156",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 768,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 855699,
            "range": "± 8920",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 807544,
            "range": "± 4090",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "james@sorck.net",
            "name": "Sorck"
          },
          "committer": {
            "email": "james@sorck.net",
            "name": "Sorck"
          },
          "distinct": false,
          "id": "6477f61fb18afd212b92a97d57ee5bde1b701cc1",
          "message": "Implement Object.prototype.__lookupSetter__ (#2113)\n\nThis Pull Request closes #2067\r\n\r\nIt changes the following:\r\n\r\n- Implement `Object.prototype.__lookupSetter__`\r\n\r\nThis passes all tests from `./test262/test/built-ins/Object/prototype/__lookupSetter__/`\r\n\r\n```\r\nLoading the test suite...\r\nTest suite loaded, starting tests...\r\nSuite __lookupSetter__:\r\n`lookup-own-get-err` (strict mode): starting\r\n`lookup-own-get-err` (strict mode): Passed\r\n`lookup-own-get-err`: starting\r\n`lookup-own-get-err`: Passed\r\n`length` (strict mode): starting\r\n`length` (strict mode): Passed\r\n`length`: starting\r\n`length`: Passed\r\n`lookup-proto-proto-err` (strict mode): starting\r\n`lookup-proto-proto-err` (strict mode): Passed\r\n`lookup-proto-proto-err`: starting\r\n`lookup-proto-proto-err`: Passed\r\n`lookup-own-acsr-wo-setter` (strict mode): starting\r\n`lookup-own-acsr-wo-setter` (strict mode): Passed\r\n`lookup-own-acsr-wo-setter`: starting\r\n`lookup-own-acsr-wo-setter`: Passed\r\n`lookup-not-found` (strict mode): starting\r\n`lookup-not-found` (strict mode): Passed\r\n`lookup-not-found`: starting\r\n`lookup-not-found`: Passed\r\n`lookup-proto-acsr-wo-setter` (strict mode): starting\r\n`lookup-proto-acsr-wo-setter` (strict mode): Passed\r\n`lookup-proto-acsr-wo-setter`: starting\r\n`lookup-proto-acsr-wo-setter`: Passed\r\n`lookup-proto-acsr-w-setter` (strict mode): starting\r\n`lookup-proto-acsr-w-setter` (strict mode): Passed\r\n`lookup-proto-acsr-w-setter`: starting\r\n`lookup-proto-acsr-w-setter`: Passed\r\n`name` (strict mode): starting\r\n`name` (strict mode): Passed\r\n`name`: starting\r\n`name`: Passed\r\n`lookup-own-acsr-w-setter` (strict mode): starting\r\n`lookup-own-acsr-w-setter` (strict mode): Passed\r\n`lookup-own-acsr-w-setter`: starting\r\n`lookup-own-acsr-w-setter`: Passed\r\n`lookup-own-proto-err` (strict mode): starting\r\n`lookup-own-proto-err` (strict mode): Passed\r\n`lookup-own-proto-err`: starting\r\n`lookup-own-proto-err`: Passed\r\n`lookup-proto-data` (strict mode): starting\r\n`lookup-proto-data` (strict mode): Passed\r\n`lookup-proto-data`: starting\r\n`lookup-proto-data`: Passed\r\n`lookup-own-data` (strict mode): starting\r\n`lookup-own-data` (strict mode): Passed\r\n`lookup-own-data`: starting\r\n`lookup-own-data`: Passed\r\n`lookup-proto-get-err` (strict mode): starting\r\n`lookup-proto-get-err` (strict mode): Passed\r\n`lookup-proto-get-err`: starting\r\n`lookup-proto-get-err`: Passed\r\n`prop-desc` (strict mode): starting\r\n`prop-desc` (strict mode): Passed\r\n`prop-desc`: starting\r\n`prop-desc`: Passed\r\n`key-invalid` (strict mode): starting\r\n`key-invalid` (strict mode): Passed\r\n`key-invalid`: starting\r\n`key-invalid`: Passed\r\n`this-non-obj` (strict mode): starting\r\n`this-non-obj` (strict mode): Passed\r\n`this-non-obj`: starting\r\n`this-non-obj`: Passed\r\n\r\nSuite __lookupSetter__ results: total: 32, passed: 32, ignored: 0, failed: 0 (panics: 0), conformance: 100.00%\r\n\r\nResults:\r\nTotal tests: 32\r\nPassed tests: 32\r\nIgnored tests: 0\r\nFailed tests: 0 (panics: 0)\r\nConformance: 100.00%\r\n```",
          "timestamp": "2022-06-11T18:19:43Z",
          "tree_id": "0685349ba4d3466f8f47b28f4b56ba279e5a3249",
          "url": "https://github.com/boa-dev/boa/commit/6477f61fb18afd212b92a97d57ee5bde1b701cc1"
        },
        "date": 1654973595431,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 227,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4983,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15280,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17589,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10320,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11060,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11804,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7079,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9345,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9008,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11270,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13000,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15065,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142959,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8302,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11856,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6351,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12233,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15840,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15516,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5870,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32558,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28465,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1079,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2556,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2689,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1526,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1540,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1734,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1534,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1541,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1698,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1710,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1450,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2229,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4155,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1721,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2213,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1438,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1081,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1141,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1428,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 551,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4702,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4147,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4214,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15878,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1332110,
            "range": "± 4511",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5082,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5191,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5386,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9252,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9179,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12169,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12036,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8065,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2559746,
            "range": "± 31156",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1165362,
            "range": "± 3343",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4310,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4544,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4101,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3288,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4265,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6078,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 647,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 711999,
            "range": "± 3978",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 670843,
            "range": "± 3190",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "8af90a7d783f47c2620596923bdac29be4d456bb",
          "message": "Only run benchmarks on PRs when a label is set (#2114)\n\nThis changes our ci benchmarks to only run when the label `run-benchmark` is set on the PR.\r\n\r\nThe motivation is to reduce the time waiting on benchmarks to run while working on PRs. Also this saves some ci minutes which is always good.\r\nWhen we spot changes that we suspect impact performance, we can add the `run-benchmark` label to the PR and the benchmarks will run.",
          "timestamp": "2022-06-12T11:54:26Z",
          "tree_id": "a87ed0cf6cbdc3afa2e66f684aa04d55d24623d8",
          "url": "https://github.com/boa-dev/boa/commit/8af90a7d783f47c2620596923bdac29be4d456bb"
        },
        "date": 1655036638939,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 224,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4914,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15370,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17836,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 9117,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 9834,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11848,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6243,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9368,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 7990,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11245,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13030,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15040,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143525,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8256,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11887,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6283,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12317,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15876,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15588,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5849,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32499,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28272,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1074,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2525,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2681,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1502,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1540,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1730,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1568,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1546,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1715,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1710,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1458,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2242,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4163,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1518,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1964,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1252,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 954,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1006,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1424,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 547,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4719,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4093,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4233,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15866,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1317933,
            "range": "± 6250",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5093,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5212,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5416,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9197,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9202,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12070,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12083,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8035,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2568921,
            "range": "± 3764",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1162285,
            "range": "± 10386",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4347,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4569,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4065,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3268,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4364,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6090,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 647,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 712549,
            "range": "± 3993",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 666206,
            "range": "± 3398",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "0e0ee49f95ae2d6c351d7009c5618a4bce9cf68b",
          "message": "Bump webpack-cli from 4.9.2 to 4.10.0 (#2118)\n\nBumps [webpack-cli](https://github.com/webpack/webpack-cli) from 4.9.2 to 4.10.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-cli/releases\">webpack-cli's releases</a>.</em></p>\n<blockquote>\n<h2>v4.10.0</h2>\n<h1><a href=\"https://github.com/webpack/webpack-cli/compare/webpack-cli@4.9.2...webpack-cli@4.10.0\">4.10.0</a> (2022-06-13)</h1>\n<h3>Bug Fixes</h3>\n<ul>\n<li>changeTime is already in milliseconds (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3198\">#3198</a>) (<a href=\"https://github.com/webpack/webpack-cli/commit/d390d32fe0f2491c5cc3a8dfae3ccc3962a5911b\">d390d32</a>)</li>\n<li>improve parsing of <code>--env</code> flag (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3286\">#3286</a>) (<a href=\"https://github.com/webpack/webpack-cli/commit/402c0fe9d4c09e75b9abec3bf44df430f4b62dff\">402c0fe</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>added types (<a href=\"https://github.com/webpack/webpack-cli/commit/8ec1375092a6f9676e82fa4231dd88b1016c2302\">8ec1375</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-cli/blob/master/CHANGELOG.md\">webpack-cli's changelog</a>.</em></p>\n<blockquote>\n<h1><a href=\"https://github.com/webpack/webpack-cli/compare/webpack-cli@4.9.2...webpack-cli@4.10.0\">4.10.0</a> (2022-06-13)</h1>\n<h3>Bug Fixes</h3>\n<ul>\n<li>changeTime is already in milliseconds (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3198\">#3198</a>) (<a href=\"https://github.com/webpack/webpack-cli/commit/d390d32fe0f2491c5cc3a8dfae3ccc3962a5911b\">d390d32</a>)</li>\n<li>improve parsing of <code>--env</code> flag (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3286\">#3286</a>) (<a href=\"https://github.com/webpack/webpack-cli/commit/402c0fe9d4c09e75b9abec3bf44df430f4b62dff\">402c0fe</a>)</li>\n</ul>\n<h3>Features</h3>\n<ul>\n<li>added types (<a href=\"https://github.com/webpack/webpack-cli/commit/8ec1375092a6f9676e82fa4231dd88b1016c2302\">8ec1375</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/20882d463450d010bb76e0824fe555e9785e9561\"><code>20882d4</code></a> chore(release): publish new version</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/22f013b0f186657a290a692bd0d3b5d064285936\"><code>22f013b</code></a> docs: remove redundant link (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3292\">#3292</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/3e1df05713731dbb16cf58acd6930bcf72848b8d\"><code>3e1df05</code></a> chore: update package.json (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3289\">#3289</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/402c0fe9d4c09e75b9abec3bf44df430f4b62dff\"><code>402c0fe</code></a> fix: improve parsing of <code>--env</code> flag (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3286\">#3286</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/ce7352d840071951350e7916e12852c12756dda7\"><code>ce7352d</code></a> chore: disable length related <code>commitlint</code> rules (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3287\">#3287</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/652cc702168faf4fca57443b0890cf70e71ff71d\"><code>652cc70</code></a> feat: add summary to smoketests (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3288\">#3288</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/1072e3880eb222195e2bd23d432ef3b2488f6b74\"><code>1072e38</code></a> docs: update options (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3285\">#3285</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/6075c636cec206a7becb7c2bd89a0e5d11c8feac\"><code>6075c63</code></a> chore(deps-dev): bump <code>@​types/node</code></li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/979dbade27a45539b0977afed3973d82e63d00e8\"><code>979dbad</code></a> chore(deps-dev): bump typescript-eslint</li>\n<li><a href=\"https://github.com/webpack/webpack-cli/commit/9941274f22df3b55a63826ad01269b14e918246b\"><code>9941274</code></a> chore(deps-dev): bump webpack-dev-server from 4.9.1 to 4.9.2 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-cli/issues/3282\">#3282</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-cli/compare/webpack-cli@4.9.2...webpack-cli@4.10.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-cli&package-manager=npm_and_yarn&previous-version=4.9.2&new-version=4.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-13T18:17:10Z",
          "tree_id": "6685c2661356af2f1575a0da45d761e5c3594519",
          "url": "https://github.com/boa-dev/boa/commit/0e0ee49f95ae2d6c351d7009c5618a4bce9cf68b"
        },
        "date": 1655146298071,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 241,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5290,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16603,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19046,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11146,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11897,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12713,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7647,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10142,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9769,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12237,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14173,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16146,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153261,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8924,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12862,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6734,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13262,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17155,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16872,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6002,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35070,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30618,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1140,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2818,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2888,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1675,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1665,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1883,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1737,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1709,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1864,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1882,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1623,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2471,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4272,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1820,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2400,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1529,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1129,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1179,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1485,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 531,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5198,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4527,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4475,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16241,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1461753,
            "range": "± 4894",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5170,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5355,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5427,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9354,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9335,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12389,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12478,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8878,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2493443,
            "range": "± 3628",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1154801,
            "range": "± 4666",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4600,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4837,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4184,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3479,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4607,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6327,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 507,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 750781,
            "range": "± 8680",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 703599,
            "range": "± 7212",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "4f8398e21f0ea71b4a772cd224a5380e497522c3",
          "message": "Prevent PR benchmarks to run on label changes (#2119)\n\nThis changes the trigger type for PR benchmarks back to the default (`opened`, `synchronize`, `reopened`).  As part of #2114 I added the `labeled` trigger type. This causes the benchmarks to run when the `run-benchmark` label is present and another label is added.\r\nFor example in #2116 I added the `run-benchmark` label while creating the PR. The benchmarks then where triggered six times; one for the PR creation (`opened`) and five times for each label that I initially added to the PR.\r\n\r\nThe only drawback is that the benchmarks are not triggered, when we just add the label, but unfortunately I don't have a clever idea on how to achieve that right now. We will have to add the label and then trigger the run via a `synchronize` (push).",
          "timestamp": "2022-06-13T20:21:46Z",
          "tree_id": "bfbe2ec43a1d63e2c6f2e09fe7f0f9f4299ec440",
          "url": "https://github.com/boa-dev/boa/commit/4f8398e21f0ea71b4a772cd224a5380e497522c3"
        },
        "date": 1655153679870,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 246,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5311,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16397,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18878,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11044,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11906,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12699,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7634,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10004,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9701,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12036,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14096,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16020,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151284,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8988,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12795,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6805,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13139,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17117,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16692,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5856,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34924,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30564,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1125,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2711,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2842,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1586,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1626,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1833,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1667,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1671,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1840,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1821,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1554,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2377,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4137,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1819,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2362,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1511,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1107,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1158,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1483,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 532,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5035,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4335,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4318,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15936,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1386839,
            "range": "± 2990",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5010,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5168,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5239,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9132,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9104,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12094,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12133,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8553,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2489841,
            "range": "± 4973",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1146131,
            "range": "± 8647",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4400,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4662,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4162,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3422,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4508,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6378,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 510,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 740392,
            "range": "± 4643",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 691621,
            "range": "± 9870",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "0454ddec195fcf46a72a59adabc45b754d925176",
          "message": "Execution stack & promises (#2107)\n\nThis PR overrides #1923. It also removes the `queues` dependency added there, and rebases it to the latest `main` branch state.\r\n\r\nIt adds the following:\r\n\r\n- A job queue (in `Context`)\r\n- The constructor [`Promise`](https://tc39.es/ecma262/#sec-promise-executor)\r\n- [`Promise.race`](https://tc39.es/ecma262/#sec-promise.race)\r\n- [`Promise.reject`](https://tc39.es/ecma262/#sec-promise.reject)\r\n- [`Promise.resolve`](https://tc39.es/ecma262/#sec-promise.resolve)\r\n- [`get Promise [ @@species ]`](https://tc39.es/ecma262/#sec-get-promise-@@species)\r\n- [`Promise.prototype [ @@toStringTag ]`](https://tc39.es/ecma262/#sec-promise.prototype-@@tostringtag)\r\n- [`Promise.prototype.then`](https://tc39.es/ecma262/#sec-promise.prototype.then)\r\n- [`Promise.prototype.finally`](https://tc39.es/ecma262/#sec-promise.prototype.finally)\r\n- [`Promise.prototype.catch`](https://tc39.es/ecma262/#sec-promise.prototype.catch)\r\n- The additional needed infrastructure\r\n  - [`PerformPromiseThen ( promise, onFulfilled, onRejected [ , resultCapability ] )`](https://tc39.es/ecma262/#sec-performpromisethen)\r\n  - [`TriggerPromiseReactions ( reactions, argument )`](https://tc39.es/ecma262/#sec-triggerpromisereactions)\r\n  - [`PerformPromiseRace ( iteratorRecord, constructor, resultCapability, promiseResolve )`](https://tc39.es/ecma262/#sec-performpromiserace)\r\n  - [`RejectPromise ( promise, reason )`](https://tc39.es/ecma262/#sec-rejectpromise)\r\n  - [`FulfillPromise ( promise, value )`](https://tc39.es/ecma262/#sec-fulfillpromise)\r\n  - [`IfAbruptRejectPromise ( value, capability )`](https://tc39.es/ecma262/#sec-ifabruptrejectpromise)\r\n  - [`CreateResolvingFunctions ( promise )`](https://tc39.es/ecma262/#sec-createresolvingfunctions)\r\n  - [`NewPromiseCapability ( C )`](https://tc39.es/ecma262/#sec-newpromisecapability)\r\n  - [`NewPromiseReactionJob ( reaction, argument )`](https://tc39.es/ecma262/#sec-newpromisereactionjob)\r\n  - [`NewPromiseResolveThenableJob ( promiseToResolve, thenable, then )`](https://tc39.es/ecma262/#sec-newpromiseresolvethenablejob)\r\n  - [`PromiseResolve ( C, x )`](https://tc39.es/ecma262/#sec-promise-resolve)\r\n- A test case showcasing the run-to-completion semantics.\r\n\r\nAn example program that shows the control flow with this addition is:\r\n```javascript\r\nnew Promise((res, rej) => {\r\n  console.log(\"A\");\r\n  res(undefined);\r\n}).then((_) => console.log(\"B\"));\r\nconsole.log(\"C\");\r\n```\r\nWhich would output:\r\n```\r\nA\r\nC\r\nB\r\n```",
          "timestamp": "2022-06-15T01:25:46Z",
          "tree_id": "1c9ceb47c3f6968edf6c8998847bc27e0d2b167d",
          "url": "https://github.com/boa-dev/boa/commit/0454ddec195fcf46a72a59adabc45b754d925176"
        },
        "date": 1655258899925,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 236,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5137,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16124,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18637,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10804,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11534,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12303,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7599,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9876,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9645,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11881,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13751,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15845,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 150706,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8792,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12619,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6706,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12791,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16431,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16128,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6058,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34519,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30128,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1124,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2731,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2876,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1645,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1650,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1854,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1660,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1665,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1829,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1854,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1547,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2388,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4173,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1895,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2386,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1539,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1117,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1178,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1467,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 537,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5104,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4492,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4289,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15887,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1373268,
            "range": "± 1050",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5037,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5238,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5413,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9247,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9198,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12300,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13070,
            "range": "± 384",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8615,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2492840,
            "range": "± 2614",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1183043,
            "range": "± 10914",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4353,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4582,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4127,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3513,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4540,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6448,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 520,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 746323,
            "range": "± 5182",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 701024,
            "range": "± 5723",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "69f806d99d539d19b88bc509383ef640ae4aa26f",
          "message": "Bump prettier from 2.6.2 to 2.7.0 (#2120)\n\nBumps [prettier](https://github.com/prettier/prettier) from 2.6.2 to 2.7.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/releases\">prettier's releases</a>.</em></p>\n<blockquote>\n<h2>2.7.0</h2>\n<p><a href=\"https://github.com/prettier/prettier/compare/2.7.0...2.7.0\">diff</a></p>\n<p>🔗 <a href=\"https://prettier.io/blog/2022/06/14/2.7.0.html\">Release note</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/blob/main/CHANGELOG.md\">prettier's changelog</a>.</em></p>\n<blockquote>\n<h1>2.7.0</h1>\n<p><a href=\"https://github.com/prettier/prettier/compare/2.6.2...2.7.0\">diff</a></p>\n<p>🔗 <a href=\"https://prettier.io/blog/2022/06/14/2.7.0.html\">Release Notes</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/prettier/prettier/commit/13dcc163300a45ef8a4129d7ae80c9302e81727e\"><code>13dcc16</code></a> Release 2.7.0</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/00ee6fb6f8b7a44600daccb4da74323551566e28\"><code>00ee6fb</code></a> Skip depenedencies install</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/d2bcaea121d244a00100e5c31e2e8ca9fe5f1ced\"><code>d2bcaea</code></a> Throw errors for invalid <code>TSEmptyBodyFunctionExpression</code> node (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12982\">#12982</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/1bec824556673302d67973a8374ee13819f74ab3\"><code>1bec824</code></a> Revert &quot;print as instead of colon for babel-ts parser&quot; (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12995\">#12995</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/2316e2fecd171335fc00f3ec97b7e46cc8964153\"><code>2316e2f</code></a> Update <code>linguist-language</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12994\">#12994</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/e5868ad368d593549408c90f2bd16bc1d76674b0\"><code>e5868ad</code></a> Update changelog</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/fdccc0f48e5bd3a17ae1e3500c1b5c1763c6a368\"><code>fdccc0f</code></a> Add <code>--cache</code> CLI option (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12800\">#12800</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/97bab8f984d86eb91fda654f5351c455152872a2\"><code>97bab8f</code></a> Update <code>angular-estree-parser</code> (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12993\">#12993</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/7f9a08762d1a6d4389bbe9f0e87eb47beddce50d\"><code>7f9a087</code></a> Update dependency flow-parser to v0.180.0 (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12990\">#12990</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/aa1d536e29a55e4647452e87c2fa61c2b8c7d92d\"><code>aa1d536</code></a> Build(deps): Bump tmpl from 1.0.4 to 1.0.5 in /scripts/release (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/12984\">#12984</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/prettier/prettier/compare/2.6.2...2.7.0\">compare view</a></li>\n</ul>\n</details>\n<details>\n<summary>Maintainer changes</summary>\n<p>This version was pushed to npm by <a href=\"https://www.npmjs.com/~prettier-bot\">prettier-bot</a>, a new releaser for prettier since your current version.</p>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=prettier&package-manager=npm_and_yarn&previous-version=2.6.2&new-version=2.7.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-15T01:47:40Z",
          "tree_id": "a2a4dc0416f69025fca70da2fb2f9df56f2e36a0",
          "url": "https://github.com/boa-dev/boa/commit/69f806d99d539d19b88bc509383ef640ae4aa26f"
        },
        "date": 1655259777183,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 227,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4884,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15244,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17772,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10130,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10870,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11715,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7080,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9387,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9193,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11346,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13200,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15043,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142835,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8272,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11934,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6251,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12386,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15759,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15315,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5856,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32907,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28647,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1064,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2512,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2674,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1526,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1550,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1702,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1545,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1553,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1697,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1713,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1451,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2215,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4169,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1719,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2222,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1425,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1087,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1151,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1433,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 543,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4754,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4161,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4176,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15578,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1309831,
            "range": "± 6283",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4960,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5110,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5212,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8826,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8820,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11780,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11679,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8007,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2661448,
            "range": "± 4047",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1201477,
            "range": "± 2892",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4272,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4486,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4031,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3198,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4221,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6138,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 656,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 709582,
            "range": "± 3764",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 669336,
            "range": "± 2877",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7f6d44ea01f1148956e44df7c27e133bf0b81626",
          "message": "Bump wasm-bindgen from 0.2.80 to 0.2.81 (#2123)\n\nBumps [wasm-bindgen](https://github.com/rustwasm/wasm-bindgen) from 0.2.80 to 0.2.81.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rustwasm/wasm-bindgen/blob/main/CHANGELOG.md\">wasm-bindgen's changelog</a>.</em></p>\n<blockquote>\n<h2>0.2.81</h2>\n<p>Released 2022-06-14.</p>\n<p><a href=\"https://github.com/rustwasm/wasm-bindgen/compare/0.2.80...0.2.81\">changes</a></p>\n<hr />\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/062aa5f70a1e8a170d0ae90123ebdeb3242ac782\"><code>062aa5f</code></a> Bump to 0.2.81 (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2935\">#2935</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/ed58b791e7e8cb0bc68c8687b91cea3d0b49499c\"><code>ed58b79</code></a> fix(guide): missing ] (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2933\">#2933</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/3822e671495506ad87cc13e75772e482e3e2e196\"><code>3822e67</code></a> Expose helpers to allow synchronous initialization (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2924\">#2924</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/b7b4ef3fd4300fbcc0606c3bebdaa5f13ec010e8\"><code>b7b4ef3</code></a> Add mediasession api (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2926\">#2926</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/0c7126c9c3d0c4c149f961b5767ed9207a66753d\"><code>0c7126c</code></a> Use <code>bigint</code> instead of <code>BigInt</code> in generated TypeScript (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2925\">#2925</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/a81983b884970778836f7a43ef5ea40f67b8ceb2\"><code>a81983b</code></a> add SubmitEvent to web_sys Event types (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2922\">#2922</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/cbcf3e78ac1e17884cceb855fced173ddde37020\"><code>cbcf3e7</code></a> feat(cli-support): <code>Bindgen</code> - support providing bytes input (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2916\">#2916</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/96eca588e6a647e33bdd3944f0502bb324369ffc\"><code>96eca58</code></a> fix(typescript) Getters correctly define the inner results. (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2909\">#2909</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/6ec0ce1b3fe955d102926da741964329f82e80a3\"><code>6ec0ce1</code></a> test(ci) Remove duplicate actions. (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2918\">#2918</a>)</li>\n<li><a href=\"https://github.com/rustwasm/wasm-bindgen/commit/be961acaca686641fae1aee49bb20924ddba9f45\"><code>be961ac</code></a> feat(cli-support): expose more properties on <code>Output</code> (<a href=\"https://github-redirect.dependabot.com/rustwasm/wasm-bindgen/issues/2913\">#2913</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rustwasm/wasm-bindgen/compare/0.2.80...0.2.81\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=wasm-bindgen&package-manager=cargo&previous-version=0.2.80&new-version=0.2.81)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-16T11:17:23Z",
          "tree_id": "251f3bb7f0f8eaadfd1a9a4f6fd2c40ffb28587d",
          "url": "https://github.com/boa-dev/boa/commit/7f6d44ea01f1148956e44df7c27e133bf0b81626"
        },
        "date": 1655380490678,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 241,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5229,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16376,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18833,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10995,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11747,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12587,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7648,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10123,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9679,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12110,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14118,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16045,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 149565,
            "range": "± 289",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8943,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12717,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6818,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13067,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17024,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16707,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6082,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35056,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30534,
            "range": "± 169",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1111,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2731,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2839,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1626,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1654,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1883,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1651,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1651,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1862,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1855,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1531,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2373,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4133,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1853,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2407,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1507,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1103,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1179,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1475,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 535,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5087,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4439,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4310,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15814,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1409429,
            "range": "± 6760",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4991,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5171,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5285,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9091,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9161,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12141,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12111,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8567,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2480599,
            "range": "± 3223",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1160890,
            "range": "± 2989",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4381,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4645,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4193,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3613,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4512,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6658,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 515,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 749512,
            "range": "± 5065",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 713550,
            "range": "± 13488",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "80e804c8fdedc4081fd0611ef0b23ec71ba8240f",
          "message": "Bump prettier from 2.7.0 to 2.7.1 (#2126)\n\nBumps [prettier](https://github.com/prettier/prettier) from 2.7.0 to 2.7.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/releases\">prettier's releases</a>.</em></p>\n<blockquote>\n<h2>2.7.1</h2>\n<p>🔗 <a href=\"https://github.com/prettier/prettier/blob/main/CHANGELOG.md#271\">Changelog</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/prettier/prettier/blob/main/CHANGELOG.md\">prettier's changelog</a>.</em></p>\n<blockquote>\n<h1>2.7.1</h1>\n<p><a href=\"https://github.com/prettier/prettier/compare/2.7.0...2.7.1\">diff</a></p>\n<h4>Keep useful empty lines in description (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/pull/13013\">#13013</a> by <a href=\"https://github.com/chimurai\"><code>@​chimurai</code></a>)</h4>\n<!-- raw HTML omitted -->\n<pre lang=\"graphql\"><code># Input\n&quot;&quot;&quot;\nFirst line\n<p>Second Line\n&quot;&quot;&quot;\ntype Person {\nname: String\n}\n</code></pre></p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/prettier/prettier/commit/eeed611c728fb2f5f601440bbb78046a2a8aad83\"><code>eeed611</code></a> Release 2.7.1</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/794d9d15585e7c84ab433eefa6daf423dae0ec29\"><code>794d9d1</code></a> bugfix(graphql): Keep useful empty lines in description (<a href=\"https://github-redirect.dependabot.com/prettier/prettier/issues/13013\">#13013</a>)</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/dd2af6f0536fc614829318fa554bacd0c6a2934a\"><code>dd2af6f</code></a> Fix <code>--skip-dependencies-install</code></li>\n<li><a href=\"https://github.com/prettier/prettier/commit/b21772baaa423c3de72d30ec3e72142408131de0\"><code>b21772b</code></a> Allow skip depencies install &amp; set repo</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/5530ad24b952e0c48d6b13a17fbba0c45b645f8d\"><code>5530ad2</code></a> Merge branch 'main' of github.com:prettier/prettier</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/c7c99305e9e231ad3b025d9229ceb94817960b0b\"><code>c7c9930</code></a> Clean changelog</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/448786fe35c3b5a7143c9a0588b2be393f76b22e\"><code>448786f</code></a> Revert changes in release script</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/6b388faa5061b5734f829e3c893a6815fbeaa261\"><code>6b388fa</code></a> Add truncate</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/109333ad99f3f7c53e5a0bdbd5272d09cb01b1cc\"><code>109333a</code></a> Git blame ignore 2.7.0</li>\n<li><a href=\"https://github.com/prettier/prettier/commit/59ec4f2ef4aef37c10a265aa7fc568c596fb4427\"><code>59ec4f2</code></a> Bump Prettier dependency to 2.7.0</li>\n<li>Additional commits viewable in <a href=\"https://github.com/prettier/prettier/compare/2.7.0...2.7.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=prettier&package-manager=npm_and_yarn&previous-version=2.7.0&new-version=2.7.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-16T14:02:27Z",
          "tree_id": "db7ade790121a6c643a21683efeb5286384f3444",
          "url": "https://github.com/boa-dev/boa/commit/80e804c8fdedc4081fd0611ef0b23ec71ba8240f"
        },
        "date": 1655390254702,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 299,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 6278,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19278,
            "range": "± 1106",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21717,
            "range": "± 829",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12509,
            "range": "± 484",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13905,
            "range": "± 514",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14686,
            "range": "± 647",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8779,
            "range": "± 267",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11887,
            "range": "± 706",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11551,
            "range": "± 655",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14395,
            "range": "± 884",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16018,
            "range": "± 669",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19232,
            "range": "± 941",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 190110,
            "range": "± 8806",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10498,
            "range": "± 403",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14952,
            "range": "± 780",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7861,
            "range": "± 293",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15594,
            "range": "± 529",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19878,
            "range": "± 712",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 19488,
            "range": "± 674",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7469,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 41039,
            "range": "± 1710",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 35284,
            "range": "± 1237",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1618,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3525,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3855,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2301,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2188,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2504,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2204,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2199,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2389,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2476,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 2075,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3090,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5375,
            "range": "± 207",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2452,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3122,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 2106,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1449,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1574,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1897,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 773,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6511,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5625,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5548,
            "range": "± 230",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21013,
            "range": "± 840",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1779163,
            "range": "± 67680",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6914,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6913,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7245,
            "range": "± 312",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11916,
            "range": "± 1125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11785,
            "range": "± 566",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16074,
            "range": "± 611",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15769,
            "range": "± 578",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10658,
            "range": "± 452",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3048386,
            "range": "± 106724",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1334853,
            "range": "± 71647",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5808,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6359,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5643,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4417,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5594,
            "range": "± 316",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8039,
            "range": "± 359",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 767,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 882046,
            "range": "± 32131",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 799016,
            "range": "± 25111",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "94b2b096fc8d1c62765dc8e7df5c3b916ec45d1e",
          "message": "Bump indexmap from 1.8.2 to 1.9.0 (#2129)\n\nBumps [indexmap](https://github.com/bluss/indexmap) from 1.8.2 to 1.9.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/bluss/indexmap/blob/master/RELEASES.md\">indexmap's changelog</a>.</em></p>\n<blockquote>\n<ul>\n<li>\n<p>1.9.0</p>\n<ul>\n<li>\n<p><strong>MSRV</strong>: Rust 1.56.1 or later is now required.</p>\n</li>\n<li>\n<p>The <code>hashbrown</code> dependency has been updated to version 0.12.</p>\n</li>\n<li>\n<p><code>IterMut</code> and <code>ValuesMut</code> now implement <code>Debug</code>.</p>\n</li>\n<li>\n<p>The new <code>IndexMap::shrink_to</code> and <code>IndexSet::shrink_to</code> methods shrink\nthe capacity with a lower bound.</p>\n</li>\n<li>\n<p>The new <code>IndexMap::move_index</code> and <code>IndexSet::move_index</code> methods change\nthe position of an item from one index to another, shifting the items\nbetween to accommodate the move.</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/bluss/indexmap/commit/32222033fdef28ad21cc49c904bf8a74dc926888\"><code>3222203</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/231\">#231</a> from cuviper/release-1.9.0</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/9eda24a4466bc5366ab4873b48cb2cf62feaf2a1\"><code>9eda24a</code></a> Add a release note for move_index</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/8d0216043db7aa81bf5dc5a41f9b60c140bcb247\"><code>8d02160</code></a> Use <code>u8</code> test indices so quickcheck is less likely to go out of bounds.</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/be700efe0b84ee4e5b93646620aa2d9f049e101c\"><code>be700ef</code></a> Add move_index to change the position of an entry</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/511280aa2ea37844e8ea6f9cfd9b192e0feae6f1\"><code>511280a</code></a> Add an MSRV note for retain_mut</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/75de9993cd32dfb95b2805f7dc93a43e0d1157f4\"><code>75de999</code></a> cargo fmt</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/855b8eefcdfdc077bfc3b96fd70c56fd26e57c89\"><code>855b8ee</code></a> Bump MSRV to 1.56.1, matching hashbrown as of 0.12.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/971f8b92af0794b69d1089a5bed600073c92ef78\"><code>971f8b9</code></a> Hide unnecessary iterator visibility</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/20cf99ad66d23013aa705d87268125159f5a5e7b\"><code>20cf99a</code></a> Documentation assertion in erase_index function</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/3921adfa947cba452509703e1662b5e2ee8eeea2\"><code>3921adf</code></a> Fix clippy::needless_borrow</li>\n<li>Additional commits viewable in <a href=\"https://github.com/bluss/indexmap/compare/1.8.2...1.9.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=indexmap&package-manager=cargo&previous-version=1.8.2&new-version=1.9.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-19T08:53:28Z",
          "tree_id": "6ea7f27d16eeefb4373b05b7036ac59e5e437a3c",
          "url": "https://github.com/boa-dev/boa/commit/94b2b096fc8d1c62765dc8e7df5c3b916ec45d1e"
        },
        "date": 1655630978512,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 231,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5031,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15873,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18329,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10632,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11351,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12106,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7319,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9707,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9391,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11575,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13391,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15609,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146534,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8731,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12677,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6499,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12514,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16267,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15848,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5898,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34111,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29750,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1075,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2516,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2661,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1542,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1555,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1750,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1550,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1553,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1713,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1725,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1457,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2295,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4069,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1747,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2263,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1426,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1080,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1146,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1456,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 542,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4764,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4159,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4238,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16074,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1324572,
            "range": "± 2146",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5029,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5227,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5334,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8818,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8835,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11706,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11818,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8056,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2382431,
            "range": "± 3010",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1113110,
            "range": "± 13747",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4337,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4586,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4075,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3283,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4289,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6528,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 666,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 708261,
            "range": "± 4539",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 663862,
            "range": "± 3432",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4f95eb756dbda089b9210d4aa107e968fa9ba94e",
          "message": "Bump sys-locale from 0.2.0 to 0.2.1 (#2128)\n\nBumps [sys-locale](https://github.com/1Password/sys-locale) from 0.2.0 to 0.2.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/1Password/sys-locale/releases\">sys-locale's releases</a>.</em></p>\n<blockquote>\n<h2>v0.2.1</h2>\n<p>See <a href=\"https://github.com/1Password/sys-locale/blob/main/CHANGELOG.md#020---2022-03-01\">the changelog</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/1Password/sys-locale/blob/main/CHANGELOG.md\">sys-locale's changelog</a>.</em></p>\n<blockquote>\n<h2>[0.2.1] - 2022-06-16</h2>\n<h3>New</h3>\n<ul>\n<li>The crate now supports being used via WASM in a WebWorker environment.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/1Password/sys-locale/commit/1b0e55908620e1ed10dc2585df47a5bc5d04cf55\"><code>1b0e559</code></a> Release version 0.2.1</li>\n<li><a href=\"https://github.com/1Password/sys-locale/commit/82697d3555d62b333749eb73c39dbfe4266eb51a\"><code>82697d3</code></a> Convert line endings to LF and unify existing files</li>\n<li><a href=\"https://github.com/1Password/sys-locale/commit/ca587f18445a018e27a0c3364bd7585c6e15aa07\"><code>ca587f1</code></a> Add support for workers in WASM</li>\n<li>See full diff in <a href=\"https://github.com/1Password/sys-locale/compare/v0.2.0...v0.2.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=sys-locale&package-manager=cargo&previous-version=0.2.0&new-version=0.2.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-19T09:07:51Z",
          "tree_id": "92dbc246fda1fd4b4c801739d948f8fd9cb4180b",
          "url": "https://github.com/boa-dev/boa/commit/4f95eb756dbda089b9210d4aa107e968fa9ba94e"
        },
        "date": 1655631834109,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 226,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4872,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15315,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17486,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10161,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10888,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11626,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7024,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9217,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9018,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11121,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12961,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14852,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145770,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8348,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12005,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6226,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11979,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15468,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15080,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5838,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32398,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28210,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1064,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2522,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2635,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1531,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1546,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1726,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1535,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1553,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1716,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1714,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1441,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2278,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4062,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1724,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2220,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1406,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1080,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1141,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1414,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 535,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4748,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4137,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4204,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16113,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1327021,
            "range": "± 6582",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5113,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5213,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5408,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8819,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8810,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11691,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11792,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7982,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2398687,
            "range": "± 3856",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1110138,
            "range": "± 19888",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4329,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4527,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4080,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3271,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4252,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6393,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 659,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 711102,
            "range": "± 3238",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 666347,
            "range": "± 4457",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "d173e085298444b1fd7a46d2cb7a4682e25fc411",
          "message": "Started adding the [[Done]] field to iterators (#2125)\n\nThis Pull Request adds the `[[Done]]` field to iterator records.\n\nCo-authored-by: raskad <32105367+raskad@users.noreply.github.com>",
          "timestamp": "2022-06-19T15:44:55Z",
          "tree_id": "688f642c8a9b6333886fe50bafd22aac63db882d",
          "url": "https://github.com/boa-dev/boa/commit/d173e085298444b1fd7a46d2cb7a4682e25fc411"
        },
        "date": 1655656075085,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 263,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4965,
            "range": "± 203",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15527,
            "range": "± 633",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18363,
            "range": "± 699",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10167,
            "range": "± 530",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10950,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11606,
            "range": "± 429",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7120,
            "range": "± 331",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9417,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9031,
            "range": "± 441",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11324,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13574,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14974,
            "range": "± 677",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148582,
            "range": "± 6922",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8545,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12723,
            "range": "± 404",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6213,
            "range": "± 292",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12680,
            "range": "± 630",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16374,
            "range": "± 611",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15901,
            "range": "± 881",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6232,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32192,
            "range": "± 1586",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30085,
            "range": "± 1136",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1119,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2680,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2840,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1659,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1638,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1844,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1675,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1690,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1850,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1895,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1590,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2515,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4939,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2037,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2535,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1617,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1140,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1152,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1532,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 653,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5352,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4530,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4529,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17815,
            "range": "± 671",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1394016,
            "range": "± 59670",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5340,
            "range": "± 253",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5586,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5610,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9711,
            "range": "± 457",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9733,
            "range": "± 474",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12937,
            "range": "± 532",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13214,
            "range": "± 472",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8330,
            "range": "± 433",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2861635,
            "range": "± 152022",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1338478,
            "range": "± 66005",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4942,
            "range": "± 199",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5012,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4352,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3594,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4576,
            "range": "± 210",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6461,
            "range": "± 337",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 698,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 816670,
            "range": "± 24679",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 748661,
            "range": "± 30017",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "43f60e9bb1d412a92fe1150c3ee3c3a0c828758e",
          "message": "Fix `eval` attributes (#2130)\n\nThis Pull Request changes the following:\r\n\r\n- Fix `eval` attributes\r\n- Fix `eval` length\r\n- Fix `eval` name",
          "timestamp": "2022-06-20T18:36:53Z",
          "tree_id": "0af8ca7bc1e07a9390163133a3db25f6a517de34",
          "url": "https://github.com/boa-dev/boa/commit/43f60e9bb1d412a92fe1150c3ee3c3a0c828758e"
        },
        "date": 1655752204500,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 316,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5771,
            "range": "± 268",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18268,
            "range": "± 630",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21224,
            "range": "± 1818",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12339,
            "range": "± 501",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13151,
            "range": "± 795",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14060,
            "range": "± 671",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8419,
            "range": "± 580",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11136,
            "range": "± 361",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10809,
            "range": "± 492",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13407,
            "range": "± 989",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15678,
            "range": "± 637",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17871,
            "range": "± 961",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 189847,
            "range": "± 7978",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9844,
            "range": "± 383",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14129,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7360,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14743,
            "range": "± 951",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18558,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18430,
            "range": "± 671",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7078,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 39494,
            "range": "± 1358",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34085,
            "range": "± 845",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1477,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3305,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3510,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2060,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2080,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2273,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2059,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2070,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2297,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2295,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1942,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2967,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5052,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2273,
            "range": "± 114",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2939,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1919,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1394,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1474,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1866,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 721,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6176,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5356,
            "range": "± 333",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5463,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 23145,
            "range": "± 1071",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1721151,
            "range": "± 58584",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6646,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6783,
            "range": "± 371",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6962,
            "range": "± 324",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11536,
            "range": "± 719",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11520,
            "range": "± 1249",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15665,
            "range": "± 2786",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15517,
            "range": "± 801",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10422,
            "range": "± 495",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3208399,
            "range": "± 149585",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1399577,
            "range": "± 49066",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5691,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5896,
            "range": "± 269",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5417,
            "range": "± 272",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4195,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5424,
            "range": "± 363",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8002,
            "range": "± 417",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 725,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 864576,
            "range": "± 48198",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 812742,
            "range": "± 34975",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "91b28ec156441c0a6e7669231e0077c8dfa22997",
          "message": "Bump anyhow from 1.0.57 to 1.0.58 (#2132)\n\nBumps [anyhow](https://github.com/dtolnay/anyhow) from 1.0.57 to 1.0.58.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/dtolnay/anyhow/releases\">anyhow's releases</a>.</em></p>\n<blockquote>\n<h2>1.0.58</h2>\n<ul>\n<li>Fix some broken links in documentation</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/8f950ac0d696644b0ed17d73cb41c1ee30816cf3\"><code>8f950ac</code></a> Release 1.0.58</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/bf23b3b6858960d1432648326bee889eaa17ec95\"><code>bf23b3b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/anyhow/issues/242\">#242</a> from MedzikUser/master</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/d8c2388c654d0939851f97a396e78da2e50cc31a\"><code>d8c2388</code></a> Use upstreamed docs.rs icon in docs.rs badge</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/db82639510674654b59522b893a92599e617765f\"><code>db82639</code></a> Fix broken doc links to anyhow macro</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/462212b7079a9ed6603ae45a26081b4e685d834d\"><code>462212b</code></a> Update docs.rs badge</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/ff37db348d630d838d2bb428fbf2b6d40f8961f4\"><code>ff37db3</code></a> Check all crates in workspace for outdated deps</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/302acadce05392af2fef565f8413fde3c3f3c76e\"><code>302acad</code></a> Match components in CI to rust-toolchain.toml file</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/26023f77a85bb794a888e7ee5b0edc53b7525388\"><code>26023f7</code></a> Run miri in stricter miri-strict-provenance mode</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/f45065787a16da3ffb3405b44bc819f2f467ab54\"><code>f450657</code></a> Drop unneeded quoting from env variable in workflows yaml</li>\n<li><a href=\"https://github.com/dtolnay/anyhow/commit/09e4db31dac797a8f05abd57fbeba7325ff82b68\"><code>09e4db3</code></a> Update workflows to actions/checkout@v3</li>\n<li>See full diff in <a href=\"https://github.com/dtolnay/anyhow/compare/1.0.57...1.0.58\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=anyhow&package-manager=cargo&previous-version=1.0.57&new-version=1.0.58)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-20T22:09:58Z",
          "tree_id": "ed88788202dc832b1a35c00107e21f06f90e7a32",
          "url": "https://github.com/boa-dev/boa/commit/91b28ec156441c0a6e7669231e0077c8dfa22997"
        },
        "date": 1655766538081,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 232,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4957,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15314,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17708,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10214,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11001,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11748,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7119,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9342,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9071,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11154,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13049,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15025,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142745,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8387,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11969,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6309,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12308,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15720,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15348,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5910,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32482,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28286,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1074,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2505,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2677,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1563,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1564,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1782,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1555,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1562,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1730,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1733,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1481,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2249,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4204,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1773,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2248,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1450,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1109,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1154,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1453,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 541,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4677,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4115,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4140,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15707,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1292038,
            "range": "± 3653",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5012,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5212,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5284,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9145,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9204,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12072,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12115,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8031,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2678315,
            "range": "± 2008",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1201812,
            "range": "± 3186",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4321,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4551,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4066,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3232,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4218,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6077,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 616,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 721660,
            "range": "± 4124",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 682186,
            "range": "± 3025",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "39cd3b8bdffada751621132de1f8b65d04627d6d",
          "message": "Bump dyn-clone from 1.0.5 to 1.0.6 (#2133)\n\nBumps [dyn-clone](https://github.com/dtolnay/dyn-clone) from 1.0.5 to 1.0.6.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/ee78719dc55c494b3bb481cbe23376e83ceef58f\"><code>ee78719</code></a> Release 1.0.6</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/4f27457db206acb5cbb3eb517e51b527d69526d7\"><code>4f27457</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/dyn-clone/issues/18\">#18</a> from dtolnay/lifetime</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/22cdf84ebec7afdccdc41d2cd3a7188cf7cd3941\"><code>22cdf84</code></a> Add test involving lifetime parameter</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/609f5a02e94ac93af2cd12e0bea4c72c034d9d06\"><code>609f5a0</code></a> Use upstreamed docs.rs icon in docs.rs badge</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/07525737da610f4eb8008348e4d442a30af3bdf0\"><code>0752573</code></a> Run miri in stricter miri-strict-provenance mode</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/6f311a696320cd1401d1edefc92790e838468083\"><code>6f311a6</code></a> Drop unneeded quoting from env variable in workflows yaml</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/6865de45e85447642aaacc60af7638d2a6683760\"><code>6865de4</code></a> Update workflows to actions/checkout@v3</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/d0d5eb290e78e4c454607cd85f29bc6d124293c7\"><code>d0d5eb2</code></a> Pull miri from miri branch of dtolnay/rust-toolchain</li>\n<li>See full diff in <a href=\"https://github.com/dtolnay/dyn-clone/compare/1.0.5...1.0.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=dyn-clone&package-manager=cargo&previous-version=1.0.5&new-version=1.0.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-20T22:55:26Z",
          "tree_id": "a2da8920369678aaa0bc76e09e1bdd37423b9097",
          "url": "https://github.com/boa-dev/boa/commit/39cd3b8bdffada751621132de1f8b65d04627d6d"
        },
        "date": 1655768052541,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 161,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3791,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11647,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13390,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7846,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8406,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 8964,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5472,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7206,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 6924,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8621,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 9927,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11356,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 107392,
            "range": "± 1643",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6394,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9067,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4884,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9147,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 11846,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 11560,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4183,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 24645,
            "range": "± 225",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21459,
            "range": "± 3546",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 797,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1916,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2043,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1161,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1161,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1303,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1168,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1180,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1300,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1299,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1100,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1670,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 2837,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1311,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1677,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1072,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 785,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 831,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1053,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 377,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3519,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3132,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3100,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 11353,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 993265,
            "range": "± 112633",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 3702,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 3733,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 3815,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 6590,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 6576,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 8705,
            "range": "± 108",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 8828,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 6263,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1820867,
            "range": "± 15387",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 845907,
            "range": "± 2707",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3158,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 3360,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 2951,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2423,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3176,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 4469,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 359,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 556782,
            "range": "± 5286",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 515865,
            "range": "± 3740",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "3f4232b1d0f73581e254d6efcf7d7e0ba9cc3cae",
          "message": "Bump test262 from `74de3d1` to `74656ae` (#2134)\n\nBumps [test262](https://github.com/tc39/test262) from `74de3d1` to `74656ae`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/74656ae4ec63b11421da7ca99e452b89d5cfe3a2\"><code>74656ae</code></a> reenable graaljs</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/74de3d1d327b3238d6193242c3cc157746f2faad...74656ae4ec63b11421da7ca99e452b89d5cfe3a2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-20T23:18:59Z",
          "tree_id": "4524004709318862d250e38e3dfa47a0e9f0ed55",
          "url": "https://github.com/boa-dev/boa/commit/3f4232b1d0f73581e254d6efcf7d7e0ba9cc3cae"
        },
        "date": 1655769296616,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 229,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4915,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15215,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17558,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10233,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11042,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11705,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7081,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9363,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9093,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11245,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12898,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14898,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143876,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8338,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11948,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6316,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12412,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16005,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15626,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5793,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32529,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28123,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1062,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2487,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2670,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1503,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1529,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1718,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1527,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1529,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1713,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1718,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1442,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2213,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4063,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1708,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2230,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1404,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1081,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1143,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1420,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 543,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4671,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4058,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4147,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15890,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1301312,
            "range": "± 5994",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5011,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5170,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5393,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8695,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8793,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11747,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11676,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8111,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2711077,
            "range": "± 4179",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1202079,
            "range": "± 2525",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4331,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4531,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4063,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3226,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4172,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6153,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 623,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 731930,
            "range": "± 3863",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 687157,
            "range": "± 5826",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "613f4c3eabb88ea62be1bd12bc46e4f497fddde4",
          "message": "Fix for in/of loop initializer environment (#2135)\n\nThis Pull Request changes the following:\r\n\r\n- Add an additional environment when a for in/of loop is initialized with a `let` or `const` binding.",
          "timestamp": "2022-06-21T20:07:26Z",
          "tree_id": "e893949ebc5e29d49b9c9fd4d8d50f3d48efbc52",
          "url": "https://github.com/boa-dev/boa/commit/613f4c3eabb88ea62be1bd12bc46e4f497fddde4"
        },
        "date": 1655844128630,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 229,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5113,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16242,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18298,
            "range": "± 455",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10840,
            "range": "± 157",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11540,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12382,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7389,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9639,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9398,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11729,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13725,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15850,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 150709,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8756,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12643,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6660,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12688,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16443,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16241,
            "range": "± 130",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5855,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34112,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29895,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1121,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2683,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2844,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1628,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1651,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1845,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1664,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1658,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1838,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1862,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1555,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2354,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4113,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1825,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2374,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1519,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1106,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1176,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1479,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 529,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5125,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4411,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4349,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16023,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1368333,
            "range": "± 4577",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5093,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5247,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5365,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9112,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9147,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12034,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12124,
            "range": "± 438",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8517,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2510371,
            "range": "± 3688",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1177369,
            "range": "± 16574",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4449,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4746,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4160,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3419,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4633,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6658,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 503,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 759379,
            "range": "± 14451",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 705329,
            "range": "± 3526",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "0ebb3cf439bd4e07730f8ff41349390f9b510f8d",
          "message": "Refactor `construct` and `PromiseCapability` to preserve `JsObject` invariants  (#2136)\n\nThis Pull Request changes the signature of `construct` to always return `JsObject`s, and refactors `PromiseCapability` to store only `JsObject`/`JsFunction`s. This preserves the following invariants specified in the spec:\r\n\r\nhttps://tc39.es/ecma262/multipage/ordinary-and-exotic-objects-behaviours.html#sec-ecmascript-function-objects-construct-argumentslist-newtarget\r\n> The [[Construct]] internal method of an ECMAScript function object ... returns either a normal completion containing an Object or a throw completion ... \r\n\r\nhttps://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promisecapability-records\r\n\r\nTable 82: [PromiseCapability Record](https://tc39.es/ecma262/multipage/control-abstraction-objects.html#sec-promisecapability-records) Fields\r\nField Name | Value | Meaning\r\n-- | -- | --\r\n[[Promise]] | an Object | An object that is usable as a promise.\r\n[[Resolve]] | a function object | The function that is used to resolve the given promise.\r\n[[Reject]] | a function object | The function that is used to reject the given promise.\n\nCo-authored-by: Iban Eguia <razican@protonmail.ch>",
          "timestamp": "2022-06-22T08:15:03Z",
          "tree_id": "6cfff84176e305403a7300bad02a566f7a61e9b5",
          "url": "https://github.com/boa-dev/boa/commit/0ebb3cf439bd4e07730f8ff41349390f9b510f8d"
        },
        "date": 1655887725365,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 229,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5259,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16480,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18635,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10929,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11719,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12386,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7648,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9985,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9738,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11835,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14145,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16064,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 151738,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9279,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13362,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6958,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12786,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16437,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16126,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6007,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34655,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30311,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1148,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2757,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2872,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1675,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1682,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1894,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1647,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1665,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1848,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1846,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1631,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2440,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4258,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1842,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2370,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1543,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1219,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1169,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1493,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 534,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5169,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4448,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4390,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15711,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1379853,
            "range": "± 3888",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5206,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5275,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5438,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9222,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9194,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12137,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12099,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8591,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2503408,
            "range": "± 3434",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1163370,
            "range": "± 3521",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4357,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4701,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4114,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3782,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4882,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7100,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 502,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 738155,
            "range": "± 3353",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 692608,
            "range": "± 3118",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "b7cf41ceebf132cc07604475281d0b8f8771c67d",
          "message": "Bump clap from 3.2.5 to 3.2.6 (#2138)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.5 to 3.2.6.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.6] - 2022-06-21</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Don't panic when parsing <code>--=</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/3823df9bbe03efefcb49319834a72cf2cfa2ede9\"><code>3823df9</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/8a659bc2b43c33d57597da3c14156f9e2ef4f235\"><code>8a659bc</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ceb7ee4f54fba8681f418a4d1e92ed3d91f30cbe\"><code>ceb7ee4</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3860\">#3860</a> from epage/panic</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/01da890145adab9b1993ffde57af3788c7ed00a3\"><code>01da890</code></a> fix(parser): Don't panic on <code>--=</code></li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/dabb5713d4d60b52deaef21c42c9d9dae57f5def\"><code>dabb571</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3853\">#3853</a> from dtolnay-contrib/valuevalidation</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/690530a19120e47415026498370ee57d74aad721\"><code>690530a</code></a> Fix typo in ErrorKind::ValueValidation message</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ae78f88d48cfd64cd93875d54103a51cdf7e5382\"><code>ae78f88</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3852\">#3852</a> from epage/msrv</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/82d70d82c46925339229048bbea9d2a6a8c3843a\"><code>82d70d8</code></a> chore: Bump MSRV from 1.56.0 to 1.56.1</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/8c28bec3960aebae7eb9ec1509aa8d5ad2760c7f\"><code>8c28bec</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3851\">#3851</a> from tshepang/trim-manifest</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/806f634bfa777fd7f0966d73d79a31e576fe9bf3\"><code>806f634</code></a> chore: trim Cargo manifest fields whose values are defaults</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.5...v3.2.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.5&new-version=3.2.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-22T16:28:37Z",
          "tree_id": "730e231203a6b96cdbf81c24f3b874b7395b5f47",
          "url": "https://github.com/boa-dev/boa/commit/b7cf41ceebf132cc07604475281d0b8f8771c67d"
        },
        "date": 1655917810608,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 232,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5134,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16349,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18711,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10995,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11743,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12522,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7497,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9852,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9567,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11980,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13821,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15940,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153779,
            "range": "± 167",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9113,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12928,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6826,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12947,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16437,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16393,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5980,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34571,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30285,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1166,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2805,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2907,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1713,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1712,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1924,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1712,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1705,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1899,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1892,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1666,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2502,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4327,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1878,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2430,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1574,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1211,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1207,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1521,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 554,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5181,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4521,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4357,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 15993,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1421042,
            "range": "± 1978",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5194,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5308,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5432,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9190,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9173,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12198,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12237,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8627,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2486037,
            "range": "± 3617",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1156994,
            "range": "± 4555",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4381,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4575,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4128,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3649,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4815,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6956,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 507,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 752793,
            "range": "± 9555",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 704859,
            "range": "± 4161",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d355d3c3a6dad18d5b30f1901f46fa42542c6ad2",
          "message": "Bump indexmap from 1.9.0 to 1.9.1 (#2139)\n\nBumps [indexmap](https://github.com/bluss/indexmap) from 1.9.0 to 1.9.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/bluss/indexmap/blob/master/RELEASES.md\">indexmap's changelog</a>.</em></p>\n<blockquote>\n<ul>\n<li>\n<p>1.9.1</p>\n<ul>\n<li>The MSRV now allows Rust 1.56.0 as well. However, currently <code>hashbrown</code>\n0.12.1 requires 1.56.1, so users on 1.56.0 should downgrade that to 0.12.0\nuntil there is a later published version relaxing its requirement.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/bluss/indexmap/commit/a638b9910b08f45d2e5f90536855789a90fcbbe6\"><code>a638b99</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/bluss/indexmap/issues/233\">#233</a> from cuviper/release-1.9.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/3f6cdde72a11d0ea6ae8787346a725e762886c18\"><code>3f6cdde</code></a> Release 1.9.1</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/3f8381a4e81b974aed0c625d5d76b2d881915eec\"><code>3f8381a</code></a> Run CI on 1.56.1 until next hashbrown release</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/24a0c8fafd58e295f1acbb5e74cc8973b9ecee8d\"><code>24a0c8f</code></a> Revert &quot;Bump MSRV to 1.56.1, matching hashbrown as of 0.12.1&quot;</li>\n<li><a href=\"https://github.com/bluss/indexmap/commit/844750f0097e7c4d18e681f9a9acf45e3c09ce04\"><code>844750f</code></a> Fix the RELEASES.md link</li>\n<li>See full diff in <a href=\"https://github.com/bluss/indexmap/compare/1.9.0...1.9.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=indexmap&package-manager=cargo&previous-version=1.9.0&new-version=1.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-22T16:47:50Z",
          "tree_id": "56cef3b357c967fab4bc53ad7c8af24e6196ca47",
          "url": "https://github.com/boa-dev/boa/commit/d355d3c3a6dad18d5b30f1901f46fa42542c6ad2"
        },
        "date": 1655918774535,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 227,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4982,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15454,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17810,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10368,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11051,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11811,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7212,
            "range": "± 158",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9466,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9156,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11402,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13117,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15089,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144653,
            "range": "± 312",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8379,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11974,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6385,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12296,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16067,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15666,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5843,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32832,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28548,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1085,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2541,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2689,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1543,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1555,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1718,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1556,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1554,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1749,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1738,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1458,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2236,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4089,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1719,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2228,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1416,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1093,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1162,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1458,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 549,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4796,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4189,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4219,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16014,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1317710,
            "range": "± 25117",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5027,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5147,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5277,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8801,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8787,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11689,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11681,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8008,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2454875,
            "range": "± 4709",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1127201,
            "range": "± 3107",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4297,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4503,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4033,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3372,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4334,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6215,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 616,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 699252,
            "range": "± 6396",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 659060,
            "range": "± 2643",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "b043bca0810a55c22d9404d54b9e4d9004aa4ba1",
          "message": "Implement `Promise.all` (#2140)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `Promise.all`",
          "timestamp": "2022-06-27T10:48:37Z",
          "tree_id": "606e130e70621d0fd39f51f91eb7e41c8f3be34b",
          "url": "https://github.com/boa-dev/boa/commit/b043bca0810a55c22d9404d54b9e4d9004aa4ba1"
        },
        "date": 1656328826894,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 225,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4795,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15285,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17471,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10136,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10805,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11627,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6975,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9214,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8895,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11069,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12875,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14904,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144599,
            "range": "± 202",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8222,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11836,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6188,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 11987,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15620,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15151,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5768,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32391,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28196,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1100,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2524,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2695,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1542,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1579,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1749,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1564,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1576,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1751,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1736,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1473,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2263,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4088,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1741,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2221,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1441,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1108,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1172,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1442,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 561,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4768,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4245,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4235,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16103,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1333181,
            "range": "± 1392",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4996,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5130,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5267,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8820,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8785,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11625,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11616,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8113,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2569134,
            "range": "± 3837",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1154665,
            "range": "± 3673",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4292,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4534,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4050,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3356,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4319,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6183,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 611,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 709728,
            "range": "± 3394",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 667433,
            "range": "± 4942",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "ce8c6e27e23fb9deea5741a741b9bb40c112b6c8",
          "message": "Bump test262 from `74656ae` to `5e564b9` (#2144)\n\nBumps [test262](https://github.com/tc39/test262) from `74656ae` to `5e564b9`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/5e564b96e781d3e220cead94015b5c8cd705fc10\"><code>5e564b9</code></a> Temporal: Fix typo in description.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/079a7eac7a906a406de3cf41a64350d9f9442c77\"><code>079a7ea</code></a> Temporal: Fix typo in ZonedDateTime/from/offset-wrong-type.js.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/8123e8fc340895587d60048cbb522423066dce3a\"><code>8123e8f</code></a> Temporal: Add missing Number checks in overflow-wrong-type.js.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/b458b9f0c2f8720a2397e168090b20f459e1b2b2\"><code>b458b9f</code></a> Update harness/testIntl.js</li>\n<li><a href=\"https://github.com/tc39/test262/commit/2877facc4c4a8e2e1541bda0ff10ebcda20731d9\"><code>2877fac</code></a> Update testIntl.js</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0efbba27ffa8d99dabf400ebd9b38c89749384c5\"><code>0efbba2</code></a> Normative: Add new numbering system &quot;tnsa&quot;</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ee521159d5e993d9874b7056b71f582fb4790a6f\"><code>ee52115</code></a> Fix decorator tests</li>\n<li><a href=\"https://github.com/tc39/test262/commit/babd46c40a11f10a7dc6f77aeabe243e5d9b4bd9\"><code>babd46c</code></a> Add tests for Temporal.Instant strings at the edge of the range</li>\n<li><a href=\"https://github.com/tc39/test262/commit/81836ba1249e45ec83d3afb51a18f81173bb1cdd\"><code>81836ba</code></a> Temporal: Test PlainDate#{add,subtract} with custom calendar.</li>\n<li><a href=\"https://github.com/tc39/test262/commit/79c449655942ebcf1be4084660f46488c8bbf05c\"><code>79c4496</code></a> Fixed spelling error identifer -&gt; identifier.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/tc39/test262/compare/74656ae4ec63b11421da7ca99e452b89d5cfe3a2...5e564b96e781d3e220cead94015b5c8cd705fc10\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-27T10:58:50Z",
          "tree_id": "5ef18d736b53e14dc1369693b456f0353e39d8e8",
          "url": "https://github.com/boa-dev/boa/commit/ce8c6e27e23fb9deea5741a741b9bb40c112b6c8"
        },
        "date": 1656329800836,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 231,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4897,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15543,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17866,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10245,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10923,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11765,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7041,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9265,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8970,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11160,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13079,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15120,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143770,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8458,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12126,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6387,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12243,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15835,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15532,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5902,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 33038,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28716,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1074,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2485,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2664,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1521,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1551,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1726,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1556,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1557,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1721,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1708,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1473,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2230,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4353,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1714,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2212,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1397,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1105,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1156,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1442,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 548,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4659,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4097,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4266,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16264,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1360962,
            "range": "± 10796",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5099,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5244,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5432,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9346,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9322,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12347,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12339,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8294,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2699219,
            "range": "± 4010",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1211768,
            "range": "± 5912",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4402,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4620,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4189,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3383,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4313,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6205,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 628,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 716683,
            "range": "± 4455",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 676286,
            "range": "± 3709",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "e81e06b462ba941c7fb075c42d5cb2d28fbd6373",
          "message": "Implement `Promise.any` (#2145)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `Promise.any`",
          "timestamp": "2022-06-27T20:08:00Z",
          "tree_id": "1d38f7e6866ad4038f4a6a3d22406393a8df98a9",
          "url": "https://github.com/boa-dev/boa/commit/e81e06b462ba941c7fb075c42d5cb2d28fbd6373"
        },
        "date": 1656362644605,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 293,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5863,
            "range": "± 263",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19135,
            "range": "± 870",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21995,
            "range": "± 817",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12463,
            "range": "± 440",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13373,
            "range": "± 1687",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14430,
            "range": "± 507",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8666,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11482,
            "range": "± 684",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11212,
            "range": "± 677",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13589,
            "range": "± 429",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16103,
            "range": "± 758",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18697,
            "range": "± 1012",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 186706,
            "range": "± 19216",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10181,
            "range": "± 695",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14745,
            "range": "± 880",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7670,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14760,
            "range": "± 756",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18646,
            "range": "± 919",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18769,
            "range": "± 1302",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7111,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 40339,
            "range": "± 1637",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 35584,
            "range": "± 3016",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1501,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3336,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3639,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2093,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2085,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2358,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2141,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2129,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2344,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2349,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1994,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3117,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5493,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2353,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2953,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1937,
            "range": "± 62",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1404,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1515,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1897,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 727,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6217,
            "range": "± 440",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5482,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5613,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21744,
            "range": "± 975",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1776118,
            "range": "± 71823",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6793,
            "range": "± 571",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6954,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7128,
            "range": "± 628",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11549,
            "range": "± 664",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11583,
            "range": "± 743",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15479,
            "range": "± 956",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15948,
            "range": "± 1194",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10396,
            "range": "± 1434",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3128866,
            "range": "± 140472",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1396531,
            "range": "± 65967",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5659,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5907,
            "range": "± 279",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5376,
            "range": "± 265",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4306,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5536,
            "range": "± 171",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8044,
            "range": "± 533",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 724,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 868313,
            "range": "± 30459",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 814779,
            "range": "± 31525",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "c561aa3b2c8e4507f99fa6288cf570da0cee0b39",
          "message": "Implement `Promise.allSettled` (#2146)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `Promise.allSettled`",
          "timestamp": "2022-06-29T22:30:37Z",
          "tree_id": "99bba0b6f9ea37961d541d66310f3358826d46af",
          "url": "https://github.com/boa-dev/boa/commit/c561aa3b2c8e4507f99fa6288cf570da0cee0b39"
        },
        "date": 1656544323738,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 278,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5215,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17036,
            "range": "± 190",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19273,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10983,
            "range": "± 266",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11833,
            "range": "± 181",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12790,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7654,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10183,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9695,
            "range": "± 187",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12039,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13961,
            "range": "± 344",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16157,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 162440,
            "range": "± 1746",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9115,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13330,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6847,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13483,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17508,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17173,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6508,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35583,
            "range": "± 780",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31175,
            "range": "± 250",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1280,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2916,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3067,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1785,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1801,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2000,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1813,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1825,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2026,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2023,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1727,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2604,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5198,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2063,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2634,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1673,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1188,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1236,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1603,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 653,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5444,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4888,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5090,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19337,
            "range": "± 254",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1546072,
            "range": "± 5282",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6092,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6301,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6522,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11005,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11117,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14291,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14133,
            "range": "± 238",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9772,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3231523,
            "range": "± 18620",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1433316,
            "range": "± 12746",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5226,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5472,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4941,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3961,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5168,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7377,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 743,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 852583,
            "range": "± 7873",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 801410,
            "range": "± 8658",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7ac5998cf34012434b711194e7dfee254c34970e",
          "message": "Bump clap from 3.2.6 to 3.2.7 (#2150)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.6 to 3.2.7.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.7] - 2022-06-28</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Global arguments should override env-sourced arguments</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/b4a1362486a95309c44f4ba9ef24038f1281f384\"><code>b4a1362</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/3e80393e4385d6a40ca9a465c3ed0cbf232d7315\"><code>3e80393</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f406d99b95b766ae264792db475e8e2e260f1ab4\"><code>f406d99</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3879\">#3879</a> from epage/env</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/72d206e4d90e39e106965c8cf0c10e1e6a8f88c7\"><code>72d206e</code></a> fix(parser): Ensure globals override env vars</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f082eb6d4aded355ac70566a252a9e97a653292e\"><code>f082eb6</code></a> test(parser): Verify global/default interaction</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/9962393c20f2d1521aefdcf2562bef1380b4ccbe\"><code>9962393</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3877\">#3877</a> from epage/assert</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/3c4e684c8bcb49c7c1ea8db288656cf0d40dd9f5\"><code>3c4e684</code></a> test: Verify auto-traits for core types</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/a05f4d34a30f707bf3e6cec17bec85057522746e\"><code>a05f4d3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3870\">#3870</a> from stepancheg/macro-refs</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5ba41d775c7f966eeac038d11de71e1dc936ed0a\"><code>5ba41d7</code></a> docs(license): Update years/holders</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/464ef3920b80faa3b1a0f04e488e33b2aa449cc4\"><code>464ef39</code></a> refactor: Put once_cell reexport into __macro_refs</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.6...v3.2.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.6&new-version=3.2.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-29T22:47:27Z",
          "tree_id": "3f54f815326bdc2f6c8751391392757bce458d80",
          "url": "https://github.com/boa-dev/boa/commit/7ac5998cf34012434b711194e7dfee254c34970e"
        },
        "date": 1656545323048,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 333,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5267,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17473,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19647,
            "range": "± 212",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11297,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11976,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12814,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7718,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10347,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9943,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12368,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14517,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16854,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 160663,
            "range": "± 1263",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9200,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13272,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6930,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13556,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17520,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17168,
            "range": "± 141",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6643,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35806,
            "range": "± 442",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31193,
            "range": "± 205",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1281,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2899,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3053,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1790,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1801,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1986,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1806,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1809,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2018,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1997,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1713,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2602,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5151,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2014,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2622,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1688,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1184,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1220,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1626,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 659,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5462,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4795,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4968,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19260,
            "range": "± 159",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1539774,
            "range": "± 11845",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5891,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6134,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6276,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10848,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10904,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14061,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14054,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9734,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3204019,
            "range": "± 33816",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1434276,
            "range": "± 11927",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5104,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5305,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4791,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3971,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5129,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7378,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 740,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 851170,
            "range": "± 12308",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 799369,
            "range": "± 7047",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "13df9a1984d729328fda88ca9432a84eb4990d3b",
          "message": "Implement `super` expressions (#2116)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `super` expression parsing / execution.\r\n- Implement early errors for `super` expressions.\r\n- Refactor / add internal slot representation for environment and function objects.",
          "timestamp": "2022-06-30T12:37:57Z",
          "tree_id": "39cba3a6c71b56a3fb33da66b30ca1149503eb6d",
          "url": "https://github.com/boa-dev/boa/commit/13df9a1984d729328fda88ca9432a84eb4990d3b"
        },
        "date": 1656594548859,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 204,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4278,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 13537,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 15586,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10227,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10960,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 10407,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7065,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9379,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9027,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11238,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13067,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15088,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144239,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8409,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11959,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6294,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12376,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16015,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15539,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5866,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32629,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 85885,
            "range": "± 170",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1081,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2499,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2658,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1528,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1533,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1704,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1537,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1541,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1693,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1697,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1449,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2208,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4108,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1708,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2243,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1419,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1076,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1133,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1413,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 526,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4107,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4161,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3768,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16676,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1165452,
            "range": "± 3405",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4443,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 4573,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5307,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9202,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9266,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12283,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12271,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7199,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2342742,
            "range": "± 3505",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1186099,
            "range": "± 4542",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4346,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4504,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4104,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3273,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4253,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6092,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 645,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 729455,
            "range": "± 4339",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 681786,
            "range": "± 3875",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "8657dd2b116da01b024ea9b11ed7f211cbdfc887",
          "message": "Bump serde_json from 1.0.81 to 1.0.82 (#2152)\n\nBumps [serde_json](https://github.com/serde-rs/json) from 1.0.81 to 1.0.82.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/json/releases\">serde_json's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.82</h2>\n<ul>\n<li>Implement <code>From&lt;Option&lt;T&gt;&gt;</code> for serde_json::Value where <code>T: Into&lt;Value&gt;</code> (<a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/900\">#900</a>, thanks <a href=\"https://github.com/kvnvelasco\"><code>@​kvnvelasco</code></a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/json/commit/f286714a4bdc476705f8fb95e1d2d5593d7c11fd\"><code>f286714</code></a> Release 1.0.82</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/df704c246808a1ba83b90ee5672d4cf02bbb9f5e\"><code>df704c2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/900\">#900</a> from kvnvelasco/implement_from_option_for_value</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/b87778bf54dd4d7dc63aacd4c1d7f48e33317fa2\"><code>b87778b</code></a> don't use experimental (in 1.36) Self:: access for enums</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/1bf61e9c087c33cc13063b538678120b2ca1d8e3\"><code>1bf61e9</code></a> make Value be From&lt;Option<!-- raw HTML omitted -->&gt;</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/3d173405c2e63d0ce2dc575288b164c2ae265f3d\"><code>3d17340</code></a> Bump oldest rustc for preserve_order feature to 1.56.1</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/dab5ed3ee97cef5e2b796513f8d9e4c7416e44bf\"><code>dab5ed3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/json/issues/895\">#895</a> from dtolnay/ref</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/05e03ee181c56bd67c5315f1f68e8392da537128\"><code>05e03ee</code></a> Eliminate all use of ref keyword</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/45f1c4a7441b81fab9824ee46b844d64233750e5\"><code>45f1c4a</code></a> Resolve borrow_deref_ref clippy lint</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/de5c34b704c7a6cb764c5ef5742457c7f00155e3\"><code>de5c34b</code></a> Resolve get_first clippy lint</li>\n<li><a href=\"https://github.com/serde-rs/json/commit/6b91c96f8d508fae5e3c8f69b57e5b363c769384\"><code>6b91c96</code></a> Check for outdated deps in fuzz target</li>\n<li>Additional commits viewable in <a href=\"https://github.com/serde-rs/json/compare/v1.0.81...v1.0.82\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_json&package-manager=cargo&previous-version=1.0.81&new-version=1.0.82)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-30T14:53:17Z",
          "tree_id": "27b6882f3b5f873427edf9dcdf271d35aba66b14",
          "url": "https://github.com/boa-dev/boa/commit/8657dd2b116da01b024ea9b11ed7f211cbdfc887"
        },
        "date": 1656603555381,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 254,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5133,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17848,
            "range": "± 1237",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19497,
            "range": "± 1119",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11237,
            "range": "± 655",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11757,
            "range": "± 393",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13657,
            "range": "± 1013",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8285,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10953,
            "range": "± 1099",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9809,
            "range": "± 579",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11935,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14016,
            "range": "± 703",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16711,
            "range": "± 798",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 170332,
            "range": "± 7139",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8929,
            "range": "± 465",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13076,
            "range": "± 601",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6720,
            "range": "± 237",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13272,
            "range": "± 611",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17074,
            "range": "± 850",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16442,
            "range": "± 564",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6362,
            "range": "± 342",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36472,
            "range": "± 3186",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 33554,
            "range": "± 1655",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1468,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3146,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3177,
            "range": "± 138",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1886,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1893,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2092,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1851,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1852,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2176,
            "range": "± 127",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2114,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1764,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2637,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5090,
            "range": "± 469",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2226,
            "range": "± 160",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2914,
            "range": "± 242",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1783,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1219,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1313,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1667,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 632,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5476,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4955,
            "range": "± 327",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5141,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20190,
            "range": "± 1038",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1619205,
            "range": "± 92327",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6535,
            "range": "± 449",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6928,
            "range": "± 496",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7008,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11097,
            "range": "± 785",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10395,
            "range": "± 369",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14251,
            "range": "± 767",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14063,
            "range": "± 607",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9540,
            "range": "± 615",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2620212,
            "range": "± 137007",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1210421,
            "range": "± 53250",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5491,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5792,
            "range": "± 429",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5235,
            "range": "± 874",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3783,
            "range": "± 162",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4912,
            "range": "± 262",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7079,
            "range": "± 353",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 670,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 839108,
            "range": "± 55598",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 768221,
            "range": "± 43336",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "a2a33e749fa201205bb10a828afd24a3919fb4d6",
          "message": "Bump webpack-dev-server from 4.9.2 to 4.9.3 (#2151)\n\nBumps [webpack-dev-server](https://github.com/webpack/webpack-dev-server) from 4.9.2 to 4.9.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/releases\">webpack-dev-server's releases</a>.</em></p>\n<blockquote>\n<h2>v4.9.3</h2>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.2...v4.9.3\">4.9.3</a> (2022-06-29)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>avoid creation unnecessary stream for static sockjs file (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4482\">#4482</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/049b153b87ab908ae53b71356e0716bb3fc5bf07\">049b153</a>)</li>\n<li>history-api-fallback now supports HEAD requests and handles them the same as GET (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8936082809a9575f231afbcad6a32bb8e14d6dce\">8936082</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/webpack/webpack-dev-server/blob/master/CHANGELOG.md\">webpack-dev-server's changelog</a>.</em></p>\n<blockquote>\n<h3><a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.2...v4.9.3\">4.9.3</a> (2022-06-29)</h3>\n<h3>Bug Fixes</h3>\n<ul>\n<li>avoid creation unnecessary stream for static sockjs file (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4482\">#4482</a>) (<a href=\"https://github.com/webpack/webpack-dev-server/commit/049b153b87ab908ae53b71356e0716bb3fc5bf07\">049b153</a>)</li>\n<li>history-api-fallback now supports HEAD requests and handles them the same as GET (<a href=\"https://github.com/webpack/webpack-dev-server/commit/8936082809a9575f231afbcad6a32bb8e14d6dce\">8936082</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/fa5e454d197fc6ce7441f6c28449e1d35c83cefc\"><code>fa5e454</code></a> chore(release): 4.9.3</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/42facd28ebe3c3da40ce9d5f0f14148636a7ec0f\"><code>42facd2</code></a> chore(deps-dev): bump <code>@​babel/plugin-transform-object-assign</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4506\">#4506</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/257549bd8a5caec964310f7bcb7573cc93d42b1e\"><code>257549b</code></a> chore(deps-dev): bump <code>@​babel/cli</code> from 7.17.10 to 7.18.6 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4507\">#4507</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/8936082809a9575f231afbcad6a32bb8e14d6dce\"><code>8936082</code></a> fix: history-api-fallback now supports HEAD requests and handles them the sam...</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/e0c4e7edf38c753a65da0cd6ac748c37775f7c20\"><code>e0c4e7e</code></a> chore(deps-dev): bump <code>@​babel/core</code> from 7.18.5 to 7.18.6 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4504\">#4504</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/0370b5a527fed3e6f177b8f0831c7bed45871b48\"><code>0370b5a</code></a> chore(deps-dev): bump <code>@​babel/runtime</code> from 7.18.3 to 7.18.6 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4503\">#4503</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/73129c7f9d9493152faf6f5b2124f30f15994b2e\"><code>73129c7</code></a> chore(deps-dev): bump <code>@​babel/plugin-transform-runtime</code> (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4505\">#4505</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/0e0100201c1a28b609c6d0e76298dce90340a476\"><code>0e01002</code></a> chore(deps-dev): bump <code>@​babel/preset-env</code> from 7.18.2 to 7.18.6 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4502\">#4502</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/8866300f05ec13f762e1fc37ef5ff5efb52849d3\"><code>8866300</code></a> refactor: move scripts to same folder (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4500\">#4500</a>)</li>\n<li><a href=\"https://github.com/webpack/webpack-dev-server/commit/7f1f2027dc798c24f181f2861c365fa5caf8c30e\"><code>7f1f202</code></a> chore(deps-dev): bump core-js from 3.23.2 to 3.23.3 (<a href=\"https://github-redirect.dependabot.com/webpack/webpack-dev-server/issues/4499\">#4499</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/webpack/webpack-dev-server/compare/v4.9.2...v4.9.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-server&package-manager=npm_and_yarn&previous-version=4.9.2&new-version=4.9.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-06-30T15:14:36Z",
          "tree_id": "d5fcb507cce22e61b3c3d1834c67be441e7ff5eb",
          "url": "https://github.com/boa-dev/boa/commit/a2a33e749fa201205bb10a828afd24a3919fb4d6"
        },
        "date": 1656604551404,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 163,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 3723,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 11890,
            "range": "± 1144",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 13576,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 7836,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 8409,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 8987,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 5437,
            "range": "± 57",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 7044,
            "range": "± 269",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 6980,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 8534,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 9974,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 11635,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 110771,
            "range": "± 946",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 6423,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 9378,
            "range": "± 631",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 4950,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 9211,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 11798,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 11768,
            "range": "± 186",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 4359,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 25025,
            "range": "± 131",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 21813,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 820,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 1937,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2073,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1152,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1170,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1323,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1183,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1187,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1321,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1309,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1104,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 1750,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3263,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1307,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 1688,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1060,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 794,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 831,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1047,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 376,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 3598,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 3162,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 3131,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 11902,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1029147,
            "range": "± 39697",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 3640,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 3799,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 3852,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 6644,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 6646,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 8949,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 8935,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 6220,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1779801,
            "range": "± 30415",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 826566,
            "range": "± 4901",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 3203,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 3410,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 3040,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 2552,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 3314,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 4588,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 357,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 551933,
            "range": "± 3682",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 510151,
            "range": "± 3681",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "committer": {
            "email": "jedel0124@gmail.com",
            "name": "jedel1043",
            "username": "jedel1043"
          },
          "distinct": false,
          "id": "f7aef10a61f8f784feaf5d995b944afc0221396b",
          "message": "Remove `string-interner` dependency and implement custom string `Interner` (#2147)\n\nSo, @raskad and myself had a short discussion about the state of #736, and we came to the conclusion that it would be a good time to implement our own string interner; partly because the `string-interner` crate is a bit unmaintained (as shown by https://github.com/Robbepop/string-interner/pull/42 and https://github.com/Robbepop/string-interner/pull/47), and partly because it would be hard to experiment with custom optimizations for UTF-16 strings. I still want to thank @Robbepop for the original implementation though, because some parts of this design have been shamelessly stolen from it 😅.\r\n\r\nHaving said that, this PR is a complete reimplementation of the interner, but with some modifications to (hopefully!) make it a bit easier to experiment with UTF-16 strings, apply optimizations, and whatnot :)",
          "timestamp": "2022-06-30T15:34:22Z",
          "tree_id": "468cafc189f4c1e73410e1a55ecb457c9915409c",
          "url": "https://github.com/boa-dev/boa/commit/f7aef10a61f8f784feaf5d995b944afc0221396b"
        },
        "date": 1656606030059,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 293,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 6333,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19798,
            "range": "± 1333",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 22642,
            "range": "± 1396",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12716,
            "range": "± 644",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 14137,
            "range": "± 2193",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14840,
            "range": "± 3081",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8860,
            "range": "± 499",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11874,
            "range": "± 586",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11974,
            "range": "± 806",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14228,
            "range": "± 1004",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16948,
            "range": "± 1044",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19668,
            "range": "± 914",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 187617,
            "range": "± 6460",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10591,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 15269,
            "range": "± 531",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7961,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14955,
            "range": "± 559",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19509,
            "range": "± 2429",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18660,
            "range": "± 661",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7780,
            "range": "± 396",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 40418,
            "range": "± 1507",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 35262,
            "range": "± 787",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1638,
            "range": "± 94",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3584,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3795,
            "range": "± 315",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2222,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2152,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2381,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2211,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2134,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2408,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2443,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 2061,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3154,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5910,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2450,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3158,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 2027,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1465,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1503,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1871,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 731,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6406,
            "range": "± 339",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5824,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 6152,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 23494,
            "range": "± 907",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1967820,
            "range": "± 77524",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 7136,
            "range": "± 655",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7449,
            "range": "± 400",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7507,
            "range": "± 305",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11885,
            "range": "± 418",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 12306,
            "range": "± 611",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 16329,
            "range": "± 881",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15889,
            "range": "± 697",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10867,
            "range": "± 765",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3361702,
            "range": "± 282206",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1500915,
            "range": "± 46456",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 6200,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6581,
            "range": "± 494",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5944,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4536,
            "range": "± 179",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 6063,
            "range": "± 426",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8441,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 711,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 941974,
            "range": "± 32917",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 889111,
            "range": "± 36499",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "6b4ebf9e3e5d61358aa502d52a230db9bc51b4cf",
          "message": "Fix clippy 1.62.0 lints (#2154)\n\nThis Pull Request changes the following:\r\n\r\n- Fix clippy 1.62.0 lints",
          "timestamp": "2022-06-30T21:28:19Z",
          "tree_id": "4ca0121b3fe9129694da5591e63b2ec219c334af",
          "url": "https://github.com/boa-dev/boa/commit/6b4ebf9e3e5d61358aa502d52a230db9bc51b4cf"
        },
        "date": 1656627012309,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 233,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5297,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16378,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18713,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10924,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11713,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12438,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7491,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9846,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9517,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11785,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13913,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16028,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 155945,
            "range": "± 1040",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8844,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12753,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6759,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12941,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16679,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16254,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6207,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34694,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30094,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1118,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2686,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2820,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1596,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1610,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1819,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1635,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1647,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1826,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1833,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1513,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2325,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4068,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1802,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2359,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1485,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1066,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1132,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1448,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 503,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4997,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4395,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4517,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16612,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1400005,
            "range": "± 5623",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5168,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5316,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5376,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9233,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9234,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12223,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12349,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8532,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2493599,
            "range": "± 2262",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1165251,
            "range": "± 7319",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4567,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4788,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4310,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3467,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4588,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6358,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 501,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 738761,
            "range": "± 4087",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 688913,
            "range": "± 4080",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "aaeee43c4fed35c2772e24c1ad05a624a8c18cf6",
          "message": "Fix `this` in function calls (#2153)\n\nThis Pull Request changes the following:\r\n\r\n- Fix the `this` value that is passend to function calls to be `undefined` if the function is not a property reference\r\n- Add special handling for setting the `this` value for function calls where the function is a private property reference or a super property reference",
          "timestamp": "2022-07-01T10:42:21Z",
          "tree_id": "a1cb6cc220514d4eb93f84f55c8bc6958f809334",
          "url": "https://github.com/boa-dev/boa/commit/aaeee43c4fed35c2772e24c1ad05a624a8c18cf6"
        },
        "date": 1656674566791,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 245,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5248,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16355,
            "range": "± 1396",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18925,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10947,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11772,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12410,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7629,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10082,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9696,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12045,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14081,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16148,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 155489,
            "range": "± 408",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8933,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12717,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6784,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12907,
            "range": "± 335",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17067,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16513,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6128,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34932,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30424,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1118,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2677,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2805,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1603,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1647,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1845,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1630,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1628,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1833,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1832,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1513,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2288,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4190,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1813,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2358,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1479,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1094,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1157,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1465,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 507,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5027,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4465,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4424,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16382,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1422892,
            "range": "± 7072",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5103,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5259,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5379,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9136,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9198,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12253,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12221,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8484,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2484088,
            "range": "± 3664",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1135368,
            "range": "± 26482",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4518,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4749,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4235,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3507,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4444,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6243,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 501,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 744823,
            "range": "± 8483",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 690284,
            "range": "± 8971",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "4a8bf02431bb96bbc6fc03773a3c90897f98b330",
          "message": "Bump clap from 3.2.7 to 3.2.8 (#2155)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.7 to 3.2.8.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.8</h2>\n<h2>[3.2.8] - 2022-06-30</h2>\n<h3>Features</h3>\n<ul>\n<li>Added <code>Command::mut_subcommand</code> to mirror <code>Command::mut_arg</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.8] - 2022-06-30</h2>\n<h3>Features</h3>\n<ul>\n<li>Added <code>Command::mut_subcommand</code> to mirror <code>Command::mut_arg</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6614ffa6c8b90fa93c35c530febb119c7e10ba58\"><code>6614ffa</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/a67746ecbe21e14dff3be02dfe988978a069cda3\"><code>a67746e</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5ca73f3299054e084591134711db46599ff7f357\"><code>5ca73f3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3882\">#3882</a> from emersonford/mut_subcommands</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/619f2091389b3303222163c3a2edf9e7a29d3121\"><code>619f209</code></a> feat: Add <code>mut_subcommand</code> method to Command</li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.7...v3.2.8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.7&new-version=3.2.8)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-01T10:59:18Z",
          "tree_id": "d6614c9ac8b032f876f78fc6986a1b8e15858285",
          "url": "https://github.com/boa-dev/boa/commit/4a8bf02431bb96bbc6fc03773a3c90897f98b330"
        },
        "date": 1656675777345,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 280,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5959,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 19526,
            "range": "± 964",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21425,
            "range": "± 721",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12966,
            "range": "± 385",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13776,
            "range": "± 372",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14389,
            "range": "± 534",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8927,
            "range": "± 274",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11756,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11302,
            "range": "± 378",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 14020,
            "range": "± 500",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 16037,
            "range": "± 579",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 19285,
            "range": "± 584",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 188623,
            "range": "± 7555",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10131,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14294,
            "range": "± 833",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7656,
            "range": "± 298",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14760,
            "range": "± 602",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19363,
            "range": "± 667",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18741,
            "range": "± 892",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7351,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 40710,
            "range": "± 1182",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34711,
            "range": "± 1160",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1587,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3584,
            "range": "± 294",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3870,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2193,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2210,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2530,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2219,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2252,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2475,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2518,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 2117,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 3106,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5702,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2551,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 3259,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 2105,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1494,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1566,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1998,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 730,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6457,
            "range": "± 415",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5832,
            "range": "± 280",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5738,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 22606,
            "range": "± 851",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1832305,
            "range": "± 78202",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6887,
            "range": "± 234",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 7019,
            "range": "± 303",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7174,
            "range": "± 262",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 12021,
            "range": "± 731",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11619,
            "range": "± 336",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15903,
            "range": "± 575",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15782,
            "range": "± 420",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10710,
            "range": "± 460",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 3391681,
            "range": "± 119333",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1461335,
            "range": "± 43229",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5916,
            "range": "± 332",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6262,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5661,
            "range": "± 223",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4307,
            "range": "± 136",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5575,
            "range": "± 235",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 8138,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 698,
            "range": "± 224",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 903055,
            "range": "± 35435",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 817702,
            "range": "± 35074",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "bd0bf7838349b4a88960fb8845a6190fdc786d57",
          "message": "Fix remaining `Promise` bugs (#2156)\n\nThis Pull Request changes the following:\r\n\r\n- Fix `Promise.then` length to 2.\r\n- Fix `all`, `allSettled` and `any` element lists to actually be shared between closures.\r\n- Fix `allSettled` reject element function to call resolve instead of reject.\r\n\r\nThe remaining failing tests for `Promise` fail because of some errors in the arrow function parsing.",
          "timestamp": "2022-07-01T14:34:34Z",
          "tree_id": "98027af0c7f2666c6d5e4947078db934a9b050d2",
          "url": "https://github.com/boa-dev/boa/commit/bd0bf7838349b4a88960fb8845a6190fdc786d57"
        },
        "date": 1656688318323,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 252,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5067,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16707,
            "range": "± 319",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19247,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10967,
            "range": "± 487",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11450,
            "range": "± 616",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12744,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7602,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9836,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9318,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11944,
            "range": "± 197",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14186,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16599,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 163521,
            "range": "± 1149",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8938,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13126,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6732,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13655,
            "range": "± 147",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17325,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17348,
            "range": "± 437",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6517,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35190,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30401,
            "range": "± 420",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1257,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2916,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3056,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1741,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1741,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1939,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1722,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1738,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1955,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1938,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1665,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2484,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4596,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2027,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2630,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1604,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1136,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1196,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1613,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 620,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5440,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4810,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4981,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19677,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1562714,
            "range": "± 8402",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5939,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6132,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6318,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10455,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10340,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13716,
            "range": "± 165",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13505,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9358,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2913547,
            "range": "± 34051",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1322954,
            "range": "± 13630",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5171,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5272,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4716,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3837,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4975,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7056,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 730,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 855879,
            "range": "± 46687",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 776478,
            "range": "± 7466",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "76abc802e6276ca65e33fa6ac2a9af44c490ad4f",
          "message": "Bump test262 from `5e564b9` to `1b3bddb` (#2161)\n\nBumps [test262](https://github.com/tc39/test262) from `5e564b9` to `1b3bddb`.\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/tc39/test262/commit/1b3bddbeff6b1de63d38250c283e212fe27ffb2d\"><code>1b3bddb</code></a> Fix spelling in test description</li>\n<li><a href=\"https://github.com/tc39/test262/commit/704c9cea9c0801b1b69eb331d457cd7352d286aa\"><code>704c9ce</code></a> Temporal: Test validation of overflow option for conversion fast paths</li>\n<li><a href=\"https://github.com/tc39/test262/commit/392f0049d7862dc5a4a2f3307c5e64cbd9b15f3b\"><code>392f004</code></a> test invalid negative durations objects</li>\n<li><a href=\"https://github.com/tc39/test262/commit/f6179a6eb62c0ce83f32d8f11d127463fe30ee1a\"><code>f6179a6</code></a> Temporal: Test observable calendar.mergeFields() calls with null-prototype ob...</li>\n<li><a href=\"https://github.com/tc39/test262/commit/f314ecb9f4eef0e33a4ef368bb7e28600697b75b\"><code>f314ecb</code></a> Temporal: Test observable calls on fields object from PrepareTemporalFields</li>\n<li><a href=\"https://github.com/tc39/test262/commit/ca74e801b27912a1dcd83245b0031044f806fda1\"><code>ca74e80</code></a> Temporal: Test observable calendar.yearMonthFromFields() calls with null-prot...</li>\n<li><a href=\"https://github.com/tc39/test262/commit/0c33b093375596b93b905625b9e9217fb5ad0456\"><code>0c33b09</code></a> Temporal: Test observable calendar.dateUntil() calls with null-prototype options</li>\n<li>See full diff in <a href=\"https://github.com/tc39/test262/compare/5e564b96e781d3e220cead94015b5c8cd705fc10...1b3bddbeff6b1de63d38250c283e212fe27ffb2d\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-04T12:21:29Z",
          "tree_id": "1f962b33752535a00ca84eb352bd3f174b1fc6c6",
          "url": "https://github.com/boa-dev/boa/commit/76abc802e6276ca65e33fa6ac2a9af44c490ad4f"
        },
        "date": 1656939333512,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 252,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4902,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15369,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17523,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10206,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10878,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11677,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7141,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9341,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9128,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11116,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13045,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15046,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145542,
            "range": "± 209",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8285,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11866,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6234,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12289,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15621,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15271,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5920,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32397,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28310,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1058,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2493,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2640,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1495,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1526,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1680,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1509,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1508,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1675,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1682,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1416,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2191,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3950,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1681,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2222,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1381,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1068,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1133,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1411,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 524,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4679,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4122,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4170,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16379,
            "range": "± 146",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1312176,
            "range": "± 4725",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4991,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5153,
            "range": "± 87",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5306,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8762,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8716,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11624,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11596,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7918,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2457579,
            "range": "± 2674",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1112493,
            "range": "± 3848",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4349,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4547,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4089,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3189,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4138,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5973,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 625,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 698760,
            "range": "± 3458",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 648286,
            "range": "± 2980",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "cdaffa788a0238833e7e9228510b952140023179",
          "message": "Bump serde from 1.0.137 to 1.0.138 (#2159)\n\nBumps [serde](https://github.com/serde-rs/serde) from 1.0.137 to 1.0.138.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/serde/releases\">serde's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.138</h2>\n<ul>\n<li>Documentation improvements</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/serde/commit/4b622f6bbf83e1e55b171203775e53bc11eb2011\"><code>4b622f6</code></a> Release 1.0.138</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/0ee71c70af8e0b6f29c1c696538fb2ebc081e2d2\"><code>0ee71c7</code></a> Ignore explicit_auto_deref clippy lint</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/6c098e497e9098f8fc09ebed5317a97637bf23a3\"><code>6c098e4</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2240\">#2240</a> from Kixunil/patch-1</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/41ffa6df7ed3d76d91a06836849a04488cdb4878\"><code>41ffa6d</code></a> Call <code>reserve()</code> in <code>DeserializeSeed</code> example</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/845b900fd57c46d81ad02d89c9a173bdb75898b6\"><code>845b900</code></a> Exclude deliberately pinned prettyplease crate from cargo outdated</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/7891ae71848794ef5abd8d54f325979905f81aad\"><code>7891ae7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2228\">#2228</a> from serde-rs/expandtest</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/bac90d19b9d6730ed8247b891a960b64dfaedad3\"><code>bac90d1</code></a> Update macrotest to 1.0.9 and enable in CI</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/227bf3023a6557639e8639d52455b8b883b69de7\"><code>227bf30</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2229\">#2229</a> from dtolnay/expandlinguist</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/f4535f68c1a414937c427e45eb6e957f1264b038\"><code>f4535f6</code></a> Mark expandtest outputs as generated code</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/c6c35b5a3125bd2de3f73de121c99614fd960552\"><code>c6c35b5</code></a> Ignore buggy doc_link_with_quotes clippy lint</li>\n<li>Additional commits viewable in <a href=\"https://github.com/serde-rs/serde/compare/v1.0.137...v1.0.138\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde&package-manager=cargo&previous-version=1.0.137&new-version=1.0.138)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-04T12:35:08Z",
          "tree_id": "1d6f71e2bdc34d5f9a58700e1c6a0ca0e36136d8",
          "url": "https://github.com/boa-dev/boa/commit/cdaffa788a0238833e7e9228510b952140023179"
        },
        "date": 1656940839159,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 292,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5968,
            "range": "± 1619",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18381,
            "range": "± 1049",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21145,
            "range": "± 1335",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12023,
            "range": "± 844",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13167,
            "range": "± 1141",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14227,
            "range": "± 1010",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8612,
            "range": "± 523",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11288,
            "range": "± 746",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 11198,
            "range": "± 803",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13724,
            "range": "± 1267",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15498,
            "range": "± 1480",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17897,
            "range": "± 1494",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 178186,
            "range": "± 12367",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9586,
            "range": "± 729",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13583,
            "range": "± 752",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6970,
            "range": "± 485",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13946,
            "range": "± 944",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17848,
            "range": "± 993",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17824,
            "range": "± 1289",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6933,
            "range": "± 448",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 36684,
            "range": "± 2553",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31986,
            "range": "± 2211",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1489,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3320,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3540,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1993,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2009,
            "range": "± 149",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2253,
            "range": "± 125",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2013,
            "range": "± 123",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1995,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2228,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2251,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1891,
            "range": "± 124",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2910,
            "range": "± 188",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4975,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2196,
            "range": "± 115",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2867,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1865,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1302,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1397,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1724,
            "range": "± 176",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 701,
            "range": "± 59",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6024,
            "range": "± 678",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5418,
            "range": "± 387",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5684,
            "range": "± 1409",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 22036,
            "range": "± 2263",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1797690,
            "range": "± 97032",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6621,
            "range": "± 646",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6839,
            "range": "± 515",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6745,
            "range": "± 736",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11317,
            "range": "± 1119",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11582,
            "range": "± 616",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14431,
            "range": "± 1061",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15569,
            "range": "± 906",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9870,
            "range": "± 1312",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2744399,
            "range": "± 163468",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1259158,
            "range": "± 92798",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5522,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5869,
            "range": "± 275",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5321,
            "range": "± 380",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4083,
            "range": "± 233",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5487,
            "range": "± 460",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7846,
            "range": "± 488",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 692,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 845539,
            "range": "± 39237",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 769900,
            "range": "± 43507",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "cdc49e35eaac842ba33d89722cdd9c433123c936",
          "message": "Implement `async function` and `await` (#2158)\n\nThis Pull Request changes the following:\r\n\r\n- Implement `AsyncFunction` builtin object.\r\n- Add `Async` as a function object data type.\r\n- Implement `async function` and `await` compilation and execution.\r\n- Parse `await` in more positions.",
          "timestamp": "2022-07-05T10:05:42Z",
          "tree_id": "37dc9d60589131100badd462186dc3b8fe3f8fd1",
          "url": "https://github.com/boa-dev/boa/commit/cdc49e35eaac842ba33d89722cdd9c433123c936"
        },
        "date": 1657017903764,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 233,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4876,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15240,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17543,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10144,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10936,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11547,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7025,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9265,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8971,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11163,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12830,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14950,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 142288,
            "range": "± 193",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8231,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11712,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6196,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12323,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15947,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15400,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5845,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32209,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28220,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1088,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2506,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2653,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1522,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1520,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1719,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1539,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1542,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1723,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1703,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1440,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2186,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4104,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1760,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2246,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1421,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1080,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1153,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1429,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 552,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4693,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4073,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4199,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16187,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1350017,
            "range": "± 4716",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5094,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5243,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5408,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9378,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9365,
            "range": "± 52",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12414,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12446,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8081,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2541586,
            "range": "± 6645",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1162380,
            "range": "± 6555",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4402,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4618,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4116,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3172,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4169,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6055,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 619,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 722550,
            "range": "± 3705",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 674837,
            "range": "± 5358",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "64f59ddacb32b27af87b3921fc5ccec689dd9938",
          "message": "Store call frames in `Vec` instead of singly-linked list (#2164)\n\nThis storage method should be more cache friendly since we store in contiguous memory, besides that it should make #2157 a bit easier. Will work on that next after this gets merged :)\r\n\r\nIt changes the following:\r\n- Remove the unneeded `prev` field in `CallFrame`\r\n- Preallocate some space for future calls (16 slots)",
          "timestamp": "2022-07-05T14:32:55Z",
          "tree_id": "e38469f64d45161a425fd21b6697c5652eb2e48a",
          "url": "https://github.com/boa-dev/boa/commit/64f59ddacb32b27af87b3921fc5ccec689dd9938"
        },
        "date": 1657034165092,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 222,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4861,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15158,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17380,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10058,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10779,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11502,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6942,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9144,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8878,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 10974,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12805,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 14980,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143682,
            "range": "± 325",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8218,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11768,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6208,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12143,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15407,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 14927,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5811,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32236,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28102,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1065,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2471,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2619,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1524,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1537,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1725,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1519,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1518,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1714,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1713,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1429,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2145,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4192,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1697,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2213,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1391,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1072,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1129,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1424,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 542,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4623,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4090,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4219,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16921,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1339794,
            "range": "± 2765",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5113,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5288,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5440,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9017,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8940,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12060,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12050,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8136,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2558975,
            "range": "± 5082",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1157052,
            "range": "± 8473",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4357,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4698,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4113,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3304,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4230,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6198,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 660,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 716932,
            "range": "± 3096",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 667942,
            "range": "± 3735",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "7a5da521d2fd11992b29b40f03e54a18273e5e72",
          "message": "Bump once_cell from 1.12.0 to 1.13.0 (#2165)\n\nBumps [once_cell](https://github.com/matklad/once_cell) from 1.12.0 to 1.13.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/matklad/once_cell/blob/master/CHANGELOG.md\">once_cell's changelog</a>.</em></p>\n<blockquote>\n<h2>1.13.0</h2>\n<ul>\n<li>Add <code>Lazy::get</code>, similar to <code>OnceCell::get</code>.</li>\n</ul>\n<h2>1.12.1</h2>\n<ul>\n<li>Remove incorrect <code>debug_assert</code>.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/matklad/once_cell/commit/eda22cec55e9d37b16d408b7d0a5b396c7feb44c\"><code>eda22ce</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/183\">#183</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/2b0e3e5d8325000d84881de8eff08f0a86f3a9a6\"><code>2b0e3e5</code></a> Publish 1.13.0</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/61e27f9ff512b69bbdb11df63748671f33ef241b\"><code>61e27f9</code></a> Add a <code>Lazy::get</code> function, similar to <code>OnceCell::get</code></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/2be67cc0e36d35be999a6fe91fe40045b6b24ef2\"><code>2be67cc</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/187\">#187</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c2ce5bd9a47d4ced67ce94b8ee0cbd024f4ae8ee\"><code>c2ce5bd</code></a> remove incorrect debug assert</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/2cdfc1e0a92c8e51534cd91c49f41478a61a5ab6\"><code>2cdfc1e</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/184\">#184</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/b7839edeb61603ac29dc165c43eb94f2f9bbaa0e\"><code>b7839ed</code></a> reduce iteration counts for Miri</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/c1a3827bd5360f74a4ffe71cae3bbd90312d0f8a\"><code>c1a3827</code></a> Miri has gained some more features</li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/485aaa83f38fb65a949a97448f94393259f94ef4\"><code>485aaa8</code></a> Merge <a href=\"https://github-redirect.dependabot.com/matklad/once_cell/issues/180\">#180</a></li>\n<li><a href=\"https://github.com/matklad/once_cell/commit/a36132d4513f7316576a3b45ddb768210f0825ab\"><code>a36132d</code></a> Fix comment of not new but get_mut</li>\n<li>Additional commits viewable in <a href=\"https://github.com/matklad/once_cell/compare/v1.12.0...v1.13.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=once_cell&package-manager=cargo&previous-version=1.12.0&new-version=1.13.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-05T14:55:41Z",
          "tree_id": "d6159e08d4797b779e8ace23aa920bf06be26dbe",
          "url": "https://github.com/boa-dev/boa/commit/7a5da521d2fd11992b29b40f03e54a18273e5e72"
        },
        "date": 1657035400993,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 280,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5345,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17263,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19946,
            "range": "± 1106",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11651,
            "range": "± 517",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12103,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13164,
            "range": "± 621",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7934,
            "range": "± 222",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10355,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9908,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12343,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14552,
            "range": "± 1032",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16706,
            "range": "± 106",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 161958,
            "range": "± 456",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9240,
            "range": "± 381",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13371,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6933,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13651,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17965,
            "range": "± 764",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17079,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6454,
            "range": "± 164",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 37415,
            "range": "± 2310",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31710,
            "range": "± 1559",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1294,
            "range": "± 76",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2923,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3132,
            "range": "± 257",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1767,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1795,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2048,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1785,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1854,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1985,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2065,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1690,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2640,
            "range": "± 85",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5066,
            "range": "± 258",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2088,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2737,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1646,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1170,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1247,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1585,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 660,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5422,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4942,
            "range": "± 515",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5070,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21305,
            "range": "± 1629",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1581657,
            "range": "± 4976",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6262,
            "range": "± 395",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6328,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6702,
            "range": "± 350",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11170,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11539,
            "range": "± 345",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14681,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14680,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9678,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2959899,
            "range": "± 11863",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1352599,
            "range": "± 9879",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5279,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5638,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5140,
            "range": "± 163",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4079,
            "range": "± 201",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5285,
            "range": "± 658",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7507,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 847,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 858569,
            "range": "± 5103",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 799683,
            "range": "± 6142",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "36f93a538020cefb68980972dfd089dd84a03666",
          "message": "Update test262 (#2166)\n\nChanges:\r\n - Update test262 submodule",
          "timestamp": "2022-07-05T19:39:06Z",
          "tree_id": "69a6601ce959fb422eae1e30e04eb95a3fbbbec9",
          "url": "https://github.com/boa-dev/boa/commit/36f93a538020cefb68980972dfd089dd84a03666"
        },
        "date": 1657052149815,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 257,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5326,
            "range": "± 282",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17658,
            "range": "± 1099",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 20195,
            "range": "± 2042",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11121,
            "range": "± 565",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12039,
            "range": "± 719",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12936,
            "range": "± 723",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7686,
            "range": "± 366",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10617,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9834,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12506,
            "range": "± 698",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14293,
            "range": "± 711",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16877,
            "range": "± 1098",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 176610,
            "range": "± 8233",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9499,
            "range": "± 636",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13310,
            "range": "± 701",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7065,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13423,
            "range": "± 597",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17127,
            "range": "± 1204",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16601,
            "range": "± 817",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6299,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 35774,
            "range": "± 1355",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 31699,
            "range": "± 2935",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1442,
            "range": "± 69",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3050,
            "range": "± 166",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3258,
            "range": "± 116",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1816,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1865,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2088,
            "range": "± 143",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1869,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1903,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2103,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2078,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1765,
            "range": "± 150",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2656,
            "range": "± 142",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4519,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2094,
            "range": "± 113",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2928,
            "range": "± 271",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1717,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1241,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1322,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1667,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 680,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6038,
            "range": "± 449",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5187,
            "range": "± 250",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5453,
            "range": "± 405",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 20699,
            "range": "± 1313",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1681627,
            "range": "± 68657",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6315,
            "range": "± 447",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6433,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6879,
            "range": "± 393",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10665,
            "range": "± 722",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10940,
            "range": "± 984",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14694,
            "range": "± 799",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14673,
            "range": "± 1338",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9616,
            "range": "± 1002",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2711490,
            "range": "± 173467",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1196797,
            "range": "± 49089",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5464,
            "range": "± 557",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5696,
            "range": "± 304",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5092,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4076,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5199,
            "range": "± 351",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7469,
            "range": "± 346",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 744,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 827385,
            "range": "± 39391",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 747447,
            "range": "± 56284",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "nekevss@gmail.com",
            "name": "Kevin",
            "username": "nekevss"
          },
          "committer": {
            "email": "nekevss@gmail.com",
            "name": "Kevin",
            "username": "nekevss"
          },
          "distinct": false,
          "id": "d0d70345eb0c48dd243de0706b6c039b968b8736",
          "message": "Implementation of JsMap Wrapper (#2115)\n\n<!---\r\nThank you for contributing to Boa! Please fill out the template below, and remove or add any\r\ninformation as you feel neccessary.\r\n--->\r\n\r\nThis Pull Request related to JsMap for #2098.\r\n\r\nAny feedback on implementing JsMapIterator would be welcome. I wasn't entirely sure if it was the right approach, but as I worked on the example file, it felt like something at least similar would be needed to use Map's .entries(), .keys(), and .values() methods.\r\n\r\nIt changes the following:\r\n\r\n- Implements JsMap Wrapper\r\n- Implements JsMapIterator Wrapper\r\n- Creates JsMap example in boa_examples",
          "timestamp": "2022-07-06T02:06:06Z",
          "tree_id": "56f0563c784b4ac6dde0108b678ccc1642cf9003",
          "url": "https://github.com/boa-dev/boa/commit/d0d70345eb0c48dd243de0706b6c039b968b8736"
        },
        "date": 1657075431017,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 233,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4896,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15347,
            "range": "± 301",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17494,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10250,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10907,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11675,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7072,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9386,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 8997,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11235,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 12906,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15044,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 143400,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8239,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11824,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6208,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12240,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15604,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15141,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5836,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32467,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28274,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1063,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2474,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2614,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1488,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1507,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1689,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1517,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1510,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1712,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1679,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1421,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2134,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4065,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1708,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2206,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1380,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1083,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1138,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1418,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 537,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4668,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4083,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4214,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16944,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1323416,
            "range": "± 16579",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5121,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5226,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5397,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9218,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9222,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12342,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12289,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8064,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 2464822,
            "range": "± 4249",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 1131467,
            "range": "± 26836",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4385,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4633,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4138,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3342,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4339,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6177,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 689,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 717136,
            "range": "± 3096",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 666047,
            "range": "± 2895",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "5bbc225b24245c98427bf8c66d37ee42ada4a337",
          "message": "Dense/Packed JavaScript arrays (#2167)\n\nThis PR implements an optimization done by V8 and spidermonkey. Which stores indexed properties in two class storage methods dense and sparse. The dense method stores the property in a contiguous array ( `Vec<T>` ) where the index is the property key. This storage method is the default. While on the other hand we have sparse storage method which stores them in a hash map with key `u32` (like we currently do). This storage method is a backup and is slower to access because we have to do a hash map lookup, instead of an array access.\r\n\r\nIn the dense array we can store only data descriptors that have a value field and are `writable`, `configurable` and `enumerable` (which by default array elements are). Since all the fields of the property descriptor are the same except value field, we can omit them an just store the `JsValue`s in `Vec<JsValue>` this decreases the memory consumption and because it is smaller we are less likely to have cache misses.\r\n\r\nThere are cases where we have to convert from dense to sparse (the slow case):\r\n- If we insert index elements in a non-incremental way, like `array[1000] = 1000` (inserting an element to an index that is already occupied only replaces it does not make it sparse)\r\n- If we delete from the middle of the array (making a hole), like `delete array[10]`  (only converts if there is actualy an element there, so calling delete on a non-existent index property will do nothing)\r\n\r\nOnce it becomes sparse is *stays* sparse there is no way to convert it again. (the computation needed to check whether it can be converted outweighs the benefits of this optimization)\r\n\r\nI did some local benchmarks and on array creation/pop and push there is ~45% speed up and the impact _should_ be bigger the more elements we have. For example the code below on `main` takes `~21.5s` while with this optimization is `~3.5s` (both on release build).\r\n\r\n```js\r\nlet array = [];\r\nfor (let i = 0; i < 50000; ++i) {\r\n   array[i] = i;\r\n}\r\n```\r\n\r\nIn addition I also made `Array::create_array_from_list` do a direct setting of the properties (small deviation from spec but it should have the same behaviour), with this #2058 should be fixed, conversion from `Vec` to `JsArray`, not `JsTypedArray` for that I will work on next :)",
          "timestamp": "2022-07-06T23:37:56Z",
          "tree_id": "d0ab1abce5c7e76b6ea38a30d312d99c821053fe",
          "url": "https://github.com/boa-dev/boa/commit/5bbc225b24245c98427bf8c66d37ee42ada4a337"
        },
        "date": 1657152753093,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 239,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4827,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15513,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17709,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10254,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 10978,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11783,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 6998,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9393,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9133,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11274,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13012,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15206,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 144719,
            "range": "± 6174",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8319,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 11971,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6260,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12306,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15557,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15171,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5974,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32577,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28627,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1079,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2506,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2635,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1536,
            "range": "± 359",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1559,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1751,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1539,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1530,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1714,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1692,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1436,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2231,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4221,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1733,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2245,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1426,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1071,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1147,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1436,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 519,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4649,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4119,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4144,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16891,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1283588,
            "range": "± 4431",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4977,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5134,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5279,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9123,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9128,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12208,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12184,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7891,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1121542,
            "range": "± 7231",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 581598,
            "range": "± 1985",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4309,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4566,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4083,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3175,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4143,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5946,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 691,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 600972,
            "range": "± 2693",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 552645,
            "range": "± 2609",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "53d3fc3093959ccc1de96b3482c541a41820f7b4",
          "message": "Bump regex from 1.5.6 to 1.6.0 (#2168)\n\nBumps [regex](https://github.com/rust-lang/regex) from 1.5.6 to 1.6.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/rust-lang/regex/blob/master/CHANGELOG.md\">regex's changelog</a>.</em></p>\n<blockquote>\n<h1>1.6.0 (2022-07-05)</h1>\n<p>This release principally includes an upgrade to Unicode 14.</p>\n<p>New features:</p>\n<ul>\n<li>[FEATURE <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/832\">#832</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/pull/832\">rust-lang/regex#832</a>):\nClarify that <code>Captures::len</code> includes all groups, not just matching groups.</li>\n<li>[FEATURE <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/857\">#857</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/pull/857\">rust-lang/regex#857</a>):\nAdd an <code>ExactSizeIterator</code> impl for <code>SubCaptureMatches</code>.</li>\n<li>[FEATURE <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/861\">#861</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/pull/861\">rust-lang/regex#861</a>):\nImprove <code>RegexSet</code> documentation examples.</li>\n<li>[FEATURE <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/877\">#877</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/877\">rust-lang/regex#877</a>):\nUpgrade to Unicode 14.</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>[BUG <a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/792\">#792</a>](<a href=\"https://github-redirect.dependabot.com/rust-lang/regex/issues/792\">rust-lang/regex#792</a>):\nFix error message rendering bug.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/rust-lang/regex/commit/fc9ee6a249f2d594713c16b1646670924b33334d\"><code>fc9ee6a</code></a> 1.6.0</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/8ddc8ece4bd3ca4cdd068c6895f44fd57b682951\"><code>8ddc8ec</code></a> deps: bump regex-syntax to 0.6.27</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/8c0eccd0c6e775eae8a258d6bd43aca2e5ff92e5\"><code>8c0eccd</code></a> regex-syntax-0.6.27</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/dee5c25d8e4f030182bf61ca56b8819ae0c2f7f2\"><code>dee5c25</code></a> changelog: 1.6.0</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/9ca3099037dcb2faf1b49e6493f4c758532f2da1\"><code>9ca3099</code></a> regex: fix clippy lints up to rust 1.41.1</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/de838287bb9ebd554c078ee75a8e69a59f6e3820\"><code>de83828</code></a> syntax: fix clippy lints up to rust 1.41.1</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/b87cd88476a0eb4c0187321a6ab42c7644531b67\"><code>b87cd88</code></a> syntax: include only the start of the character class on error</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/9d1478cfb5616a4f289c015fffaf7f6228b72b56\"><code>9d1478c</code></a> doc: fix typos</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/7d21662735ffdf585ca6bff773d997fe44a4f868\"><code>7d21662</code></a> doc: clarify Captures::len includes non-matching captures</li>\n<li><a href=\"https://github.com/rust-lang/regex/commit/5e98788947b28da3da27f4e156b877eb0cb1593e\"><code>5e98788</code></a> perf: use is_match_at instead of shortest_match_at</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rust-lang/regex/compare/1.5.6...1.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=regex&package-manager=cargo&previous-version=1.5.6&new-version=1.6.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-07T12:46:26Z",
          "tree_id": "3aaeae427ce52dc9a73f182688abca50d84047b9",
          "url": "https://github.com/boa-dev/boa/commit/53d3fc3093959ccc1de96b3482c541a41820f7b4"
        },
        "date": 1657200421537,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 279,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5876,
            "range": "± 609",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18610,
            "range": "± 712",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21188,
            "range": "± 1520",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12205,
            "range": "± 588",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12867,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13983,
            "range": "± 858",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8313,
            "range": "± 416",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11065,
            "range": "± 675",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10675,
            "range": "± 565",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13183,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15507,
            "range": "± 935",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17967,
            "range": "± 681",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 185195,
            "range": "± 5218",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 10103,
            "range": "± 412",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14451,
            "range": "± 580",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7572,
            "range": "± 601",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14482,
            "range": "± 1443",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18351,
            "range": "± 2062",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17987,
            "range": "± 1257",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7039,
            "range": "± 453",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 39423,
            "range": "± 4772",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34219,
            "range": "± 1174",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1521,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3319,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3523,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2021,
            "range": "± 89",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2032,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2274,
            "range": "± 264",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2072,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2062,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2313,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2309,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1936,
            "range": "± 112",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2889,
            "range": "± 363",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 5065,
            "range": "± 577",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2322,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2985,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1893,
            "range": "± 100",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1375,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1471,
            "range": "± 75",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1836,
            "range": "± 71",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 698,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6096,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5433,
            "range": "± 290",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5544,
            "range": "± 376",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 22065,
            "range": "± 1400",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1770877,
            "range": "± 58437",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6820,
            "range": "± 461",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6981,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7170,
            "range": "± 362",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11696,
            "range": "± 464",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11579,
            "range": "± 702",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15760,
            "range": "± 1022",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15682,
            "range": "± 878",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 10174,
            "range": "± 460",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1364215,
            "range": "± 92503",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 715122,
            "range": "± 35287",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5748,
            "range": "± 421",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6055,
            "range": "± 260",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5456,
            "range": "± 624",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4267,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5462,
            "range": "± 388",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7716,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 794,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 753042,
            "range": "± 35318",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 672181,
            "range": "± 60193",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "d7fb0490826314c90a2ea4865b83d9d593bb7535",
          "message": "Bump unicode-normalization from 0.1.20 to 0.1.21 (#2160)\n\nBumps [unicode-normalization](https://github.com/unicode-rs/unicode-normalization) from 0.1.20 to 0.1.21.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/unicode-rs/unicode-normalization/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=unicode-normalization&package-manager=cargo&previous-version=0.1.20&new-version=0.1.21)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-07T13:01:26Z",
          "tree_id": "dfed4235153be8e6f0a91181a67e55796ea2c649",
          "url": "https://github.com/boa-dev/boa/commit/d7fb0490826314c90a2ea4865b83d9d593bb7535"
        },
        "date": 1657201185651,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 231,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5303,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16831,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19358,
            "range": "± 99",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11436,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12262,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13003,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7827,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10314,
            "range": "± 174",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9906,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12345,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14475,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16531,
            "range": "± 249",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153581,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9267,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13179,
            "range": "± 68",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7012,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13301,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 17042,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 17064,
            "range": "± 154",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5963,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34864,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 30229,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1121,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2832,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2840,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1600,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1619,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1903,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1666,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1666,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1830,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1857,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1518,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2364,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4136,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1814,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2378,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1461,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1101,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1167,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1487,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 528,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4995,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4367,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4397,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16948,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1425987,
            "range": "± 4568",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5132,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5332,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5458,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9216,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9182,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12221,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12189,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8303,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1161503,
            "range": "± 23300",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 642356,
            "range": "± 3037",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4532,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4764,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4261,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3509,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4514,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6195,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 527,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 646961,
            "range": "± 3322",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 601427,
            "range": "± 3490",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "anuvrats06@gmail.com",
            "name": "Anuvrat Singh",
            "username": "anuvratsingh"
          },
          "committer": {
            "email": "anuvrats06@gmail.com",
            "name": "Anuvrat Singh",
            "username": "anuvratsingh"
          },
          "distinct": false,
          "id": "52bc15bc2320cd6cbc661a138ae955ceb0c9597a",
          "message": "Safe wrapper for `JsSet` (#2162)\n\nThis PR adds a safe wrapper around JavaScript `JsSet` from `builtins::set`, and is being tracked at #2098.\r\n\r\nImplements following methods \r\n- [x] `Set.prototype.size`\r\n- [x] `Set.prototype.add(value)`\r\n- [x] `Set.prototype.clear()`\r\n- [x] `Set.prototype.delete(value)`\r\n- [x] `Set.prototype.has(value)`\r\n- [x] `Set.prototype.forEach(callbackFn[, thisArg])`\r\nImplement wrapper for `builtins::set_iterator`, to be used by following.\r\n- [x] `Set.prototype.values()`\r\n- [x] `Set.prototype.keys()`\r\n- [x] `Set.prototype.entries()`\r\n\r\n\r\n*Note: Are there any other functions that should be added?\r\n\r\nAlso adds `set_create()` and made `get_size()` public in `builtins::set`.",
          "timestamp": "2022-07-07T17:26:23Z",
          "tree_id": "993daaa06aab5532db1552590facd88a5746a99c",
          "url": "https://github.com/boa-dev/boa/commit/52bc15bc2320cd6cbc661a138ae955ceb0c9597a"
        },
        "date": 1657216774632,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 231,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4935,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 15626,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 17881,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10373,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11072,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 11855,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7099,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9476,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9129,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11338,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13100,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15363,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 145265,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8496,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12102,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6337,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12455,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15867,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15714,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 5862,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32648,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28307,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1053,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2483,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2646,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1497,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1515,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1735,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1511,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1515,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1685,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1701,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1421,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2159,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4080,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1678,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2194,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1379,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1060,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1123,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1415,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 524,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4635,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4068,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4089,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16725,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1309942,
            "range": "± 7543",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4979,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5149,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5325,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9218,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9275,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12125,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12167,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7785,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1109217,
            "range": "± 4526",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 576725,
            "range": "± 1137",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4269,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4643,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4033,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3240,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4134,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6070,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 693,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 613055,
            "range": "± 2740",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 557940,
            "range": "± 3442",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "committer": {
            "email": "halidodat@gmail.com",
            "name": "Halid Odat",
            "username": "HalidOdat"
          },
          "distinct": false,
          "id": "48d8b420c5ef8e93c8ec04c7e5a3c6419121fff2",
          "message": "Implement `JsArrayBuffer` (#2170)\n\nThis PR adds the `ArrayBuffer` rust wrapper. It also provides a capability to construct a `JsArrayBuffer` from a user defined blob of data ( `Vec<u8>` ) and it is not cloned, it is directly used as the internal buffer.\r\n\r\nThis allows us to replace the inifficent `Vec<u8>` to `JsArray` then to `TypedArray` (in typed arrays `from_iter`), with a `JsArrayBuffer` created from user data to `TypedArray`. With this `Vec<u8>` to `JsTypedArray` should be fully fixed as discussed in #2058.",
          "timestamp": "2022-07-07T17:40:58Z",
          "tree_id": "065f94b978b1f739d4b839a8befadc8bce694b49",
          "url": "https://github.com/boa-dev/boa/commit/48d8b420c5ef8e93c8ec04c7e5a3c6419121fff2"
        },
        "date": 1657217871458,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 270,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5732,
            "range": "± 208",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18032,
            "range": "± 630",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21060,
            "range": "± 845",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11973,
            "range": "± 437",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12779,
            "range": "± 678",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13572,
            "range": "± 987",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8278,
            "range": "± 284",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11115,
            "range": "± 364",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10458,
            "range": "± 542",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12958,
            "range": "± 740",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15673,
            "range": "± 435",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 18072,
            "range": "± 548",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 185584,
            "range": "± 10550",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9763,
            "range": "± 370",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14096,
            "range": "± 619",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7427,
            "range": "± 938",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 14473,
            "range": "± 546",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 18413,
            "range": "± 648",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 18230,
            "range": "± 825",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6897,
            "range": "± 483",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 38416,
            "range": "± 1377",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 34190,
            "range": "± 1974",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1486,
            "range": "± 277",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3301,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3563,
            "range": "± 291",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2047,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2036,
            "range": "± 88",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2259,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2049,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 2038,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2247,
            "range": "± 101",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2296,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1939,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2902,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4978,
            "range": "± 241",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2290,
            "range": "± 228",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2943,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1921,
            "range": "± 80",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1331,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1397,
            "range": "± 309",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1825,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 704,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6064,
            "range": "± 311",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5389,
            "range": "± 196",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5531,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 21202,
            "range": "± 862",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1706354,
            "range": "± 116512",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6351,
            "range": "± 313",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6660,
            "range": "± 966",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6854,
            "range": "± 270",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10975,
            "range": "± 503",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 10933,
            "range": "± 536",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 14791,
            "range": "± 512",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 14686,
            "range": "± 658",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9538,
            "range": "± 322",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1256437,
            "range": "± 38232",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 664621,
            "range": "± 24158",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5417,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 6047,
            "range": "± 521",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5472,
            "range": "± 394",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4033,
            "range": "± 194",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5235,
            "range": "± 401",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7309,
            "range": "± 493",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 732,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 715593,
            "range": "± 21709",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 650315,
            "range": "± 52912",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "6c65aa350b767b83ae047ecbb078bba4e8d17db1",
          "message": "Bump serde from 1.0.138 to 1.0.139 (#2173)\n\nBumps [serde](https://github.com/serde-rs/serde) from 1.0.138 to 1.0.139.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/serde-rs/serde/releases\">serde's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.139</h2>\n<ul>\n<li>Add <code>new</code> constructor function for all <code>IntoDeserializer</code> impls (<a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2246\">#2246</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/serde-rs/serde/commit/44b9496c9114d85df2a59b1cd00cbed418713bf9\"><code>44b9496</code></a> Release 1.0.139</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/7e1486d0da6d88411b85803912edc00c29ab556a\"><code>7e1486d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/serde-rs/serde/issues/2246\">#2246</a> from dtolnay/valuedenew</li>\n<li><a href=\"https://github.com/serde-rs/serde/commit/8170ffef2e1f4570394f3238457824bc8d7cc0c5\"><code>8170ffe</code></a> Add constructor function for all IntoDeserializer impls</li>\n<li>See full diff in <a href=\"https://github.com/serde-rs/serde/compare/v1.0.138...v1.0.139\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde&package-manager=cargo&previous-version=1.0.138&new-version=1.0.139)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-11T20:34:56Z",
          "tree_id": "9560ca2ee803fe53bcc390329e2a2450019a5c98",
          "url": "https://github.com/boa-dev/boa/commit/6c65aa350b767b83ae047ecbb078bba4e8d17db1"
        },
        "date": 1657574065963,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 284,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5792,
            "range": "± 120",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 18470,
            "range": "± 1276",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 21037,
            "range": "± 2481",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 12206,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 13172,
            "range": "± 545",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 14153,
            "range": "± 922",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8601,
            "range": "± 398",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 11388,
            "range": "± 857",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10780,
            "range": "± 594",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 13317,
            "range": "± 456",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 15473,
            "range": "± 691",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17984,
            "range": "± 852",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 178046,
            "range": "± 8113",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9962,
            "range": "± 413",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 14314,
            "range": "± 863",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7856,
            "range": "± 890",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 15007,
            "range": "± 2556",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 19151,
            "range": "± 2457",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 19097,
            "range": "± 2479",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 7261,
            "range": "± 852",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 42431,
            "range": "± 7667",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 36059,
            "range": "± 6755",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1580,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 3381,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3545,
            "range": "± 368",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 2031,
            "range": "± 191",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 2054,
            "range": "± 259",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 2286,
            "range": "± 239",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 2000,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1998,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2216,
            "range": "± 134",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2229,
            "range": "± 91",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1899,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2924,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4929,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2235,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2885,
            "range": "± 129",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1872,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1378,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1443,
            "range": "± 95",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1838,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 694,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 6018,
            "range": "± 221",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 5322,
            "range": "± 204",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 5478,
            "range": "± 250",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 22131,
            "range": "± 662",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1742576,
            "range": "± 47010",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 6652,
            "range": "± 180",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6832,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 7063,
            "range": "± 554",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 11712,
            "range": "± 735",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 11384,
            "range": "± 281",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 15632,
            "range": "± 430",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 15588,
            "range": "± 578",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 9950,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1344642,
            "range": "± 56251",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 693574,
            "range": "± 35526",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5731,
            "range": "± 261",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5952,
            "range": "± 231",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 5368,
            "range": "± 326",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 4218,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 5462,
            "range": "± 286",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 7740,
            "range": "± 572",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 791,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 760783,
            "range": "± 24200",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 695494,
            "range": "± 37071",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "d8af7b4ee5cc5c0d8f7243b698f98200e609c3c2",
          "message": "Implement arrow function parsing based on `CoverParenthesizedExpressionAndArrowParameterList` (#2171)\n\nPreviously we parsed arrow functions without the relevant cover grammar `CoverParenthesizedExpressionAndArrowParameterList`. This leads to either arrow functions or parenthesized expressions not being parsed correctly. Implementing this is a bit tricky, as the cover grammar is being parsed in `PrimaryExpression` while arrow functions are parsed in `AssignmentExpression`. This means that we have to return the covered parameter list that was parsed via `CoverParenthesizedExpressionAndArrowParameterList` in `PrimaryExpression` to `AssignmentExpression`. Fortunately this works pretty good and now the full arrow function test suite, with the exception of a few tests that require other features, passes.\r\n\r\nThis Pull Request changes the following:\r\n\r\n- Implement `CoverParenthesizedExpressionAndArrowParameterList` parsing.\r\n- Implement `CoverInitializedName` parsing in object literals.\r\n- Fix a bug where an environment would be wrongly removed from the environment stack when an expression in default function parameters throws.\r\n- Add more valid cases where on object literal can be converted to an object declaration pattern.\r\n- Implement `Expression` parsing manually to avoid some cases where the parser would prematurely throw an error.\r\n- Implement parsing of arrow functions via `CoverParenthesizedExpressionAndArrowParameterList`.\r\n- Remove unneeded `AllowIn` flag on array and object declaration pattern parsers.\r\n- Fix an of-by-one bug in the trace output.",
          "timestamp": "2022-07-11T21:39:01Z",
          "tree_id": "32cda7a4f1eeeec81535525de92807816078685a",
          "url": "https://github.com/boa-dev/boa/commit/d8af7b4ee5cc5c0d8f7243b698f98200e609c3c2"
        },
        "date": 1657577719041,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 230,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5564,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17202,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19792,
            "range": "± 84",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11524,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12347,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13147,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8003,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10530,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10237,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12630,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14455,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16971,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 154506,
            "range": "± 651",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9373,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13232,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7178,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12892,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16906,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16492,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6445,
            "range": "± 139",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34660,
            "range": "± 471",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29922,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1097,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2644,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2880,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1579,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1599,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1785,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1583,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1595,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1781,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1780,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1479,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2302,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3935,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1757,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2320,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1426,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1093,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1156,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1447,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 524,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4863,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4256,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4281,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17474,
            "range": "± 296",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1374458,
            "range": "± 2782",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5104,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5282,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5364,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9208,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9195,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12119,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12108,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8221,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1231419,
            "range": "± 24317",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 629746,
            "range": "± 7467",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4514,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4769,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4247,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3389,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4403,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6315,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 544,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 644383,
            "range": "± 4957",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 590993,
            "range": "± 5359",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "44d3291f2e9238f15bf261589777e2c30e4e13a8",
          "message": "Bump serde_yaml from 0.8.24 to 0.8.25 (#2172)\n\nBumps [serde_yaml](https://github.com/dtolnay/serde-yaml) from 0.8.24 to 0.8.25.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/dtolnay/serde-yaml/releases\">serde_yaml's releases</a>.</em></p>\n<blockquote>\n<h2>0.8.25</h2>\n<ul>\n<li>Add to <em>&quot;encoding&quot;</em> category on crates.io (<a href=\"https://github-redirect.dependabot.com/dtolnay/serde-yaml/issues/246\">#246</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/c8bfe34ba20b30318f95e36a2181be1f0bd7d60b\"><code>c8bfe34</code></a> Release 0.8.25</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/474fdf7c54408dc04c173ab971f77782075520f6\"><code>474fdf7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/serde-yaml/issues/246\">#246</a> from dtolnay/categories</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/7cf1df13bd95ee1c542ac49ec465ac5c45500e37\"><code>7cf1df1</code></a> Add to &quot;encoding&quot; category on crates.io</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/7fcb8094497db47dd82f5a70511bb3be8f24ca7d\"><code>7fcb809</code></a> Bump oldest rustc tested to 1.56.1</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/25f5f4e535b8703a5575dc98de9b1df402b2b3c9\"><code>25f5f4e</code></a> Use upstreamed docs.rs icon in docs.rs badge</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/1f278b54abb416345b0df6f43aac39bee557171d\"><code>1f278b5</code></a> Check for outdated deps in fuzz target</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/48c41243ab094117c6931474dda63bfcb075addb\"><code>48c4124</code></a> Check all crates in workspace for outdated deps</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/8063ff2370340a85c65bdb7e88080870becc3dd4\"><code>8063ff2</code></a> Ignore derive_partial_eq_without_eq clippy lint</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/3ca37a9d98a0f41b86e176b1b781bc4d54af480e\"><code>3ca37a9</code></a> Update fuzz manifest to match cargo fuzz's new template</li>\n<li><a href=\"https://github.com/dtolnay/serde-yaml/commit/970759cc5ddd8484e4fccf962c5489b8a147f1ef\"><code>970759c</code></a> Run miri in stricter miri-strict-provenance mode</li>\n<li>See full diff in <a href=\"https://github.com/dtolnay/serde-yaml/compare/0.8.24...0.8.25\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serde_yaml&package-manager=cargo&previous-version=0.8.24&new-version=0.8.25)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-11T22:06:12Z",
          "tree_id": "3ac59b9d419c4405b9d94562284dc4f4d5c77ca7",
          "url": "https://github.com/boa-dev/boa/commit/44d3291f2e9238f15bf261589777e2c30e4e13a8"
        },
        "date": 1657579628769,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 240,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5587,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17162,
            "range": "± 98",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19801,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11542,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12373,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13115,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8007,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10531,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10240,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12650,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14375,
            "range": "± 117",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16839,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153957,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9630,
            "range": "± 111",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13615,
            "range": "± 109",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7308,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12959,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16872,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16521,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6665,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34662,
            "range": "± 119",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29863,
            "range": "± 92",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1073,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2626,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2815,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1577,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1613,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1789,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1710,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1711,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1912,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1913,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1468,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2316,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3958,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1731,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2294,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1440,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1094,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1149,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1447,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 510,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4831,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4303,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4407,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17281,
            "range": "± 49",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1385812,
            "range": "± 3810",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5091,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5249,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5415,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9242,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9266,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12185,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12116,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8270,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1175020,
            "range": "± 4361",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 620098,
            "range": "± 1277",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4559,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4785,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4251,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3389,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4606,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6245,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 522,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 642673,
            "range": "± 2912",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 590975,
            "range": "± 2192",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "56be7cec523c091e6cc49419542f985cbf344106",
          "message": "Bump clap from 3.2.8 to 3.2.10 (#2175)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.8 to 3.2.10.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.10</h2>\n<h2>[3.2.10] - 2022-07-12</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Loosen lifetime on <code>Command::mut_subcommand</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.10] - 2022-07-12</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Loosen lifetime on <code>Command::mut_subcommand</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/9b6321a1f0128ea09f59f1abc169c79b97597dff\"><code>9b6321a</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/074712a739ee48fefca88ddf7198c0049c61589f\"><code>074712a</code></a> chore: Update release process</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/096db791bfd82385b99fa4253adb3e41de877b8d\"><code>096db79</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/3802a35a43a0b92a659b89d74c6093af377b36a7\"><code>3802a35</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3909\">#3909</a> from emersonford/fix-mut-subcommand-lifetime</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/8e1411b3b2396e1469b9512b6684ba7cb008d941\"><code>8e1411b</code></a> fix: Loosen lifetime constraint on mut_subcommand</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5c7ad0158707efbcfd5bcd06a027c8fffa8e2254\"><code>5c7ad01</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3908\">#3908</a> from jturner314-nrl/derive-ref-quotes</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f94eafbaf707d47732ea697fc91d6ab9112353e5\"><code>f94eafb</code></a> Clarify in docs that rename_all needs a string literal</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/93565c226c2935e7ce95939c4e9c5a859867d6c3\"><code>93565c2</code></a> Add &quot;&quot; around string literals in derive ref docs</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/7c0068e5b951c95217d40bc797fe0757dac86ed5\"><code>7c0068e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3906\">#3906</a> from epage/complete</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/6286339f81dcf8d42bc552e875e317c351e87774\"><code>6286339</code></a> docs(complete): Make example consistent</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.8...v3.2.10\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.8&new-version=3.2.10)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-13T09:32:47Z",
          "tree_id": "308f9de9068acb94218904341b7fadc9a9dc9c10",
          "url": "https://github.com/boa-dev/boa/commit/56be7cec523c091e6cc49419542f985cbf344106"
        },
        "date": 1657707164812,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 237,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5131,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16282,
            "range": "± 133",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18423,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10720,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11515,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12310,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7448,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9839,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9536,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11775,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13510,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15721,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147781,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8772,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12476,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6679,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12274,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15746,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15367,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6339,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32320,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27988,
            "range": "± 226",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1049,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2430,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2561,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1455,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1484,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1648,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1471,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1491,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1668,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1657,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1397,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2130,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4082,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1658,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2194,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1343,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1051,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1114,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1400,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 507,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4614,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4066,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4157,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17055,
            "range": "± 63",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1306476,
            "range": "± 2727",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4993,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5154,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5310,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8844,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8892,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11742,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11804,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7941,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1077656,
            "range": "± 3257",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 603411,
            "range": "± 15671",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4328,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4559,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4008,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3139,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4116,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5928,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 687,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 612604,
            "range": "± 4985",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 552096,
            "range": "± 2352",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "556f3ced15a5c4ace30b88cd07f6a97a556c81b6",
          "message": "Bump clap from 3.2.10 to 3.2.11 (#2176)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.10 to 3.2.11.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.11</h2>\n<h2>[3.2.11] - 2022-07-13</h2>\n<h3>Features</h3>\n<ul>\n<li>Added <code>Arg::get_all_short_aliaes</code> and <code>Arg::get_all_aliases</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.11] - 2022-07-13</h2>\n<h3>Features</h3>\n<ul>\n<li>Added <code>Arg::get_all_short_aliaes</code> and <code>Arg::get_all_aliases</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/2df0732df4d5a7dbd852243567b40898ae5f19bf\"><code>2df0732</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/1c2242251bfdfcfc4a44295fa769115cf421138c\"><code>1c22422</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/e8374e3f2ec85f6d9afa35f92f4edd71a982fb41\"><code>e8374e3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3913\">#3913</a> from emersonford/expose-non-visible-arg-aliases</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/e39156e0b9b33820b97d6e6357d306e7fbd25c5a\"><code>e39156e</code></a> feat: Add method to get non-visible arg aliases</li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.10...v3.2.11\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.10&new-version=3.2.11)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-14T13:09:36Z",
          "tree_id": "4e4b2e98249bb9bb8abde70cf31f92676db698e2",
          "url": "https://github.com/boa-dev/boa/commit/556f3ced15a5c4ace30b88cd07f6a97a556c81b6"
        },
        "date": 1657806431530,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 230,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5092,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16176,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18507,
            "range": "± 126",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10600,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11402,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12274,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7491,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9747,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9512,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11582,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13409,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15650,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 148031,
            "range": "± 172",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8700,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12400,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6601,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12291,
            "range": "± 56",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15727,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15314,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6322,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32287,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 28118,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1032,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2430,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2570,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1483,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1482,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1653,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1468,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1486,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1646,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1651,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1367,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2100,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4030,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1655,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2144,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1332,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1046,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1120,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1397,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 503,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4617,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4053,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4084,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 16903,
            "range": "± 45",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1291696,
            "range": "± 4793",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 4965,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5214,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5346,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8742,
            "range": "± 26",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8772,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11665,
            "range": "± 38",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11659,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7787,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1076957,
            "range": "± 6789",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 583145,
            "range": "± 12019",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4324,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4558,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4041,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3170,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4124,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5945,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 694,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 606614,
            "range": "± 3417",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 557912,
            "range": "± 3868",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "committer": {
            "email": "32105367+raskad@users.noreply.github.com",
            "name": "raskad",
            "username": "raskad"
          },
          "distinct": false,
          "id": "6e377d646794dcff92874466cf428c7379a65086",
          "message": "Implement Generator Function Constructor (#2174)\n\nThis Pull Request changes the following:\r\n\r\n- Modify `CreateDynamicFunction` to work with generator functions.\r\n- Add the name `anonymus` to functions created via `CreateDynamicFunction` to comply with the spec. \r\n- Fix a bug in the `Yield` parser where the parser would expect a token when no token is a legal case.\r\n- Change the `Yield::new` function to require less turbofishes.",
          "timestamp": "2022-07-15T21:34:23Z",
          "tree_id": "2837e7788ed9f18050832199e1289773cd5b1c0c",
          "url": "https://github.com/boa-dev/boa/commit/6e377d646794dcff92874466cf428c7379a65086"
        },
        "date": 1657922794438,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 254,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 4988,
            "range": "± 220",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16554,
            "range": "± 867",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18668,
            "range": "± 1019",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11049,
            "range": "± 482",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11718,
            "range": "± 594",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12111,
            "range": "± 596",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7363,
            "range": "± 390",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10470,
            "range": "± 287",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9831,
            "range": "± 318",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11894,
            "range": "± 478",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14079,
            "range": "± 467",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15650,
            "range": "± 703",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 146994,
            "range": "± 6955",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8642,
            "range": "± 482",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12095,
            "range": "± 583",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6357,
            "range": "± 299",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12955,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15762,
            "range": "± 668",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16584,
            "range": "± 548",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6531,
            "range": "± 328",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 31486,
            "range": "± 1502",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 27552,
            "range": "± 1154",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1078,
            "range": "± 51",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2575,
            "range": "± 144",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2650,
            "range": "± 140",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1521,
            "range": "± 73",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1639,
            "range": "± 67",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1731,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1552,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1600,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1725,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1821,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1447,
            "range": "± 82",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2303,
            "range": "± 121",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4516,
            "range": "± 182",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1716,
            "range": "± 83",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2264,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1474,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1000,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1079,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1415,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 545,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4984,
            "range": "± 240",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4230,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4398,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 18292,
            "range": "± 727",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1403294,
            "range": "± 62803",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5329,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5658,
            "range": "± 244",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5727,
            "range": "± 285",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9649,
            "range": "± 462",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9984,
            "range": "± 550",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13150,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12689,
            "range": "± 641",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8627,
            "range": "± 302",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1231553,
            "range": "± 58301",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 625222,
            "range": "± 29523",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4749,
            "range": "± 236",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5101,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4317,
            "range": "± 243",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3538,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4401,
            "range": "± 185",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6661,
            "range": "± 325",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 684,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 650781,
            "range": "± 28187",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 584192,
            "range": "± 29025",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "32e04467387023fcd0d4eb11f94be3cdfe426244",
          "message": "Bump dyn-clone from 1.0.6 to 1.0.7 (#2178)\n\nBumps [dyn-clone](https://github.com/dtolnay/dyn-clone) from 1.0.6 to 1.0.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/dtolnay/dyn-clone/releases\">dyn-clone's releases</a>.</em></p>\n<blockquote>\n<h2>1.0.7</h2>\n<ul>\n<li>Add support for <code>str</code> and <code>[T]</code> to implements traits that have <code>DynClone</code> as a supertrait (<a href=\"https://github-redirect.dependabot.com/dtolnay/dyn-clone/issues/19\">#19</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/0037ae16f3e0a0e98676ce18dc1f5fa45415e437\"><code>0037ae1</code></a> Release 1.0.7</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/3520bffd7e735588bdf3bfe36f5790cc25edbfde\"><code>3520bff</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/dtolnay/dyn-clone/issues/19\">#19</a> from dtolnay/slice</li>\n<li><a href=\"https://github.com/dtolnay/dyn-clone/commit/ba19e9effdac9a6321deecc8f61fc00a2540baba\"><code>ba19e9e</code></a> Add impls for str and [T]</li>\n<li>See full diff in <a href=\"https://github.com/dtolnay/dyn-clone/compare/1.0.6...1.0.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=dyn-clone&package-manager=cargo&previous-version=1.0.6&new-version=1.0.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-15T21:47:28Z",
          "tree_id": "28bdd34e68c6728e92c72c87c650585dd5e0434e",
          "url": "https://github.com/boa-dev/boa/commit/32e04467387023fcd0d4eb11f94be3cdfe426244"
        },
        "date": 1657924046102,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 227,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5643,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17389,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19747,
            "range": "± 55",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11500,
            "range": "± 39",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12368,
            "range": "± 64",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13354,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8127,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10452,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10280,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12500,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14559,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17039,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 156075,
            "range": "± 168",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9468,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13418,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7305,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 13002,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16956,
            "range": "± 31",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16491,
            "range": "± 103",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6636,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34948,
            "range": "± 96",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29946,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1090,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2655,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2768,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1578,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1607,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1761,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1570,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1588,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1765,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1782,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1454,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2286,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 3921,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1739,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2266,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1422,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1068,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1142,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1439,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 490,
            "range": "± 1",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4902,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4326,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4416,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17048,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1423689,
            "range": "± 4574",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5124,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5315,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5443,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9650,
            "range": "± 221",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9590,
            "range": "± 252",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12314,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12298,
            "range": "± 48",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8298,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1175891,
            "range": "± 8329",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 623442,
            "range": "± 6688",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4534,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4829,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4242,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3478,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4475,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6120,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 521,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 633096,
            "range": "± 10803",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 585409,
            "range": "± 4611",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "bf39e30c1274baff490821749eab0fec1454a4fe",
          "message": "Bump clap from 3.2.11 to 3.2.12 (#2179)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.11 to 3.2.12.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.12</h2>\n<h2>[3.2.12] - 2022-07-14</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Allow an arg to declare a conflict with a group</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.12] - 2022-07-14</h2>\n<h3>Fixes</h3>\n<ul>\n<li>Allow an arg to declare a conflict with a group</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/a8a7a61f5640264b072a989d8dd503559c6ccd66\"><code>a8a7a61</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/ed8837f2cc81b52bf4400b3e6cc94c0d195cc555\"><code>ed8837f</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/afc540153b0fceda3c4e47c707b4b990734516f2\"><code>afc5401</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3902\">#3902</a> from tmccombs/get-conflicts-with-group</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f27f1f57ea308bf04adb1180f91ff9d97eb5fc4d\"><code>f27f1f5</code></a> fix: Include groups in <code>get_arg_conflicts_with</code></li>\n<li>See full diff in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.11...v3.2.12\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.11&new-version=3.2.12)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-15T22:06:01Z",
          "tree_id": "5a8ddaff1a86f514603722fed0ee7c92b82f416d",
          "url": "https://github.com/boa-dev/boa/commit/bf39e30c1274baff490821749eab0fec1454a4fe"
        },
        "date": 1657925257465,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 252,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5400,
            "range": "± 145",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17317,
            "range": "± 599",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19389,
            "range": "± 769",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11102,
            "range": "± 329",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11997,
            "range": "± 321",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13023,
            "range": "± 524",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7939,
            "range": "± 338",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10229,
            "range": "± 192",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10469,
            "range": "± 508",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12255,
            "range": "± 543",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14109,
            "range": "± 357",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 17031,
            "range": "± 672",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 161586,
            "range": "± 8809",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9173,
            "range": "± 247",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13062,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6874,
            "range": "± 273",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12677,
            "range": "± 973",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16419,
            "range": "± 370",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 16018,
            "range": "± 643",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6773,
            "range": "± 178",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34781,
            "range": "± 1960",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29905,
            "range": "± 1360",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1272,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2897,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 3064,
            "range": "± 352",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1757,
            "range": "± 135",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1829,
            "range": "± 66",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1957,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1827,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1788,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 2002,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 2010,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1675,
            "range": "± 60",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2584,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4548,
            "range": "± 153",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 2035,
            "range": "± 128",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2497,
            "range": "± 122",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1653,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1177,
            "range": "± 102",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1262,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1580,
            "range": "± 44",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 601,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 5293,
            "range": "± 198",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4734,
            "range": "± 306",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4878,
            "range": "± 177",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 19271,
            "range": "± 713",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1532464,
            "range": "± 40925",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5901,
            "range": "± 312",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 6059,
            "range": "± 232",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 6192,
            "range": "± 118",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 10127,
            "range": "± 554",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9999,
            "range": "± 358",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 13689,
            "range": "± 422",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 13713,
            "range": "± 436",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8815,
            "range": "± 1084",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1176677,
            "range": "± 60935",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 607982,
            "range": "± 22304",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 5093,
            "range": "± 175",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 5393,
            "range": "± 301",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4750,
            "range": "± 104",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3795,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4799,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6780,
            "range": "± 227",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 638,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 658113,
            "range": "± 18300",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 594821,
            "range": "± 44841",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "committer": {
            "email": "razican@protonmail.ch",
            "name": "Iban Eguia",
            "username": "Razican"
          },
          "distinct": false,
          "id": "79ea834f92bb2bda75e5a54ae2ff0b569c047b0d",
          "message": "Upgraded rustyline & phf (#2193)\n\nThis Pull Request overrides #2183 #2187, #2189 and #2190.\r\n\r\nIt changes the following:\r\n\r\n- Updates rustyline to 10.0.0 (this uses the new phf 0.11)\r\n- Updates phf to 0.11 to avoid different dependency versions\r\n- Fixes the `Editor` creation, which now returns a `Result`.",
          "timestamp": "2022-07-19T08:46:42Z",
          "tree_id": "399bfa013838aa6091c374fbd1afcfc139b20c18",
          "url": "https://github.com/boa-dev/boa/commit/79ea834f92bb2bda75e5a54ae2ff0b569c047b0d"
        },
        "date": 1658222555137,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 238,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5139,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 16072,
            "range": "± 717",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 18365,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 10666,
            "range": "± 61",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 11334,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 12193,
            "range": "± 105",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 7424,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 9700,
            "range": "± 25",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 9476,
            "range": "± 137",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 11605,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 13476,
            "range": "± 42",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 15738,
            "range": "± 173",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 147382,
            "range": "± 438",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 8665,
            "range": "± 53",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 12415,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 6553,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12199,
            "range": "± 34",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 15801,
            "range": "± 41",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15345,
            "range": "± 110",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6297,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 32403,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 24710,
            "range": "± 1542",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1029,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2478,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2631,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1480,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1501,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1682,
            "range": "± 21",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1472,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1483,
            "range": "± 5",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1653,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1656,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1389,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2143,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4046,
            "range": "± 13",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1638,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2152,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1341,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1055,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1128,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1408,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 520,
            "range": "± 0",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4641,
            "range": "± 24",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4081,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4228,
            "range": "± 27",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17414,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1332422,
            "range": "± 9646",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5074,
            "range": "± 65",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5288,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5411,
            "range": "± 20",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 8970,
            "range": "± 30",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 8933,
            "range": "± 155",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 11934,
            "range": "± 443",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 11924,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 7938,
            "range": "± 70",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1177074,
            "range": "± 4061",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 592185,
            "range": "± 9953",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4435,
            "range": "± 29",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4162,
            "range": "± 283",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4146,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3218,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4196,
            "range": "± 54",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 5922,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 675,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 623821,
            "range": "± 5763",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 574253,
            "range": "± 4468",
            "unit": "ns/iter"
          }
        ]
      },
      {
        "commit": {
          "author": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "committer": {
            "email": "49699333+dependabot[bot]@users.noreply.github.com",
            "name": "dependabot[bot]",
            "username": "dependabot[bot]"
          },
          "distinct": false,
          "id": "0e61efc27ea1d5b4757cbd256e5fdf4f22ff37de",
          "message": "Bump clap from 3.2.12 to 3.2.14 (#2199)\n\nBumps [clap](https://github.com/clap-rs/clap) from 3.2.12 to 3.2.14.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/releases\">clap's releases</a>.</em></p>\n<blockquote>\n<h2>v3.2.14</h2>\n<h2>[3.2.14] - 2022-07-21</h2>\n<h3>Fixes</h3>\n<ul>\n<li>A <code>multple_values</code> positional followed by another positional now works with multiple flags</li>\n</ul>\n<h2>v3.2.13</h2>\n<h2>[3.2.13] - 2022-07-19</h2>\n<h3>Documentation</h3>\n<ul>\n<li>Pulled in tutorials, cookbook, and derive reference into rustdoc</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/clap-rs/clap/blob/master/CHANGELOG.md\">clap's changelog</a>.</em></p>\n<blockquote>\n<h2>[3.2.14] - 2022-07-21</h2>\n<h3>Fixes</h3>\n<ul>\n<li>A <code>multple_values</code> positional followed by another positional now works with multiple flags</li>\n</ul>\n<h2>[3.2.13] - 2022-07-19</h2>\n<h3>Documentation</h3>\n<ul>\n<li>Pulled in tutorials, cookbook, and derive reference into rustdoc</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/clap-rs/clap/commit/d40e42a9ca0b321933afe8762166edae5ed785a6\"><code>d40e42a</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/88b9406c1b286f31d1d6ef82356641c2df9bad20\"><code>88b9406</code></a> docs: Update changelog</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/f48e517b717a48ec1df0cd43af78c3117ac8e170\"><code>f48e517</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3960\">#3960</a> from epage/pos</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/48f087d09036a7e6c5702da214f9f5f094b80cef\"><code>48f087d</code></a> fix(parser): low index multiples work with flags</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/5e02445ce5f6eb89933d5985736c69059d0dc7af\"><code>5e02445</code></a> docs: Small tweak to lib docs</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/318e0ab35d27117979fb5d76e21ed1d5b3e2f596\"><code>318e0ab</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/clap-rs/clap/issues/3955\">#3955</a> from tshepang/patch-1</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/01d7e7ac0410761911bd4afa57aa90d1465295d3\"><code>01d7e7a</code></a> docs: reduce the need to guess</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/e6b8b4b6077916ca7c51047b92a4ecb6f5f7a2b9\"><code>e6b8b4b</code></a> chore: Release</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/85ccf3e90117f240a56f64ceacf5fa9d187c02aa\"><code>85ccf3e</code></a> chore: Update release process</li>\n<li><a href=\"https://github.com/clap-rs/clap/commit/fcd7cae81f2d5510d68caec173556245e705b9f8\"><code>fcd7cae</code></a> docs: Update changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/clap-rs/clap/compare/v3.2.12...v3.2.14\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=clap&package-manager=cargo&previous-version=3.2.12&new-version=3.2.14)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>",
          "timestamp": "2022-07-21T15:24:31Z",
          "tree_id": "92249b17cb0ebb34fe9e20c0326951ef0b86b2b2",
          "url": "https://github.com/boa-dev/boa/commit/0e61efc27ea1d5b4757cbd256e5fdf4f22ff37de"
        },
        "date": 1658419259001,
        "tool": "cargo",
        "benches": [
          {
            "name": "Create Realm",
            "value": 279,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Parser)",
            "value": 5567,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Parser)",
            "value": 17319,
            "range": "± 77",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Parser)",
            "value": 19873,
            "range": "± 74",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Parser)",
            "value": 11503,
            "range": "± 78",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Parser)",
            "value": 12232,
            "range": "± 161",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Parser)",
            "value": 13126,
            "range": "± 81",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Parser)",
            "value": 8016,
            "range": "± 33",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Parser)",
            "value": 10489,
            "range": "± 35",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Parser)",
            "value": 10291,
            "range": "± 58",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Parser)",
            "value": 12507,
            "range": "± 32",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Parser)",
            "value": 14549,
            "range": "± 43",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Parser)",
            "value": 16938,
            "range": "± 152",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Parser)",
            "value": 153879,
            "range": "± 348",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Parser)",
            "value": 9490,
            "range": "± 46",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Parser)",
            "value": 13395,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Parser)",
            "value": 7350,
            "range": "± 36",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Parser)",
            "value": 12534,
            "range": "± 97",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Parser)",
            "value": 16197,
            "range": "± 72",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Parser)",
            "value": 15868,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Parser)",
            "value": 6784,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Parser)",
            "value": 34187,
            "range": "± 151",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Parser)",
            "value": 29846,
            "range": "± 107",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Compiler)",
            "value": 1094,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Compiler)",
            "value": 2667,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Compiler)",
            "value": 2761,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Compiler)",
            "value": 1599,
            "range": "± 19",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Compiler)",
            "value": 1619,
            "range": "± 22",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Compiler)",
            "value": 1790,
            "range": "± 8",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Compiler)",
            "value": 1606,
            "range": "± 11",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Compiler)",
            "value": 1608,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Compiler)",
            "value": 1790,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Compiler)",
            "value": 1800,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Compiler)",
            "value": 1475,
            "range": "± 28",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Compiler)",
            "value": 2328,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Compiler)",
            "value": 4002,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Compiler)",
            "value": 1797,
            "range": "± 10",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Compiler)",
            "value": 2358,
            "range": "± 23",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Compiler)",
            "value": 1475,
            "range": "± 2",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Compiler)",
            "value": 1086,
            "range": "± 4",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Compiler)",
            "value": 1161,
            "range": "± 9",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Compiler)",
            "value": 1471,
            "range": "± 6",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Compiler)",
            "value": 518,
            "range": "± 18",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Compiler)",
            "value": 4874,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Compiler)",
            "value": 4277,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Symbols (Execution)",
            "value": 4474,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "For loop (Execution)",
            "value": 17943,
            "range": "± 93",
            "unit": "ns/iter"
          },
          {
            "name": "Fibonacci (Execution)",
            "value": 1446143,
            "range": "± 8005",
            "unit": "ns/iter"
          },
          {
            "name": "Object Creation (Execution)",
            "value": 5311,
            "range": "± 90",
            "unit": "ns/iter"
          },
          {
            "name": "Static Object Property Access (Execution)",
            "value": 5481,
            "range": "± 15",
            "unit": "ns/iter"
          },
          {
            "name": "Dynamic Object Property Access (Execution)",
            "value": 5676,
            "range": "± 50",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal Creation (Execution)",
            "value": 9356,
            "range": "± 40",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Creation (Execution)",
            "value": 9348,
            "range": "± 47",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp Literal (Execution)",
            "value": 12491,
            "range": "± 132",
            "unit": "ns/iter"
          },
          {
            "name": "RegExp (Execution)",
            "value": 12607,
            "range": "± 37",
            "unit": "ns/iter"
          },
          {
            "name": "Array access (Execution)",
            "value": 8328,
            "range": "± 79",
            "unit": "ns/iter"
          },
          {
            "name": "Array creation (Execution)",
            "value": 1173408,
            "range": "± 5589",
            "unit": "ns/iter"
          },
          {
            "name": "Array pop (Execution)",
            "value": 622537,
            "range": "± 3152",
            "unit": "ns/iter"
          },
          {
            "name": "String concatenation (Execution)",
            "value": 4602,
            "range": "± 7",
            "unit": "ns/iter"
          },
          {
            "name": "String comparison (Execution)",
            "value": 4961,
            "range": "± 17",
            "unit": "ns/iter"
          },
          {
            "name": "String copy (Execution)",
            "value": 4343,
            "range": "± 12",
            "unit": "ns/iter"
          },
          {
            "name": "Number Object Access (Execution)",
            "value": 3438,
            "range": "± 16",
            "unit": "ns/iter"
          },
          {
            "name": "Boolean Object Access (Execution)",
            "value": 4588,
            "range": "± 86",
            "unit": "ns/iter"
          },
          {
            "name": "String Object Access (Execution)",
            "value": 6221,
            "range": "± 14",
            "unit": "ns/iter"
          },
          {
            "name": "Arithmetic operations (Execution)",
            "value": 519,
            "range": "± 3",
            "unit": "ns/iter"
          },
          {
            "name": "Clean js (Execution)",
            "value": 651084,
            "range": "± 4286",
            "unit": "ns/iter"
          },
          {
            "name": "Mini js (Execution)",
            "value": 591909,
            "range": "± 4430",
            "unit": "ns/iter"
          }
        ]
      }
    ]
  }
}